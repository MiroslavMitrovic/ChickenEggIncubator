
InkubatorKontrola.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a55c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800a6f0  0800a6f0  0001a6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab0c  0800ab0c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab0c  0800ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab14  0800ab14  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab18  0800ab18  0001ab18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ab1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001f0  0800ad0c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800ad0c  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114c7  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002034  00000000  00000000  000316e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00033720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022422  00000000  00000000  00035498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1dd  00000000  00000000  000578ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccfd5  00000000  00000000  00062a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fa6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005040  00000000  00000000  0012fae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6d4 	.word	0x0800a6d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800a6d4 	.word	0x0800a6d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <I2C_Read_Register>:
unsigned short dig_T1, dig_P1,dig_H1,dig_H3;
signed short dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9,dig_H2,dig_H4,dig_H5,dig_H6;
float  relative_humidity, temperature, pressure, altitude, init_height;

uint8_t I2C_Read_Register(uint8_t device_adr, uint8_t internal_adr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460a      	mov	r2, r1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	b299      	uxth	r1, r3
 8000fa0:	f107 020c 	add.w	r2, r7, #12
 8000fa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <I2C_Read_Register+0x50>)
 8000fae:	f002 fd8d 	bl	8003acc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, &rx_buff[0], 1, 10000);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	f107 0208 	add.w	r2, r7, #8
 8000fbe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <I2C_Read_Register+0x50>)
 8000fc8:	f002 fe7e 	bl	8003cc8 <HAL_I2C_Master_Receive>


	return rx_buff[0];
 8000fcc:	7a3b      	ldrb	r3, [r7, #8]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002d0 	.word	0x200002d0

08000fdc <I2C_Write_Register>:

void I2C_Write_Register(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	71bb      	strb	r3, [r7, #6]
 8000fea:	4613      	mov	r3, r2
 8000fec:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, 2, 10000);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <I2C_Write_Register+0x38>)
 8001008:	f002 fd60 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200002d0 	.word	0x200002d0

08001018 <BMP280_get_calib_values>:

void BMP280_get_calib_values(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af02      	add	r7, sp, #8
	uint8_t rx_buff[25], starting_address=0x88;
 800101e:	2388      	movs	r3, #136	; 0x88
 8001020:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff2[7], starting_address2=0xE1;
 8001022:	23e1      	movs	r3, #225	; 0xe1
 8001024:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 8001026:	f107 020b 	add.w	r2, r7, #11
 800102a:	f242 7310 	movw	r3, #10000	; 0x2710
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	21ec      	movs	r1, #236	; 0xec
 8001034:	486d      	ldr	r0, [pc, #436]	; (80011ec <BMP280_get_calib_values+0x1d4>)
 8001036:	f002 fd49 	bl	8003acc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 24, 10000);
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2318      	movs	r3, #24
 8001046:	21ed      	movs	r1, #237	; 0xed
 8001048:	4868      	ldr	r0, [pc, #416]	; (80011ec <BMP280_get_calib_values+0x1d4>)
 800104a:	f002 fe3d 	bl	8003cc8 <HAL_I2C_Master_Receive>

	dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	b29a      	uxth	r2, r3
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	4413      	add	r3, r2
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <BMP280_get_calib_values+0x1d8>)
 8001060:	801a      	strh	r2, [r3, #0]
	dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	b29a      	uxth	r2, r3
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	b29b      	uxth	r3, r3
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	4413      	add	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <BMP280_get_calib_values+0x1dc>)
 8001076:	801a      	strh	r2, [r3, #0]
	dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8001078:	7c3b      	ldrb	r3, [r7, #16]
 800107a:	b29a      	uxth	r2, r3
 800107c:	7c7b      	ldrb	r3, [r7, #17]
 800107e:	b29b      	uxth	r3, r3
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	4413      	add	r3, r2
 8001086:	b29b      	uxth	r3, r3
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <BMP280_get_calib_values+0x1e0>)
 800108c:	801a      	strh	r2, [r3, #0]
	dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 800108e:	7cbb      	ldrb	r3, [r7, #18]
 8001090:	b29a      	uxth	r2, r3
 8001092:	7cfb      	ldrb	r3, [r7, #19]
 8001094:	b29b      	uxth	r3, r3
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	4413      	add	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <BMP280_get_calib_values+0x1e4>)
 80010a0:	801a      	strh	r2, [r3, #0]
	dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	7d7b      	ldrb	r3, [r7, #21]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b52      	ldr	r3, [pc, #328]	; (8001200 <BMP280_get_calib_values+0x1e8>)
 80010b6:	801a      	strh	r2, [r3, #0]
	dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 80010b8:	7dbb      	ldrb	r3, [r7, #22]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <BMP280_get_calib_values+0x1ec>)
 80010cc:	801a      	strh	r2, [r3, #0]
	dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 80010ce:	7e3b      	ldrb	r3, [r7, #24]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	7e7b      	ldrb	r3, [r7, #25]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <BMP280_get_calib_values+0x1f0>)
 80010e2:	801a      	strh	r2, [r3, #0]
	dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 80010e4:	7ebb      	ldrb	r3, [r7, #26]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	7efb      	ldrb	r3, [r7, #27]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <BMP280_get_calib_values+0x1f4>)
 80010f8:	801a      	strh	r2, [r3, #0]
	dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 80010fa:	7f3b      	ldrb	r3, [r7, #28]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	7f7b      	ldrb	r3, [r7, #29]
 8001100:	b29b      	uxth	r3, r3
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <BMP280_get_calib_values+0x1f8>)
 800110e:	801a      	strh	r2, [r3, #0]
	dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 8001110:	7fbb      	ldrb	r3, [r7, #30]
 8001112:	b29a      	uxth	r2, r3
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	b29b      	uxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b29b      	uxth	r3, r3
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <BMP280_get_calib_values+0x1fc>)
 8001124:	801a      	strh	r2, [r3, #0]
	dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 8001126:	f897 3020 	ldrb.w	r3, [r7, #32]
 800112a:	b29a      	uxth	r2, r3
 800112c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001130:	b29b      	uxth	r3, r3
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b29b      	uxth	r3, r3
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <BMP280_get_calib_values+0x200>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 8001140:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001144:	b29a      	uxth	r2, r3
 8001146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800114a:	b29b      	uxth	r3, r3
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b29b      	uxth	r3, r3
 8001150:	4413      	add	r3, r2
 8001152:	b29b      	uxth	r3, r3
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <BMP280_get_calib_values+0x204>)
 8001158:	801a      	strh	r2, [r3, #0]
	dig_H1=rx_buff[25];
 800115a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <BMP280_get_calib_values+0x208>)
 8001162:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address2, 1, 10000);
 8001164:	1cfa      	adds	r2, r7, #3
 8001166:	f242 7310 	movw	r3, #10000	; 0x2710
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	21ec      	movs	r1, #236	; 0xec
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <BMP280_get_calib_values+0x1d4>)
 8001172:	f002 fcab 	bl	8003acc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff2[0], 6, 10000);
 8001176:	1d3a      	adds	r2, r7, #4
 8001178:	f242 7310 	movw	r3, #10000	; 0x2710
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2306      	movs	r3, #6
 8001180:	21ed      	movs	r1, #237	; 0xed
 8001182:	481a      	ldr	r0, [pc, #104]	; (80011ec <BMP280_get_calib_values+0x1d4>)
 8001184:	f002 fda0 	bl	8003cc8 <HAL_I2C_Master_Receive>

	dig_H2=(rx_buff2[0])+(rx_buff2[1]<<8);
 8001188:	793b      	ldrb	r3, [r7, #4]
 800118a:	b29a      	uxth	r2, r3
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	b29b      	uxth	r3, r3
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b29b      	uxth	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <BMP280_get_calib_values+0x20c>)
 800119c:	801a      	strh	r2, [r3, #0]
	dig_H3=rx_buff2[2];
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <BMP280_get_calib_values+0x210>)
 80011a4:	801a      	strh	r2, [r3, #0]
	dig_H4=(rx_buff2[3]<<4)+(rx_buff2[4]&(0x0F));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	7a3b      	ldrb	r3, [r7, #8]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <BMP280_get_calib_values+0x214>)
 80011c0:	801a      	strh	r2, [r3, #0]
	dig_H5=(rx_buff2[5]<<4)+((rx_buff2[4]&(0xF0))>>4);
 80011c2:	7a7b      	ldrb	r3, [r7, #9]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	7a3b      	ldrb	r3, [r7, #8]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <BMP280_get_calib_values+0x218>)
 80011da:	801a      	strh	r2, [r3, #0]
	dig_H6=rx_buff2[6];
 80011dc:	7abb      	ldrb	r3, [r7, #10]
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <BMP280_get_calib_values+0x21c>)
 80011e2:	801a      	strh	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200002d0 	.word	0x200002d0
 80011f0:	20000276 	.word	0x20000276
 80011f4:	2000027e 	.word	0x2000027e
 80011f8:	200002b4 	.word	0x200002b4
 80011fc:	200002a8 	.word	0x200002a8
 8001200:	20000290 	.word	0x20000290
 8001204:	200002aa 	.word	0x200002aa
 8001208:	20000292 	.word	0x20000292
 800120c:	200002a2 	.word	0x200002a2
 8001210:	200002b6 	.word	0x200002b6
 8001214:	20000274 	.word	0x20000274
 8001218:	200002ac 	.word	0x200002ac
 800121c:	200002b2 	.word	0x200002b2
 8001220:	20000280 	.word	0x20000280
 8001224:	200002b8 	.word	0x200002b8
 8001228:	200002b0 	.word	0x200002b0
 800122c:	2000027c 	.word	0x2000027c
 8001230:	200002ae 	.word	0x200002ae
 8001234:	200002a0 	.word	0x200002a0

08001238 <BMP280_init>:

void BMP280_init(uint8_t register_F4, uint8_t register_F5,uint8_t register_F2)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	4613      	mov	r3, r2
 8001248:	717b      	strb	r3, [r7, #5]
	I2C_Write_Register(BMP280_dev_address, 0xF2, register_F2);// oversampling x16 101
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	461a      	mov	r2, r3
 800124e:	21f2      	movs	r1, #242	; 0xf2
 8001250:	20ec      	movs	r0, #236	; 0xec
 8001252:	f7ff fec3 	bl	8000fdc <I2C_Write_Register>
	I2C_Write_Register(BMP280_dev_address, 0xF4, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	461a      	mov	r2, r3
 800125a:	21f4      	movs	r1, #244	; 0xf4
 800125c:	20ec      	movs	r0, #236	; 0xec
 800125e:	f7ff febd 	bl	8000fdc <I2C_Write_Register>
	I2C_Write_Register(BMP280_dev_address, 0xF5, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	461a      	mov	r2, r3
 8001266:	21f5      	movs	r1, #245	; 0xf5
 8001268:	20ec      	movs	r0, #236	; 0xec
 800126a:	f7ff feb7 	bl	8000fdc <I2C_Write_Register>

	BMP280_get_calib_values();
 800126e:	f7ff fed3 	bl	8001018 <BMP280_get_calib_values>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	0000      	movs	r0, r0
 800127c:	0000      	movs	r0, r0
	...

08001280 <BMP280_calc_values>:

void BMP280_calc_values(void)
{
 8001280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	b097      	sub	sp, #92	; 0x5c
 8001286:	af02      	add	r7, sp, #8
	uint8_t status, rx_buff[8], starting_address=0xF7;
 8001288:	23f7      	movs	r3, #247	; 0xf7
 800128a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		status=I2C_Read_Register(BMP280_dev_address, 0xF3);
 800128e:	21f3      	movs	r1, #243	; 0xf3
 8001290:	20ec      	movs	r0, #236	; 0xec
 8001292:	f7ff fe79 	bl	8000f88 <I2C_Read_Register>
 8001296:	4603      	mov	r3, r0
 8001298:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	} while(((status&0b00001000)==8)||((status&0b00000001)==1));
 800129c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f2      	bne.n	800128e <BMP280_calc_values+0xe>
 80012a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ec      	bne.n	800128e <BMP280_calc_values+0xe>

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 80012b4:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80012b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	21ec      	movs	r1, #236	; 0xec
 80012c2:	48cd      	ldr	r0, [pc, #820]	; (80015f8 <BMP280_calc_values+0x378>)
 80012c4:	f002 fc02 	bl	8003acc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 8, 10000);
 80012c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2308      	movs	r3, #8
 80012d4:	21ed      	movs	r1, #237	; 0xed
 80012d6:	48c8      	ldr	r0, [pc, #800]	; (80015f8 <BMP280_calc_values+0x378>)
 80012d8:	f002 fcf6 	bl	8003cc8 <HAL_I2C_Master_Receive>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 80012dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80012e0:	623b      	str	r3, [r7, #32]
	temp[1]=rx_buff[4];
 80012e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012e6:	61fb      	str	r3, [r7, #28]
	temp[0]=rx_buff[5];
 80012e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012ec:	61bb      	str	r3, [r7, #24]
	temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	031a      	lsls	r2, r3, #12
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	441a      	add	r2, r3
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	461a      	mov	r2, r3
 8001300:	4bbe      	ldr	r3, [pc, #760]	; (80015fc <BMP280_calc_values+0x37c>)
 8001302:	601a      	str	r2, [r3, #0]

	temp[2]=rx_buff[0];
 8001304:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001308:	623b      	str	r3, [r7, #32]
	temp[1]=rx_buff[1];
 800130a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800130e:	61fb      	str	r3, [r7, #28]
	temp[0]=rx_buff[2];
 8001310:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001314:	61bb      	str	r3, [r7, #24]
	pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	031a      	lsls	r2, r3, #12
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	441a      	add	r2, r3
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	4413      	add	r3, r2
 8001326:	461a      	mov	r2, r3
 8001328:	4bb5      	ldr	r3, [pc, #724]	; (8001600 <BMP280_calc_values+0x380>)
 800132a:	601a      	str	r2, [r3, #0]

	temp[1]=rx_buff[6];
 800132c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001330:	61fb      	str	r3, [r7, #28]
	temp[0]=rx_buff[7];
 8001332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001336:	61bb      	str	r3, [r7, #24]
	humidity_raw=(temp[1]<<8)+(temp[0]);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	021a      	lsls	r2, r3, #8
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4413      	add	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4bb0      	ldr	r3, [pc, #704]	; (8001604 <BMP280_calc_values+0x384>)
 8001344:	601a      	str	r2, [r3, #0]


	double var1, var2;
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8001346:	4bad      	ldr	r3, [pc, #692]	; (80015fc <BMP280_calc_values+0x37c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8ea 	bl	8000524 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4bac      	ldr	r3, [pc, #688]	; (8001608 <BMP280_calc_values+0x388>)
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4603      	mov	r3, r0
 800135c:	460c      	mov	r4, r1
 800135e:	4625      	mov	r5, r4
 8001360:	461c      	mov	r4, r3
 8001362:	4baa      	ldr	r3, [pc, #680]	; (800160c <BMP280_calc_values+0x38c>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8cc 	bl	8000504 <__aeabi_ui2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4ba7      	ldr	r3, [pc, #668]	; (8001610 <BMP280_calc_values+0x390>)
 8001372:	f7ff fa6b 	bl	800084c <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7fe ff83 	bl	8000288 <__aeabi_dsub>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4625      	mov	r5, r4
 8001388:	461c      	mov	r4, r3
 800138a:	4ba2      	ldr	r3, [pc, #648]	; (8001614 <BMP280_calc_values+0x394>)
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8c7 	bl	8000524 <__aeabi_i2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4620      	mov	r0, r4
 800139c:	4629      	mov	r1, r5
 800139e:	f7ff f92b 	bl	80005f8 <__aeabi_dmul>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 80013aa:	4b94      	ldr	r3, [pc, #592]	; (80015fc <BMP280_calc_values+0x37c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8b8 	bl	8000524 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80013bc:	f7ff fa46 	bl	800084c <__aeabi_ddiv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	4625      	mov	r5, r4
 80013c6:	461c      	mov	r4, r3
 80013c8:	4b90      	ldr	r3, [pc, #576]	; (800160c <BMP280_calc_values+0x38c>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f899 	bl	8000504 <__aeabi_ui2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b90      	ldr	r3, [pc, #576]	; (8001618 <BMP280_calc_values+0x398>)
 80013d8:	f7ff fa38 	bl	800084c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7fe ff50 	bl	8000288 <__aeabi_dsub>
 80013e8:	4603      	mov	r3, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	4625      	mov	r5, r4
 80013ee:	461c      	mov	r4, r3
 80013f0:	4b82      	ldr	r3, [pc, #520]	; (80015fc <BMP280_calc_values+0x37c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f895 	bl	8000524 <__aeabi_i2d>
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001402:	f7ff fa23 	bl	800084c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4690      	mov	r8, r2
 800140c:	4699      	mov	r9, r3
 800140e:	4b7f      	ldr	r3, [pc, #508]	; (800160c <BMP280_calc_values+0x38c>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f876 	bl	8000504 <__aeabi_ui2d>
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b7e      	ldr	r3, [pc, #504]	; (8001618 <BMP280_calc_values+0x398>)
 800141e:	f7ff fa15 	bl	800084c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4640      	mov	r0, r8
 8001428:	4649      	mov	r1, r9
 800142a:	f7fe ff2d 	bl	8000288 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff f8df 	bl	80005f8 <__aeabi_dmul>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4625      	mov	r5, r4
 8001440:	461c      	mov	r4, r3
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <BMP280_calc_values+0x39c>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_i2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7ff f8cf 	bl	80005f8 <__aeabi_dmul>
 800145a:	4603      	mov	r3, r0
 800145c:	460c      	mov	r4, r1
 800145e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	double t_fine = (int32_t)(var1+var2);
 8001462:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001466:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800146a:	f7fe ff0f 	bl	800028c <__adddf3>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	4618      	mov	r0, r3
 8001474:	4621      	mov	r1, r4
 8001476:	f7ff fb6f 	bl	8000b58 <__aeabi_d2iz>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f851 	bl	8000524 <__aeabi_i2d>
 8001482:	4603      	mov	r3, r0
 8001484:	460c      	mov	r4, r1
 8001486:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
volatile	float T = (var1+var2)/5120.0;
 800148a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800148e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001492:	f7fe fefb 	bl	800028c <__adddf3>
 8001496:	4603      	mov	r3, r0
 8001498:	460c      	mov	r4, r1
 800149a:	4618      	mov	r0, r3
 800149c:	4621      	mov	r1, r4
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <BMP280_calc_values+0x3a0>)
 80014a4:	f7ff f9d2 	bl	800084c <__aeabi_ddiv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	4618      	mov	r0, r3
 80014ae:	4621      	mov	r1, r4
 80014b0:	f7ff fb9a 	bl	8000be8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]

	var1=((double)t_fine/2.0)-64000.0;
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014c4:	f7ff f9c2 	bl	800084c <__aeabi_ddiv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4618      	mov	r0, r3
 80014ce:	4621      	mov	r1, r4
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <BMP280_calc_values+0x3a4>)
 80014d6:	f7fe fed7 	bl	8000288 <__aeabi_dsub>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	var2=var1*var1*((double)dig_P6)/32768.0;
 80014e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80014ea:	f7ff f885 	bl	80005f8 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4625      	mov	r5, r4
 80014f4:	461c      	mov	r4, r3
 80014f6:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <BMP280_calc_values+0x3a8>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f811 	bl	8000524 <__aeabi_i2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7ff f875 	bl	80005f8 <__aeabi_dmul>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <BMP280_calc_values+0x3ac>)
 800151c:	f7ff f996 	bl	800084c <__aeabi_ddiv>
 8001520:	4603      	mov	r3, r0
 8001522:	460c      	mov	r4, r1
 8001524:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	var2=var2+var1*((double)dig_P5)*2.0;
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <BMP280_calc_values+0x3b0>)
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fff8 	bl	8000524 <__aeabi_i2d>
 8001534:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001538:	f7ff f85e 	bl	80005f8 <__aeabi_dmul>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	f7fe fea0 	bl	800028c <__adddf3>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	461a      	mov	r2, r3
 8001552:	4623      	mov	r3, r4
 8001554:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001558:	f7fe fe98 	bl	800028c <__adddf3>
 800155c:	4603      	mov	r3, r0
 800155e:	460c      	mov	r4, r1
 8001560:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <BMP280_calc_values+0x3b4>)
 800156a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800156e:	f7ff f96d 	bl	800084c <__aeabi_ddiv>
 8001572:	4603      	mov	r3, r0
 8001574:	460c      	mov	r4, r1
 8001576:	4625      	mov	r5, r4
 8001578:	461c      	mov	r4, r3
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <BMP280_calc_values+0x3b8>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffcf 	bl	8000524 <__aeabi_i2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <BMP280_calc_values+0x3bc>)
 800158c:	f7ff f834 	bl	80005f8 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	4629      	mov	r1, r5
 8001598:	f7fe fe78 	bl	800028c <__adddf3>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <BMP280_calc_values+0x3c0>)
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffba 	bl	8000524 <__aeabi_i2d>
 80015b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015b4:	f7ff f820 	bl	80005f8 <__aeabi_dmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4618      	mov	r0, r3
 80015be:	4621      	mov	r1, r4
 80015c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015c4:	f7ff f818 	bl	80005f8 <__aeabi_dmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	4618      	mov	r0, r3
 80015ce:	4621      	mov	r1, r4
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <BMP280_calc_values+0x3c4>)
 80015d6:	f7ff f939 	bl	800084c <__aeabi_ddiv>
 80015da:	4603      	mov	r3, r0
 80015dc:	460c      	mov	r4, r1
 80015de:	4625      	mov	r5, r4
 80015e0:	461c      	mov	r4, r3
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <BMP280_calc_values+0x3c8>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff9b 	bl	8000524 <__aeabi_i2d>
 80015ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015f2:	f7ff f801 	bl	80005f8 <__aeabi_dmul>
 80015f6:	e029      	b.n	800164c <BMP280_calc_values+0x3cc>
 80015f8:	200002d0 	.word	0x200002d0
 80015fc:	20000288 	.word	0x20000288
 8001600:	2000028c 	.word	0x2000028c
 8001604:	20000298 	.word	0x20000298
 8001608:	40d00000 	.word	0x40d00000
 800160c:	20000276 	.word	0x20000276
 8001610:	40900000 	.word	0x40900000
 8001614:	2000027e 	.word	0x2000027e
 8001618:	40c00000 	.word	0x40c00000
 800161c:	200002b4 	.word	0x200002b4
 8001620:	40b40000 	.word	0x40b40000
 8001624:	40ef4000 	.word	0x40ef4000
 8001628:	200002b6 	.word	0x200002b6
 800162c:	40e00000 	.word	0x40e00000
 8001630:	200002a2 	.word	0x200002a2
 8001634:	40100000 	.word	0x40100000
 8001638:	20000292 	.word	0x20000292
 800163c:	40f00000 	.word	0x40f00000
 8001640:	200002aa 	.word	0x200002aa
 8001644:	41200000 	.word	0x41200000
 8001648:	20000290 	.word	0x20000290
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fe1a 	bl	800028c <__adddf3>
 8001658:	4603      	mov	r3, r0
 800165a:	460c      	mov	r4, r1
 800165c:	4618      	mov	r0, r3
 800165e:	4621      	mov	r1, r4
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4bd2      	ldr	r3, [pc, #840]	; (80019b0 <BMP280_calc_values+0x730>)
 8001666:	f7ff f8f1 	bl	800084c <__aeabi_ddiv>
 800166a:	4603      	mov	r3, r0
 800166c:	460c      	mov	r4, r1
 800166e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	var1=(1.0+var1/32768.0)*((double)dig_P1);
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	4bcf      	ldr	r3, [pc, #828]	; (80019b4 <BMP280_calc_values+0x734>)
 8001678:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800167c:	f7ff f8e6 	bl	800084c <__aeabi_ddiv>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4bca      	ldr	r3, [pc, #808]	; (80019b8 <BMP280_calc_values+0x738>)
 800168e:	f7fe fdfd 	bl	800028c <__adddf3>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	4625      	mov	r5, r4
 8001698:	461c      	mov	r4, r3
 800169a:	4bc8      	ldr	r3, [pc, #800]	; (80019bc <BMP280_calc_values+0x73c>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff30 	bl	8000504 <__aeabi_ui2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4620      	mov	r0, r4
 80016aa:	4629      	mov	r1, r5
 80016ac:	f7fe ffa4 	bl	80005f8 <__aeabi_dmul>
 80016b0:	4603      	mov	r3, r0
 80016b2:	460c      	mov	r4, r1
 80016b4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
volatile	double p=1048576.0-(double)pressure_raw;
 80016b8:	4bc1      	ldr	r3, [pc, #772]	; (80019c0 <BMP280_calc_values+0x740>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff31 	bl	8000524 <__aeabi_i2d>
 80016c2:	4603      	mov	r3, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	461a      	mov	r2, r3
 80016c8:	4623      	mov	r3, r4
 80016ca:	f04f 0000 	mov.w	r0, #0
 80016ce:	49bd      	ldr	r1, [pc, #756]	; (80019c4 <BMP280_calc_values+0x744>)
 80016d0:	f7fe fdda 	bl	8000288 <__aeabi_dsub>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p=(p-(var2/4096.0))*6250.0/var1;
 80016dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4bb8      	ldr	r3, [pc, #736]	; (80019c8 <BMP280_calc_values+0x748>)
 80016e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80016ea:	f7ff f8af 	bl	800084c <__aeabi_ddiv>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe fdc7 	bl	8000288 <__aeabi_dsub>
 80016fa:	4603      	mov	r3, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	4618      	mov	r0, r3
 8001700:	4621      	mov	r1, r4
 8001702:	a3a9      	add	r3, pc, #676	; (adr r3, 80019a8 <BMP280_calc_values+0x728>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ff76 	bl	80005f8 <__aeabi_dmul>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001718:	f7ff f898 	bl	800084c <__aeabi_ddiv>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var1=((double)dig_P9)*p*p/2147483648.0;
 8001724:	4ba9      	ldr	r3, [pc, #676]	; (80019cc <BMP280_calc_values+0x74c>)
 8001726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fefa 	bl	8000524 <__aeabi_i2d>
 8001730:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001734:	461a      	mov	r2, r3
 8001736:	4623      	mov	r3, r4
 8001738:	f7fe ff5e 	bl	80005f8 <__aeabi_dmul>
 800173c:	4603      	mov	r3, r0
 800173e:	460c      	mov	r4, r1
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	f7fe ff54 	bl	80005f8 <__aeabi_dmul>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	4618      	mov	r0, r3
 8001756:	4621      	mov	r1, r4
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b9c      	ldr	r3, [pc, #624]	; (80019d0 <BMP280_calc_values+0x750>)
 800175e:	f7ff f875 	bl	800084c <__aeabi_ddiv>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	var2=p*((double)dig_P8)/32768.0;
 800176a:	4b9a      	ldr	r3, [pc, #616]	; (80019d4 <BMP280_calc_values+0x754>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fed7 	bl	8000524 <__aeabi_i2d>
 8001776:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800177a:	461a      	mov	r2, r3
 800177c:	4623      	mov	r3, r4
 800177e:	f7fe ff3b 	bl	80005f8 <__aeabi_dmul>
 8001782:	4603      	mov	r3, r0
 8001784:	460c      	mov	r4, r1
 8001786:	4618      	mov	r0, r3
 8001788:	4621      	mov	r1, r4
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <BMP280_calc_values+0x734>)
 8001790:	f7ff f85c 	bl	800084c <__aeabi_ddiv>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	p=p+(var1+var2+((double)dig_P7))/16.0;
 800179c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017a4:	f7fe fd72 	bl	800028c <__adddf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	4625      	mov	r5, r4
 80017ae:	461c      	mov	r4, r3
 80017b0:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <BMP280_calc_values+0x758>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe feb4 	bl	8000524 <__aeabi_i2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd62 	bl	800028c <__adddf3>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4618      	mov	r0, r3
 80017ce:	4621      	mov	r1, r4
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b81      	ldr	r3, [pc, #516]	; (80019dc <BMP280_calc_values+0x75c>)
 80017d6:	f7ff f839 	bl	800084c <__aeabi_ddiv>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	4618      	mov	r0, r3
 80017e0:	4621      	mov	r1, r4
 80017e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4623      	mov	r3, r4
 80017ea:	f7fe fd4f 	bl	800028c <__adddf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	e9c7 3402 	strd	r3, r4, [r7, #8]

	volatile double h = (((double)t_fine)-76800.0);
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <BMP280_calc_values+0x760>)
 80017fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001800:	f7fe fd42 	bl	8000288 <__aeabi_dsub>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9c7 3400 	strd	r3, r4, [r7]
	h = (humidity_raw-(((double)dig_H4)*64.0+((double)dig_H5) / 16384.0 * h))*(((double)dig_H2)/65536.0*(1.0 + ((double)dig_H6)/67108864.0*h*(1.0+((double)dig_H3)/67108864.0*h)));
 800180c:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <BMP280_calc_values+0x764>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe87 	bl	8000524 <__aeabi_i2d>
 8001816:	4605      	mov	r5, r0
 8001818:	460e      	mov	r6, r1
 800181a:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <BMP280_calc_values+0x768>)
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe7f 	bl	8000524 <__aeabi_i2d>
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b70      	ldr	r3, [pc, #448]	; (80019ec <BMP280_calc_values+0x76c>)
 800182c:	f7fe fee4 	bl	80005f8 <__aeabi_dmul>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	4698      	mov	r8, r3
 8001836:	46a1      	mov	r9, r4
 8001838:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <BMP280_calc_values+0x770>)
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe70 	bl	8000524 <__aeabi_i2d>
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <BMP280_calc_values+0x774>)
 800184a:	f7fe ffff 	bl	800084c <__aeabi_ddiv>
 800184e:	4603      	mov	r3, r0
 8001850:	460c      	mov	r4, r1
 8001852:	4618      	mov	r0, r3
 8001854:	4621      	mov	r1, r4
 8001856:	e9d7 3400 	ldrd	r3, r4, [r7]
 800185a:	461a      	mov	r2, r3
 800185c:	4623      	mov	r3, r4
 800185e:	f7fe fecb 	bl	80005f8 <__aeabi_dmul>
 8001862:	4603      	mov	r3, r0
 8001864:	460c      	mov	r4, r1
 8001866:	461a      	mov	r2, r3
 8001868:	4623      	mov	r3, r4
 800186a:	4640      	mov	r0, r8
 800186c:	4649      	mov	r1, r9
 800186e:	f7fe fd0d 	bl	800028c <__adddf3>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	461a      	mov	r2, r3
 8001878:	4623      	mov	r3, r4
 800187a:	4628      	mov	r0, r5
 800187c:	4631      	mov	r1, r6
 800187e:	f7fe fd03 	bl	8000288 <__aeabi_dsub>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	461d      	mov	r5, r3
 8001888:	4626      	mov	r6, r4
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <BMP280_calc_values+0x778>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe47 	bl	8000524 <__aeabi_i2d>
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b58      	ldr	r3, [pc, #352]	; (80019fc <BMP280_calc_values+0x77c>)
 800189c:	f7fe ffd6 	bl	800084c <__aeabi_ddiv>
 80018a0:	4603      	mov	r3, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	4698      	mov	r8, r3
 80018a6:	46a1      	mov	r9, r4
 80018a8:	4b55      	ldr	r3, [pc, #340]	; (8001a00 <BMP280_calc_values+0x780>)
 80018aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe38 	bl	8000524 <__aeabi_i2d>
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <BMP280_calc_values+0x784>)
 80018ba:	f7fe ffc7 	bl	800084c <__aeabi_ddiv>
 80018be:	4603      	mov	r3, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	4618      	mov	r0, r3
 80018c4:	4621      	mov	r1, r4
 80018c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4623      	mov	r3, r4
 80018ce:	f7fe fe93 	bl	80005f8 <__aeabi_dmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	469a      	mov	sl, r3
 80018d8:	46a3      	mov	fp, r4
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <BMP280_calc_values+0x788>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe10 	bl	8000504 <__aeabi_ui2d>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <BMP280_calc_values+0x784>)
 80018ea:	f7fe ffaf 	bl	800084c <__aeabi_ddiv>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	4618      	mov	r0, r3
 80018f4:	4621      	mov	r1, r4
 80018f6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4623      	mov	r3, r4
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	4618      	mov	r0, r3
 8001908:	4621      	mov	r1, r4
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <BMP280_calc_values+0x738>)
 8001910:	f7fe fcbc 	bl	800028c <__adddf3>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	461a      	mov	r2, r3
 800191a:	4623      	mov	r3, r4
 800191c:	4650      	mov	r0, sl
 800191e:	4659      	mov	r1, fp
 8001920:	f7fe fe6a 	bl	80005f8 <__aeabi_dmul>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <BMP280_calc_values+0x738>)
 8001932:	f7fe fcab 	bl	800028c <__adddf3>
 8001936:	4603      	mov	r3, r0
 8001938:	460c      	mov	r4, r1
 800193a:	461a      	mov	r2, r3
 800193c:	4623      	mov	r3, r4
 800193e:	4640      	mov	r0, r8
 8001940:	4649      	mov	r1, r9
 8001942:	f7fe fe59 	bl	80005f8 <__aeabi_dmul>
 8001946:	4603      	mov	r3, r0
 8001948:	460c      	mov	r4, r1
 800194a:	461a      	mov	r2, r3
 800194c:	4623      	mov	r3, r4
 800194e:	4628      	mov	r0, r5
 8001950:	4631      	mov	r1, r6
 8001952:	f7fe fe51 	bl	80005f8 <__aeabi_dmul>
 8001956:	4603      	mov	r3, r0
 8001958:	460c      	mov	r4, r1
 800195a:	e9c7 3400 	strd	r3, r4, [r7]
	h = h * (1.0-((double)dig_H1)*h/524288.0);
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <BMP280_calc_values+0x78c>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdce 	bl	8000504 <__aeabi_ui2d>
 8001968:	e9d7 3400 	ldrd	r3, r4, [r7]
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	f7fe fe42 	bl	80005f8 <__aeabi_dmul>
 8001974:	4603      	mov	r3, r0
 8001976:	460c      	mov	r4, r1
 8001978:	4618      	mov	r0, r3
 800197a:	4621      	mov	r1, r4
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <BMP280_calc_values+0x730>)
 8001982:	f7fe ff63 	bl	800084c <__aeabi_ddiv>
 8001986:	4603      	mov	r3, r0
 8001988:	460c      	mov	r4, r1
 800198a:	461a      	mov	r2, r3
 800198c:	4623      	mov	r3, r4
 800198e:	f04f 0000 	mov.w	r0, #0
 8001992:	4909      	ldr	r1, [pc, #36]	; (80019b8 <BMP280_calc_values+0x738>)
 8001994:	f7fe fc78 	bl	8000288 <__aeabi_dsub>
 8001998:	4603      	mov	r3, r0
 800199a:	460c      	mov	r4, r1
 800199c:	4618      	mov	r0, r3
 800199e:	4621      	mov	r1, r4
 80019a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a4:	e034      	b.n	8001a10 <BMP280_calc_values+0x790>
 80019a6:	bf00      	nop
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40b86a00 	.word	0x40b86a00
 80019b0:	41200000 	.word	0x41200000
 80019b4:	40e00000 	.word	0x40e00000
 80019b8:	3ff00000 	.word	0x3ff00000
 80019bc:	200002a8 	.word	0x200002a8
 80019c0:	2000028c 	.word	0x2000028c
 80019c4:	41300000 	.word	0x41300000
 80019c8:	40b00000 	.word	0x40b00000
 80019cc:	200002b2 	.word	0x200002b2
 80019d0:	41e00000 	.word	0x41e00000
 80019d4:	200002ac 	.word	0x200002ac
 80019d8:	20000274 	.word	0x20000274
 80019dc:	40300000 	.word	0x40300000
 80019e0:	40f2c000 	.word	0x40f2c000
 80019e4:	20000298 	.word	0x20000298
 80019e8:	2000027c 	.word	0x2000027c
 80019ec:	40500000 	.word	0x40500000
 80019f0:	200002ae 	.word	0x200002ae
 80019f4:	40d00000 	.word	0x40d00000
 80019f8:	200002b8 	.word	0x200002b8
 80019fc:	40f00000 	.word	0x40f00000
 8001a00:	200002a0 	.word	0x200002a0
 8001a04:	41900000 	.word	0x41900000
 8001a08:	200002b0 	.word	0x200002b0
 8001a0c:	20000280 	.word	0x20000280
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	f7fe fdf0 	bl	80005f8 <__aeabi_dmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	e9c7 3400 	strd	r3, r4, [r7]
	temperature=T;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <BMP280_calc_values+0x818>)
 8001a24:	6013      	str	r3, [r2, #0]
	pressure=p;
 8001a26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	f7ff f8db 	bl	8000be8 <__aeabi_d2f>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <BMP280_calc_values+0x81c>)
 8001a36:	601a      	str	r2, [r3, #0]
	relative_humidity=h;
 8001a38:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	4621      	mov	r1, r4
 8001a40:	f7ff f8d2 	bl	8000be8 <__aeabi_d2f>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <BMP280_calc_values+0x820>)
 8001a48:	601a      	str	r2, [r3, #0]
	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <BMP280_calc_values+0x81c>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001aa4 <BMP280_calc_values+0x824>
 8001a54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a58:	eddf 0a13 	vldr	s1, [pc, #76]	; 8001aa8 <BMP280_calc_values+0x828>
 8001a5c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a60:	f008 f938 	bl	8009cd4 <powf>
 8001a64:	eeb0 7a40 	vmov.f32	s14, s0
 8001a68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001a6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a70:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001aac <BMP280_calc_values+0x82c>
 8001a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <BMP280_calc_values+0x830>)
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
	temperatura=temperature;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <BMP280_calc_values+0x818>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <BMP280_calc_values+0x834>)
 8001a84:	6013      	str	r3, [r2, #0]
	RelVlaz=relative_humidity;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <BMP280_calc_values+0x820>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <BMP280_calc_values+0x838>)
 8001a8c:	6013      	str	r3, [r2, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	3754      	adds	r7, #84	; 0x54
 8001a92:	46bd      	mov	sp, r7
 8001a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a98:	20000284 	.word	0x20000284
 8001a9c:	2000029c 	.word	0x2000029c
 8001aa0:	20000278 	.word	0x20000278
 8001aa4:	47c5e680 	.word	0x47c5e680
 8001aa8:	3e42dcae 	.word	0x3e42dcae
 8001aac:	472d2a00 	.word	0x472d2a00
 8001ab0:	200002a4 	.word	0x200002a4
 8001ab4:	2000023c 	.word	0x2000023c
 8001ab8:	20000240 	.word	0x20000240

08001abc <PID_control>:
/*----------------------------------------------------------------------------------------------------------------------
 * Funkcija za PID kontrolu grejaca inkubatora, vraca vrednost greske koja se koristi za prepravku  vrednosti kasnjenja
 * okidanja TRIACA koji pali grejac
 * --------------------------------------------------------------------------------------------------------------------*/
int PID_control(int setpoint, float Kp, float Ki ,float Kd, float stvarna_temperatura )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6178      	str	r0, [r7, #20]
 8001ac4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ac8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001acc:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ad0:	edc7 1a01 	vstr	s3, [r7, #4]
			Time= millis();                //trenutno vreme
 8001ad4:	f001 f876 	bl	8002bc4 <millis>
 8001ad8:	ee07 0a90 	vmov	s15, r0
 8001adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <PID_control+0x11c>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
	        elapsedTime = (double)(Time - timePrev);        //izracunati vreme proslog vremena prethodnog racunanja
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <PID_control+0x11c>)
 8001ae8:	ed93 7a00 	vldr	s14, [r3]
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <PID_control+0x120>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <PID_control+0x124>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]

	        PID_greska = stvarna_temperatura-setpoint  ;                                // greska
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <PID_control+0x128>)
 8001b10:	edc3 7a00 	vstr	s15, [r3]

	        PID_i += PID_greska * elapsedTime;                // integralni deo
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <PID_control+0x128>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <PID_control+0x124>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <PID_control+0x12c>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <PID_control+0x12c>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
	        PID_d = (PID_greska - PID_prethodna_greska)/elapsedTime;   // deo izvoda
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <PID_control+0x128>)
 8001b36:	ed93 7a00 	vldr	s14, [r3]
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <PID_control+0x130>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <PID_control+0x124>)
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <PID_control+0x134>)
 8001b50:	edc3 7a00 	vstr	s15, [r3]
	        if(PID_greska<0)
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <PID_control+0x128>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	d503      	bpl.n	8001b6c <PID_control+0xb0>
	             {PID_i=0;}
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <PID_control+0x12c>)
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
	        PID_vrednost = Kp*PID_greska + Ki*PID_i ;                //PID korekcija
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <PID_control+0x128>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <PID_control+0x12c>)
 8001b7c:	edd3 6a00 	vldr	s13, [r3]
 8001b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b90:	ee17 2a90 	vmov	r2, s15
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <PID_control+0x138>)
 8001b96:	601a      	str	r2, [r3, #0]

	        PID_prethodna_greska = PID_greska;                                //sacuvati trenutnu gresku za sledecu iteraciju
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <PID_control+0x128>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <PID_control+0x130>)
 8001b9e:	6013      	str	r3, [r2, #0]
	        timePrev = Time;                        //sacuvati trenutno vreme za sledecu iteraciju
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <PID_control+0x11c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <PID_control+0x120>)
 8001ba6:	6013      	str	r3, [r2, #0]

	        if(PID_vrednost > 10000)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <PID_control+0x138>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	dd03      	ble.n	8001bbc <PID_control+0x100>
	        	    	{
	        	    	PID_vrednost = 10000; //maksimalna vrednost kontrole u slucaju vremena od 10ms
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <PID_control+0x138>)
 8001bb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bba:	601a      	str	r2, [r3, #0]
	        	    	};
	       if(PID_vrednost <0)
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <PID_control+0x138>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da02      	bge.n	8001bca <PID_control+0x10e>
	        {
	        	PID_vrednost = 0; //maksimalna vrednost kontrole u slucaju vremena od 10ms
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <PID_control+0x138>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	       	};
	    return (volatile unsigned int) PID_vrednost;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <PID_control+0x138>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000022c 	.word	0x2000022c
 8001bdc:	20000228 	.word	0x20000228
 8001be0:	20000230 	.word	0x20000230
 8001be4:	20000220 	.word	0x20000220
 8001be8:	20000214 	.word	0x20000214
 8001bec:	20000224 	.word	0x20000224
 8001bf0:	20000218 	.word	0x20000218
 8001bf4:	2000021c 	.word	0x2000021c

08001bf8 <kontrola_grejac>:
/*-----------------------------------------------------------------------------------------------
 * Konrola snage grejaca preko delay funkcije koja odredjuje okidanje TRIACa
 * ----------------------------------------------------------------------------------------------*/
void kontrola_grejac(int PID_Greska)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(FiringPin_GPIO_Port, FiringPin_Pin, GPIO_PIN_SET);//HALGPIOPINSET
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <kontrola_grejac+0x3c>)
 8001c08:	f001 fddc 	bl	80037c4 <HAL_GPIO_WritePin>
	delay_us(max_firing_delay-PID_Greska);//Ovaj delay kontrolise snagu grejaca
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <kontrola_grejac+0x40>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 ffa7 	bl	8002b68 <delay_us>
	HAL_GPIO_WritePin(FiringPin_GPIO_Port, FiringPin_Pin, GPIO_PIN_RESET); //HALGPIOPINRESET
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <kontrola_grejac+0x3c>)
 8001c22:	f001 fdcf 	bl	80037c4 <HAL_GPIO_WritePin>
	delay_us(100);
 8001c26:	2064      	movs	r0, #100	; 0x64
 8001c28:	f000 ff9e 	bl	8002b68 <delay_us>
	//zero_croosing=0;//false
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	0800a7f0 	.word	0x0800a7f0

08001c3c <getTimeDate_DS3231>:
/*---------------------------------------------------------------------------------
 * Funkcija koja vadi vreme preko i2c interfejsa i upisuje isti u struct time.
 *
 *--------------------------------------------------------------------------------*/
void getTimeDate_DS3231(int DS3231_I2C_address)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af04      	add	r7, sp, #16
 8001c42:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7]={0};
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f8c3 2003 	str.w	r2, [r3, #3]

	HAL_I2C_Mem_Read(&hi2c1,DS3231_I2C_address,0x00,1,get_time,7,1000);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	b299      	uxth	r1, r3
 8001c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2301      	movs	r3, #1
 8001c66:	2200      	movs	r2, #0
 8001c68:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <getTimeDate_DS3231+0xac>)
 8001c6a:	f002 fa53 	bl	8004114 <HAL_I2C_Mem_Read>

	time.seconds=hextodec(get_time[0]);
 8001c6e:	7a3b      	ldrb	r3, [r7, #8]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f83d 	bl	8001cf0 <hextodec>
 8001c76:	4603      	mov	r3, r0
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <getTimeDate_DS3231+0xb0>)
 8001c7c:	701a      	strb	r2, [r3, #0]
	time.minutes=hextodec(get_time[1]);
 8001c7e:	7a7b      	ldrb	r3, [r7, #9]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 f835 	bl	8001cf0 <hextodec>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <getTimeDate_DS3231+0xb0>)
 8001c8c:	705a      	strb	r2, [r3, #1]
	time.hours=hextodec(get_time[2]);
 8001c8e:	7abb      	ldrb	r3, [r7, #10]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f82d 	bl	8001cf0 <hextodec>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <getTimeDate_DS3231+0xb0>)
 8001c9c:	709a      	strb	r2, [r3, #2]
	time.day=hextodec(get_time[3]);
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f825 	bl	8001cf0 <hextodec>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <getTimeDate_DS3231+0xb0>)
 8001cac:	70da      	strb	r2, [r3, #3]
	time.date=hextodec(get_time[4]);
 8001cae:	7b3b      	ldrb	r3, [r7, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f81d 	bl	8001cf0 <hextodec>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <getTimeDate_DS3231+0xb0>)
 8001cbc:	711a      	strb	r2, [r3, #4]
	time.month=hextodec(get_time[5]);
 8001cbe:	7b7b      	ldrb	r3, [r7, #13]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f815 	bl	8001cf0 <hextodec>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <getTimeDate_DS3231+0xb0>)
 8001ccc:	715a      	strb	r2, [r3, #5]
	time.year=hextodec(get_time[6]);
 8001cce:	7bbb      	ldrb	r3, [r7, #14]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f80d 	bl	8001cf0 <hextodec>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <getTimeDate_DS3231+0xb0>)
 8001cdc:	719a      	strb	r2, [r3, #6]
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200002d0 	.word	0x200002d0
 8001cec:	200003e8 	.word	0x200003e8

08001cf0 <hextodec>:
}
/*-----------------------------------------------------------------------------
 * Funkcija koja vrsi konverziju iz hex brojeva u decimalne brojeve
 * ---------------------------------------------------------------------------*/
int hextodec(uint8_t val)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	4413      	add	r3, r2
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <find_I2C_deviceAddress>:
/*-----------------------------------------------------------------------------
 * funkcija koja trazi adresu uredjaja na I2C magistrali i vraca vrednost adrese
 * ---------------------------------------------------------------------------*/
int find_I2C_deviceAddress(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<255;i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	e013      	b.n	8001d58 <find_I2C_deviceAddress+0x38>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1,i,1,10)==HAL_OK)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	b299      	uxth	r1, r3
 8001d34:	230a      	movs	r3, #10
 8001d36:	2201      	movs	r2, #1
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <find_I2C_deviceAddress+0x4c>)
 8001d3a:	f002 fc11 	bl	8004560 <HAL_I2C_IsDeviceReady>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <find_I2C_deviceAddress+0x32>
		{
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d48:	4809      	ldr	r0, [pc, #36]	; (8001d70 <find_I2C_deviceAddress+0x50>)
 8001d4a:	f001 fd54 	bl	80037f6 <HAL_GPIO_TogglePin>
			return i;
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	e007      	b.n	8001d62 <find_I2C_deviceAddress+0x42>
	for(i=0;i<255;i++)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3301      	adds	r3, #1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d1e8      	bne.n	8001d30 <find_I2C_deviceAddress+0x10>
			break;
		}
	}
	return -1;//greska
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002d0 	.word	0x200002d0
 8001d70:	40020c00 	.word	0x40020c00

08001d74 <lcd_send_cmd>:
/*-----------------------------------------------------------------------------
 * funkcija koja salje komandu na LCD kontroler putem i2c BUS-a
 * ---------------------------------------------------------------------------*/
void lcd_send_cmd (char cmd)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);      //4BIT HI
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f023 030f 	bic.w	r3, r3, #15
 8001d84:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0); //4BIT LO
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	f043 030c 	orr.w	r3, r3, #12
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	f043 030c 	orr.w	r3, r3, #12
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001daa:	7bbb      	ldrb	r3, [r7, #14]
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1,LCD_I2C_SLAVE_ADDRESS,(uint8_t *) data_t, 4, 100);
 8001db4:	f107 0208 	add.w	r2, r7, #8
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	217e      	movs	r1, #126	; 0x7e
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <lcd_send_cmd+0x5c>)
 8001dc2:	f001 fe83 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002d0 	.word	0x200002d0

08001dd4 <lcd_send_data>:
/*-----------------------------------------------------------------------------
 * funkcija koja salje podatke na LCD kontroler putem i2c BUS-a
 * ---------------------------------------------------------------------------*/
void lcd_send_data (char data)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f023 030f 	bic.w	r3, r3, #15
 8001de4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  	//en=1, rs=0
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	f043 030d 	orr.w	r3, r3, #13
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  	//en=0, rs=0
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	f043 0309 	orr.w	r3, r3, #9
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  	//en=1, rs=0
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	f043 030d 	orr.w	r3, r3, #13
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  	//en=0, rs=0
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	f043 0309 	orr.w	r3, r3, #9
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_I2C_SLAVE_ADDRESS,(uint8_t *) data_t, 4, 100);
 8001e14:	f107 0208 	add.w	r2, r7, #8
 8001e18:	2364      	movs	r3, #100	; 0x64
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	217e      	movs	r1, #126	; 0x7e
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <lcd_send_data+0x5c>)
 8001e22:	f001 fe53 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002d0 	.word	0x200002d0

08001e34 <lcd_clear>:
/*-----------------------------------------------------------------------------
 * funkcija koja brise sve podatke i CGRAM-a LCD kontroler putem i2c BUS-a
 * ---------------------------------------------------------------------------*/
void lcd_clear (void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ff9b 	bl	8001d74 <lcd_send_cmd>
	/*for (int i=0; i<70; i++)
	{
		lcd_send_data (' ');
	}
	*/
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <lcd_put_cur>:
/*-----------------------------------------------------------------------------
 * funkcija koja setuje poziciju cursora na LCD ekranu
 * ---------------------------------------------------------------------------*/
void lcd_put_cur(int row, int col)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
    switch (row)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <lcd_put_cur+0x16>
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d005      	beq.n	8001e62 <lcd_put_cur+0x20>
 8001e56:	e009      	b.n	8001e6c <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5e:	603b      	str	r3, [r7, #0]
            break;
 8001e60:	e004      	b.n	8001e6c <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e68:	603b      	str	r3, [r7, #0]
            break;
 8001e6a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff7f 	bl	8001d74 <lcd_send_cmd>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <lcd_init>:
/*-----------------------------------------------------------------------------
 * Inicijalizacija samog LCD-a
 * ---------------------------------------------------------------------------*/
void lcd_init (void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
	// 4 BIT inicijalizacija
	HAL_Delay(50);  // cekaj >40ms
 8001e82:	2032      	movs	r0, #50	; 0x32
 8001e84:	f001 f9b8 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001e88:	2030      	movs	r0, #48	; 0x30
 8001e8a:	f7ff ff73 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(5);  // cekaj >4.1ms
 8001e8e:	2005      	movs	r0, #5
 8001e90:	f001 f9b2 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001e94:	2030      	movs	r0, #48	; 0x30
 8001e96:	f7ff ff6d 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(1);  // cekaj  >100us
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f001 f9ac 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ea0:	2030      	movs	r0, #48	; 0x30
 8001ea2:	f7ff ff67 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(10);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f001 f9a6 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mod
 8001eac:	2020      	movs	r0, #32
 8001eae:	f7ff ff61 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(10);
 8001eb2:	200a      	movs	r0, #10
 8001eb4:	f001 f9a0 	bl	80031f8 <HAL_Delay>

  // inicijalizacija displeja
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001eb8:	2028      	movs	r0, #40	; 0x28
 8001eba:	f7ff ff5b 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f001 f99a 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0 display,C=0 cursor, B=0 blink  ---> display OFF, blink OFF, cursor OFF
 8001ec4:	2008      	movs	r0, #8
 8001ec6:	f7ff ff55 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f001 f994 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff ff4f 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f001 f98e 	bl	80031f8 <HAL_Delay>
	HAL_Delay(1);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f001 f98b 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001ee2:	2006      	movs	r0, #6
 8001ee4:	f7ff ff46 	bl	8001d74 <lcd_send_cmd>
	HAL_Delay(1);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f001 f985 	bl	80031f8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor OFF ,blink OFF
 8001eee:	200c      	movs	r0, #12
 8001ef0:	f7ff ff40 	bl	8001d74 <lcd_send_cmd>
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <lcd_send_string>:
/*-----------------------------------------------------------------------------
 * Funkcija koja salje ceo string
 * ---------------------------------------------------------------------------*/
void lcd_send_string (char *str)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001f00:	e006      	b.n	8001f10 <lcd_send_string+0x18>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff62 	bl	8001dd4 <lcd_send_data>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f4      	bne.n	8001f02 <lcd_send_string+0xa>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <show_time>:
	count++;
	}

};
void show_time(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af02      	add	r7, sp, #8
	char * strptr;
	sprintf(lcd_string,"Vreme:%02d:%02d:%02d",time.hours, time.minutes,time.seconds); //string koji ispisuje vreme
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <show_time+0x5c>)
 8001f28:	789b      	ldrb	r3, [r3, #2]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <show_time+0x5c>)
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <show_time+0x5c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4911      	ldr	r1, [pc, #68]	; (8001f80 <show_time+0x60>)
 8001f3c:	4811      	ldr	r0, [pc, #68]	; (8001f84 <show_time+0x64>)
 8001f3e:	f004 ff9b 	bl	8006e78 <siprintf>
	delay_ms(50);
 8001f42:	2032      	movs	r0, #50	; 0x32
 8001f44:	f000 fe28 	bl	8002b98 <delay_ms>
	lcd_put_cur(1,0);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff ff79 	bl	8001e42 <lcd_put_cur>
	delay_ms(50);
 8001f50:	2032      	movs	r0, #50	; 0x32
 8001f52:	f000 fe21 	bl	8002b98 <delay_ms>
	lcd_send_string(lcd_string);
 8001f56:	480b      	ldr	r0, [pc, #44]	; (8001f84 <show_time+0x64>)
 8001f58:	f7ff ffce 	bl	8001ef8 <lcd_send_string>
	strptr=lcd_string;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <show_time+0x64>)
 8001f5e:	607b      	str	r3, [r7, #4]
	while(*(strptr) !='\0')
 8001f60:	e004      	b.n	8001f6c <show_time+0x4c>
	{
	  *(strptr++)=0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f6      	bne.n	8001f62 <show_time+0x42>
	}
};
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200003e8 	.word	0x200003e8
 8001f80:	0800a6f8 	.word	0x0800a6f8
 8001f84:	20000364 	.word	0x20000364

08001f88 <show_date>:
void show_date(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af02      	add	r7, sp, #8
	char * strptr;
	sprintf(lcd_string,"Datum:%02d-%02d-20%02d",time.date, time.month,time.year);	//string koji ispisuje datum
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <show_date+0x5c>)
 8001f90:	791b      	ldrb	r3, [r3, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <show_date+0x5c>)
 8001f96:	795b      	ldrb	r3, [r3, #5]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <show_date+0x5c>)
 8001f9c:	799b      	ldrb	r3, [r3, #6]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4911      	ldr	r1, [pc, #68]	; (8001fe8 <show_date+0x60>)
 8001fa4:	4811      	ldr	r0, [pc, #68]	; (8001fec <show_date+0x64>)
 8001fa6:	f004 ff67 	bl	8006e78 <siprintf>
	delay_ms(50);
 8001faa:	2032      	movs	r0, #50	; 0x32
 8001fac:	f000 fdf4 	bl	8002b98 <delay_ms>
	lcd_put_cur(0,0);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7ff ff45 	bl	8001e42 <lcd_put_cur>
	delay_ms(50);
 8001fb8:	2032      	movs	r0, #50	; 0x32
 8001fba:	f000 fded 	bl	8002b98 <delay_ms>
	lcd_send_string(lcd_string);
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <show_date+0x64>)
 8001fc0:	f7ff ff9a 	bl	8001ef8 <lcd_send_string>
	strptr=lcd_string;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <show_date+0x64>)
 8001fc6:	607b      	str	r3, [r7, #4]
	while(*(strptr) !='\0')
 8001fc8:	e004      	b.n	8001fd4 <show_date+0x4c>
	{
	  *(strptr++)=0;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f6      	bne.n	8001fca <show_date+0x42>
	}
};
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200003e8 	.word	0x200003e8
 8001fe8:	0800a710 	.word	0x0800a710
 8001fec:	20000364 	.word	0x20000364

08001ff0 <show_tempAndHumidity>:
void show_tempAndHumidity(void)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
	char * strptr;
	strptr=lcd_string;
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <show_tempAndHumidity+0xa8>)
 8001ff8:	607b      	str	r3, [r7, #4]
	while(*(strptr) !='\0')
 8001ffa:	e004      	b.n	8002006 <show_tempAndHumidity+0x16>
	{
		*(strptr++)=0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f6      	bne.n	8001ffc <show_tempAndHumidity+0xc>
	}

	delay_ms(30);
 800200e:	201e      	movs	r0, #30
 8002010:	f000 fdc2 	bl	8002b98 <delay_ms>
	lcd_put_cur(0, 0);
 8002014:	2100      	movs	r1, #0
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff ff13 	bl	8001e42 <lcd_put_cur>
	delay_ms(30);
 800201c:	201e      	movs	r0, #30
 800201e:	f000 fdbb 	bl	8002b98 <delay_ms>
	sprintf(lcd_string,"T=%2.1f[degC]",temperatura);
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <show_tempAndHumidity+0xac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa8e 	bl	8000548 <__aeabi_f2d>
 800202c:	4603      	mov	r3, r0
 800202e:	460c      	mov	r4, r1
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	491a      	ldr	r1, [pc, #104]	; (80020a0 <show_tempAndHumidity+0xb0>)
 8002036:	4818      	ldr	r0, [pc, #96]	; (8002098 <show_tempAndHumidity+0xa8>)
 8002038:	f004 ff1e 	bl	8006e78 <siprintf>
	lcd_send_string(lcd_string);
 800203c:	4816      	ldr	r0, [pc, #88]	; (8002098 <show_tempAndHumidity+0xa8>)
 800203e:	f7ff ff5b 	bl	8001ef8 <lcd_send_string>
	strptr=lcd_string;
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <show_tempAndHumidity+0xa8>)
 8002044:	607b      	str	r3, [r7, #4]
	while(*(strptr) !='\0')
 8002046:	e004      	b.n	8002052 <show_tempAndHumidity+0x62>
	{
		*(strptr++)=0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f6      	bne.n	8002048 <show_tempAndHumidity+0x58>
	}
	delay_ms(30);
 800205a:	201e      	movs	r0, #30
 800205c:	f000 fd9c 	bl	8002b98 <delay_ms>
	lcd_put_cur(1, 0);
 8002060:	2100      	movs	r1, #0
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff feed 	bl	8001e42 <lcd_put_cur>
	delay_ms(30);
 8002068:	201e      	movs	r0, #30
 800206a:	f000 fd95 	bl	8002b98 <delay_ms>
	sprintf(lcd_string,"RV=%2.1f[%%]",RelVlaz);
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <show_tempAndHumidity+0xb4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fa68 	bl	8000548 <__aeabi_f2d>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	4909      	ldr	r1, [pc, #36]	; (80020a8 <show_tempAndHumidity+0xb8>)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <show_tempAndHumidity+0xa8>)
 8002084:	f004 fef8 	bl	8006e78 <siprintf>
	lcd_send_string(lcd_string);
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <show_tempAndHumidity+0xa8>)
 800208a:	f7ff ff35 	bl	8001ef8 <lcd_send_string>
};
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bd90      	pop	{r4, r7, pc}
 8002096:	bf00      	nop
 8002098:	20000364 	.word	0x20000364
 800209c:	2000023c 	.word	0x2000023c
 80020a0:	0800a728 	.word	0x0800a728
 80020a4:	20000240 	.word	0x20000240
 80020a8:	0800a738 	.word	0x0800a738

080020ac <start_menu_1>:
	{
		  *(strptr++)=0;
	}

};
void start_menu_1(void){
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
	char * strptr;
		strptr=lcd_string;
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <start_menu_1+0x9c>)
 80020b4:	607b      	str	r3, [r7, #4]
		while(*(strptr) !='\0')
 80020b6:	e004      	b.n	80020c2 <start_menu_1+0x16>
		{
			*(strptr++)=0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
		while(*(strptr) !='\0')
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f6      	bne.n	80020b8 <start_menu_1+0xc>
		}
		lcd_clear();
 80020ca:	f7ff feb3 	bl	8001e34 <lcd_clear>
		delay_ms(50);
 80020ce:	2032      	movs	r0, #50	; 0x32
 80020d0:	f000 fd62 	bl	8002b98 <delay_ms>
		lcd_put_cur(0, 0);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff feb3 	bl	8001e42 <lcd_put_cur>
		strcpy(lcd_string,"*Inkubator v1.0*");
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <start_menu_1+0x9c>)
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <start_menu_1+0xa0>)
 80020e0:	4615      	mov	r5, r2
 80020e2:	461c      	mov	r4, r3
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	6028      	str	r0, [r5, #0]
 80020e8:	6069      	str	r1, [r5, #4]
 80020ea:	60aa      	str	r2, [r5, #8]
 80020ec:	60eb      	str	r3, [r5, #12]
 80020ee:	7823      	ldrb	r3, [r4, #0]
 80020f0:	742b      	strb	r3, [r5, #16]
		lcd_send_string(lcd_string);
 80020f2:	4815      	ldr	r0, [pc, #84]	; (8002148 <start_menu_1+0x9c>)
 80020f4:	f7ff ff00 	bl	8001ef8 <lcd_send_string>
		delay_ms(50);
 80020f8:	2032      	movs	r0, #50	; 0x32
 80020fa:	f000 fd4d 	bl	8002b98 <delay_ms>
		strptr=lcd_string;
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <start_menu_1+0x9c>)
 8002100:	607b      	str	r3, [r7, #4]
		while(*(strptr) !='\0')
 8002102:	e004      	b.n	800210e <start_menu_1+0x62>
		{
			  *(strptr++)=0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
		while(*(strptr) !='\0')
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f6      	bne.n	8002104 <start_menu_1+0x58>
		}
		lcd_put_cur(1, 0);
 8002116:	2100      	movs	r1, #0
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff fe92 	bl	8001e42 <lcd_put_cur>
		strcpy(lcd_string,"*Miroslav M*");
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <start_menu_1+0x9c>)
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <start_menu_1+0xa4>)
 8002122:	4614      	mov	r4, r2
 8002124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002126:	6020      	str	r0, [r4, #0]
 8002128:	6061      	str	r1, [r4, #4]
 800212a:	60a2      	str	r2, [r4, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	7323      	strb	r3, [r4, #12]
		lcd_send_string(lcd_string);
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <start_menu_1+0x9c>)
 8002132:	f7ff fee1 	bl	8001ef8 <lcd_send_string>
		delay_ms(50);
 8002136:	2032      	movs	r0, #50	; 0x32
 8002138:	f000 fd2e 	bl	8002b98 <delay_ms>
		strptr=lcd_string;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <start_menu_1+0x9c>)
 800213e:	607b      	str	r3, [r7, #4]
};
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bdb0      	pop	{r4, r5, r7, pc}
 8002148:	20000364 	.word	0x20000364
 800214c:	0800a758 	.word	0x0800a758
 8002150:	0800a76c 	.word	0x0800a76c

08002154 <start_menu_2>:
void start_menu_2(void){
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
	char * strptr;
		strptr=lcd_string;
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <start_menu_2+0x74>)
 800215c:	607b      	str	r3, [r7, #4]
		while(*(strptr) !='\0')
 800215e:	e004      	b.n	800216a <start_menu_2+0x16>
		{
			*(strptr++)=0;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
		while(*(strptr) !='\0')
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f6      	bne.n	8002160 <start_menu_2+0xc>
		}
		lcd_clear();
 8002172:	f7ff fe5f 	bl	8001e34 <lcd_clear>
		delay_ms(50);
 8002176:	2032      	movs	r0, #50	; 0x32
 8002178:	f000 fd0e 	bl	8002b98 <delay_ms>
		lcd_put_cur(0, 0);
 800217c:	2100      	movs	r1, #0
 800217e:	2000      	movs	r0, #0
 8002180:	f7ff fe5f 	bl	8001e42 <lcd_put_cur>
		strcpy(lcd_string,"*Tel:0691311063*");
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <start_menu_2+0x74>)
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <start_menu_2+0x78>)
 8002188:	4615      	mov	r5, r2
 800218a:	461c      	mov	r4, r3
 800218c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218e:	6028      	str	r0, [r5, #0]
 8002190:	6069      	str	r1, [r5, #4]
 8002192:	60aa      	str	r2, [r5, #8]
 8002194:	60eb      	str	r3, [r5, #12]
 8002196:	7823      	ldrb	r3, [r4, #0]
 8002198:	742b      	strb	r3, [r5, #16]
		lcd_send_string(lcd_string);
 800219a:	480b      	ldr	r0, [pc, #44]	; (80021c8 <start_menu_2+0x74>)
 800219c:	f7ff feac 	bl	8001ef8 <lcd_send_string>
		delay_ms(50);
 80021a0:	2032      	movs	r0, #50	; 0x32
 80021a2:	f000 fcf9 	bl	8002b98 <delay_ms>
		strptr=lcd_string;
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <start_menu_2+0x74>)
 80021a8:	607b      	str	r3, [r7, #4]
		while(*(strptr) !='\0')
 80021aa:	e004      	b.n	80021b6 <start_menu_2+0x62>
		{
			  *(strptr++)=0;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
		while(*(strptr) !='\0')
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f6      	bne.n	80021ac <start_menu_2+0x58>
		}
};
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000364 	.word	0x20000364
 80021cc:	0800a77c 	.word	0x0800a77c

080021d0 <start_menu_3>:
void start_menu_3(void){
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
	char * strptr;
		strptr=lcd_string;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <start_menu_3+0x9c>)
 80021d8:	607b      	str	r3, [r7, #4]
		while(*(strptr) !='\0')
 80021da:	e004      	b.n	80021e6 <start_menu_3+0x16>
		{
			*(strptr++)=0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
		while(*(strptr) !='\0')
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f6      	bne.n	80021dc <start_menu_3+0xc>
		}
		lcd_clear();
 80021ee:	f7ff fe21 	bl	8001e34 <lcd_clear>
		delay_ms(50);
 80021f2:	2032      	movs	r0, #50	; 0x32
 80021f4:	f000 fcd0 	bl	8002b98 <delay_ms>
		lcd_put_cur(0, 0);
 80021f8:	2100      	movs	r1, #0
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff fe21 	bl	8001e42 <lcd_put_cur>
		strcpy(lcd_string,"1.Start Inkubacij");
 8002200:	4a1a      	ldr	r2, [pc, #104]	; (800226c <start_menu_3+0x9c>)
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <start_menu_3+0xa0>)
 8002204:	4615      	mov	r5, r2
 8002206:	461c      	mov	r4, r3
 8002208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220a:	6028      	str	r0, [r5, #0]
 800220c:	6069      	str	r1, [r5, #4]
 800220e:	60aa      	str	r2, [r5, #8]
 8002210:	60eb      	str	r3, [r5, #12]
 8002212:	8823      	ldrh	r3, [r4, #0]
 8002214:	822b      	strh	r3, [r5, #16]
		lcd_send_string(lcd_string);
 8002216:	4815      	ldr	r0, [pc, #84]	; (800226c <start_menu_3+0x9c>)
 8002218:	f7ff fe6e 	bl	8001ef8 <lcd_send_string>
		delay_ms(50);
 800221c:	2032      	movs	r0, #50	; 0x32
 800221e:	f000 fcbb 	bl	8002b98 <delay_ms>
		strptr=lcd_string;
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <start_menu_3+0x9c>)
 8002224:	607b      	str	r3, [r7, #4]
		while(*(strptr) !='\0')
 8002226:	e004      	b.n	8002232 <start_menu_3+0x62>
		{
			  *(strptr++)=0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
		while(*(strptr) !='\0')
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f6      	bne.n	8002228 <start_menu_3+0x58>
		}
		lcd_put_cur(1, 0);
 800223a:	2100      	movs	r1, #0
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff fe00 	bl	8001e42 <lcd_put_cur>
		strcpy(lcd_string,"2.Prikaz Temp");
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <start_menu_3+0x9c>)
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <start_menu_3+0xa4>)
 8002246:	4614      	mov	r4, r2
 8002248:	cb07      	ldmia	r3!, {r0, r1, r2}
 800224a:	6020      	str	r0, [r4, #0]
 800224c:	6061      	str	r1, [r4, #4]
 800224e:	60a2      	str	r2, [r4, #8]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	81a3      	strh	r3, [r4, #12]
		lcd_send_string(lcd_string);
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <start_menu_3+0x9c>)
 8002256:	f7ff fe4f 	bl	8001ef8 <lcd_send_string>
		delay_ms(50);
 800225a:	2032      	movs	r0, #50	; 0x32
 800225c:	f000 fc9c 	bl	8002b98 <delay_ms>
		strptr=lcd_string;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <start_menu_3+0x9c>)
 8002262:	607b      	str	r3, [r7, #4]
};
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bdb0      	pop	{r4, r5, r7, pc}
 800226c:	20000364 	.word	0x20000364
 8002270:	0800a790 	.word	0x0800a790
 8002274:	0800a7a4 	.word	0x0800a7a4

08002278 <incub_menu_1>:
void incub_menu_1(void)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
	char * strptr;
	strptr=lcd_string;
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <incub_menu_1+0x98>)
 8002280:	607b      	str	r3, [r7, #4]
	while(*(strptr) !='\0')
 8002282:	e004      	b.n	800228e <incub_menu_1+0x16>
	{
		*(strptr++)=0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f6      	bne.n	8002284 <incub_menu_1+0xc>
	}
	lcd_clear();
 8002296:	f7ff fdcd 	bl	8001e34 <lcd_clear>
	delay_ms(50);
 800229a:	2032      	movs	r0, #50	; 0x32
 800229c:	f000 fc7c 	bl	8002b98 <delay_ms>
	lcd_put_cur(0, 0);
 80022a0:	2100      	movs	r1, #0
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff fdcd 	bl	8001e42 <lcd_put_cur>
	strcpy(lcd_string,"*Inkubacija*");
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <incub_menu_1+0x98>)
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <incub_menu_1+0x9c>)
 80022ac:	4614      	mov	r4, r2
 80022ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022b0:	6020      	str	r0, [r4, #0]
 80022b2:	6061      	str	r1, [r4, #4]
 80022b4:	60a2      	str	r2, [r4, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	7323      	strb	r3, [r4, #12]
	lcd_send_string(lcd_string);
 80022ba:	4815      	ldr	r0, [pc, #84]	; (8002310 <incub_menu_1+0x98>)
 80022bc:	f7ff fe1c 	bl	8001ef8 <lcd_send_string>
	delay_ms(50);
 80022c0:	2032      	movs	r0, #50	; 0x32
 80022c2:	f000 fc69 	bl	8002b98 <delay_ms>
	strptr=lcd_string;
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <incub_menu_1+0x98>)
 80022c8:	607b      	str	r3, [r7, #4]
	while(*(strptr) !='\0')
 80022ca:	e004      	b.n	80022d6 <incub_menu_1+0x5e>
	{
	  *(strptr++)=0;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f6      	bne.n	80022cc <incub_menu_1+0x54>
	}
	lcd_put_cur(1, 0);
 80022de:	2100      	movs	r1, #0
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff fdae 	bl	8001e42 <lcd_put_cur>
	strcpy(lcd_string,"*Zapoceta*");
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <incub_menu_1+0x98>)
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <incub_menu_1+0xa0>)
 80022ea:	cb03      	ldmia	r3!, {r0, r1}
 80022ec:	6010      	str	r0, [r2, #0]
 80022ee:	6051      	str	r1, [r2, #4]
 80022f0:	8819      	ldrh	r1, [r3, #0]
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	8111      	strh	r1, [r2, #8]
 80022f6:	7293      	strb	r3, [r2, #10]
	lcd_send_string(lcd_string);
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <incub_menu_1+0x98>)
 80022fa:	f7ff fdfd 	bl	8001ef8 <lcd_send_string>
	delay_ms(50);
 80022fe:	2032      	movs	r0, #50	; 0x32
 8002300:	f000 fc4a 	bl	8002b98 <delay_ms>
	strptr=lcd_string;
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <incub_menu_1+0x98>)
 8002306:	607b      	str	r3, [r7, #4]
};
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}
 8002310:	20000364 	.word	0x20000364
 8002314:	0800a7b4 	.word	0x0800a7b4
 8002318:	0800a7c4 	.word	0x0800a7c4

0800231c <incub_menu_3>:
void incub_menu_3(uint8_t days, uint8_t hours)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	460a      	mov	r2, r1
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	4613      	mov	r3, r2
 800232a:	71bb      	strb	r3, [r7, #6]
	char * strptr;
	strptr=lcd_string;
 800232c:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <incub_menu_3+0xfc>)
 800232e:	60fb      	str	r3, [r7, #12]
	while(*(strptr) !='\0')
 8002330:	e004      	b.n	800233c <incub_menu_3+0x20>
	{
		*(strptr++)=0;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	60fa      	str	r2, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f6      	bne.n	8002332 <incub_menu_3+0x16>
	}
	lcd_clear();
 8002344:	f7ff fd76 	bl	8001e34 <lcd_clear>
	delay_ms(50);
 8002348:	2032      	movs	r0, #50	; 0x32
 800234a:	f000 fc25 	bl	8002b98 <delay_ms>
	lcd_put_cur(0, 0);
 800234e:	2100      	movs	r1, #0
 8002350:	2000      	movs	r0, #0
 8002352:	f7ff fd76 	bl	8001e42 <lcd_put_cur>
	strcpy(lcd_string,"Vreme do kraja");
 8002356:	4a30      	ldr	r2, [pc, #192]	; (8002418 <incub_menu_3+0xfc>)
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <incub_menu_3+0x100>)
 800235a:	4614      	mov	r4, r2
 800235c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800235e:	6020      	str	r0, [r4, #0]
 8002360:	6061      	str	r1, [r4, #4]
 8002362:	60a2      	str	r2, [r4, #8]
 8002364:	881a      	ldrh	r2, [r3, #0]
 8002366:	789b      	ldrb	r3, [r3, #2]
 8002368:	81a2      	strh	r2, [r4, #12]
 800236a:	73a3      	strb	r3, [r4, #14]
	lcd_send_string(lcd_string);
 800236c:	482a      	ldr	r0, [pc, #168]	; (8002418 <incub_menu_3+0xfc>)
 800236e:	f7ff fdc3 	bl	8001ef8 <lcd_send_string>
	delay_ms(50);
 8002372:	2032      	movs	r0, #50	; 0x32
 8002374:	f000 fc10 	bl	8002b98 <delay_ms>
	strptr=lcd_string;
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <incub_menu_3+0xfc>)
 800237a:	60fb      	str	r3, [r7, #12]
	while(*(strptr) !='\0')
 800237c:	e004      	b.n	8002388 <incub_menu_3+0x6c>
	{
	  *(strptr++)=0;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60fa      	str	r2, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	while(*(strptr) !='\0')
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f6      	bne.n	800237e <incub_menu_3+0x62>
	}
	lcd_put_cur(1, 0);
 8002390:	2100      	movs	r1, #0
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff fd55 	bl	8001e42 <lcd_put_cur>
	//remaining days display
	itoa(days,lcd_string,10);
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	220a      	movs	r2, #10
 800239c:	491e      	ldr	r1, [pc, #120]	; (8002418 <incub_menu_3+0xfc>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 ff1c 	bl	80061dc <itoa>
	strptr=lcd_string;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <incub_menu_3+0xfc>)
 80023a6:	60fb      	str	r3, [r7, #12]
	while(*(strptr) !='\0')
 80023a8:	e002      	b.n	80023b0 <incub_menu_3+0x94>
	{
		strptr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3301      	adds	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
	while(*(strptr) !='\0')
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f8      	bne.n	80023aa <incub_menu_3+0x8e>
	}
	strcpy(strptr," Dana ");
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <incub_menu_3+0x104>)
 80023bc:	6810      	ldr	r0, [r2, #0]
 80023be:	6018      	str	r0, [r3, #0]
 80023c0:	8891      	ldrh	r1, [r2, #4]
 80023c2:	7992      	ldrb	r2, [r2, #6]
 80023c4:	8099      	strh	r1, [r3, #4]
 80023c6:	719a      	strb	r2, [r3, #6]
	while(*(strptr) !='\0')
 80023c8:	e002      	b.n	80023d0 <incub_menu_3+0xb4>
	{
		strptr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
	while(*(strptr) !='\0')
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f8      	bne.n	80023ca <incub_menu_3+0xae>
	}
	itoa(hours,strptr,10);
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	220a      	movs	r2, #10
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fefc 	bl	80061dc <itoa>
	while(*(strptr) !='\0')
 80023e4:	e002      	b.n	80023ec <incub_menu_3+0xd0>
	{
		strptr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3301      	adds	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
	while(*(strptr) !='\0')
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f8      	bne.n	80023e6 <incub_menu_3+0xca>
	}
	strcpy(strptr," Sati");
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <incub_menu_3+0x108>)
 80023f8:	6810      	ldr	r0, [r2, #0]
 80023fa:	6018      	str	r0, [r3, #0]
 80023fc:	8892      	ldrh	r2, [r2, #4]
 80023fe:	809a      	strh	r2, [r3, #4]
	lcd_send_string(lcd_string);
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <incub_menu_3+0xfc>)
 8002402:	f7ff fd79 	bl	8001ef8 <lcd_send_string>
	delay_ms(50);
 8002406:	2032      	movs	r0, #50	; 0x32
 8002408:	f000 fbc6 	bl	8002b98 <delay_ms>
	strptr=lcd_string;
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <incub_menu_3+0xfc>)
 800240e:	60fb      	str	r3, [r7, #12]
};
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	20000364 	.word	0x20000364
 800241c:	0800a7d0 	.word	0x0800a7d0
 8002420:	0800a7e0 	.word	0x0800a7e0
 8002424:	0800a7e8 	.word	0x0800a7e8

08002428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0

	uint8_t startDay,startMonth; 										//dan i mesec pocetka procesa inkubacije
	uint8_t currentDay,currentMonth,currentHour,prevousHour,previousDay;//trenutni dan i mesec u toku inkubacije
 	uint8_t remainingDays,remainingHours,currentDayCnt;

	bool incubationStarted=false;
 800242e:	2300      	movs	r3, #0
 8002430:	727b      	strb	r3, [r7, #9]
	bool incubationFinished=false;
 8002432:	2300      	movs	r3, #0
 8002434:	723b      	strb	r3, [r7, #8]
	static bool hourSts=true;
	static bool daySts=true;
	int adrFound=0;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800243a:	f000 fe6b 	bl	8003114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800243e:	f000 f915 	bl	800266c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002442:	f000 fa7b 	bl	800293c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002446:	f000 f97b 	bl	8002740 <MX_I2C1_Init>
  MX_SPI1_Init();
 800244a:	f000 f9a7 	bl	800279c <MX_SPI1_Init>
  MX_TIM2_Init();
 800244e:	f000 f9db 	bl	8002808 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002452:	f000 fa25 	bl	80028a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8002456:	4875      	ldr	r0, [pc, #468]	; (800262c <main+0x204>)
 8002458:	f003 fa9f 	bl	800599a <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim5);
 800245c:	4874      	ldr	r0, [pc, #464]	; (8002630 <main+0x208>)
 800245e:	f003 fa9c 	bl	800599a <HAL_TIM_Base_Start_IT>


adrFound=find_I2C_deviceAddress();
 8002462:	f7ff fc5d 	bl	8001d20 <find_I2C_deviceAddress>
 8002466:	6078      	str	r0, [r7, #4]
lcd_init ();
 8002468:	f7ff fd09 	bl	8001e7e <lcd_init>
BMP280_init(0x57,0x48,0x05);// osrs_t 010 x2, osrs_p 16 101, mode normal 11 // standby time 500ms 100, filter 16 100, SPI DIS 0
 800246c:	2205      	movs	r2, #5
 800246e:	2148      	movs	r1, #72	; 0x48
 8002470:	2057      	movs	r0, #87	; 0x57
 8002472:	f7fe fee1 	bl	8001238 <BMP280_init>
BMP280_calc_values();
 8002476:	f7fe ff03 	bl	8001280 <BMP280_calc_values>
lcd_clear();
 800247a:	f7ff fcdb 	bl	8001e34 <lcd_clear>
getTimeDate_DS3231(DS3231_ADDRESS_I2C);	//vadi trenutno vreme
 800247e:	20d0      	movs	r0, #208	; 0xd0
 8002480:	f7ff fbdc 	bl	8001c3c <getTimeDate_DS3231>
delay_ms(50);
 8002484:	2032      	movs	r0, #50	; 0x32
 8002486:	f000 fb87 	bl	8002b98 <delay_ms>
start_menu_1();
 800248a:	f7ff fe0f 	bl	80020ac <start_menu_1>
delay_ms(2000);
 800248e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002492:	f000 fb81 	bl	8002b98 <delay_ms>
start_menu_2();
 8002496:	f7ff fe5d 	bl	8002154 <start_menu_2>
delay_ms(2000);
 800249a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800249e:	f000 fb7b 	bl	8002b98 <delay_ms>
show_date();
 80024a2:	f7ff fd71 	bl	8001f88 <show_date>
delay_ms(50);
 80024a6:	2032      	movs	r0, #50	; 0x32
 80024a8:	f000 fb76 	bl	8002b98 <delay_ms>
show_time();
 80024ac:	f7ff fd38 	bl	8001f20 <show_time>
delay_ms(2000);
 80024b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024b4:	f000 fb70 	bl	8002b98 <delay_ms>
start_menu_3();
 80024b8:	f7ff fe8a 	bl	80021d0 <start_menu_3>
//glcd_test_circles();
HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//Startuje NVIC interrupta za zero crossing
 80024bc:	2028      	movs	r0, #40	; 0x28
 80024be:	f000 ffb4 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //menu 1 je izabran
	  if(true==greenButtonPressedStatDeb)
 80024c2:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <main+0x20c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00f      	beq.n	80024ec <main+0xc4>
	  	  {
		  	  if(false==incubationStarted)
 80024cc:	7a7b      	ldrb	r3, [r7, #9]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <main+0xc4>
		  	  {
		  	  incubationStarted=true;
 80024d8:	2301      	movs	r3, #1
 80024da:	727b      	strb	r3, [r7, #9]
		  	  incub_menu_1();
 80024dc:	f7ff fecc 	bl	8002278 <incub_menu_1>
		  	  delay_ms(2000);
 80024e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024e4:	f000 fb58 	bl	8002b98 <delay_ms>
		  	  show_tempAndHumidity();
 80024e8:	f7ff fd82 	bl	8001ff0 <show_tempAndHumidity>
	  	  }
	  	  else
	  	  {
	  		  //do nothing
	  	  }
	  BMP280_calc_values();
 80024ec:	f7fe fec8 	bl	8001280 <BMP280_calc_values>
 	  //delay_ms(500);
 	  getTimeDate_DS3231(DS3231_ADDRESS_I2C);	//vadi trenutno vreme
 80024f0:	20d0      	movs	r0, #208	; 0xd0
 80024f2:	f7ff fba3 	bl	8001c3c <getTimeDate_DS3231>

	  static float StvarnaTemperatura=0.0;
	  static float RelativnaVlaznost=0.0;


	  StvarnaTemperatura=temperature;
 80024f6:	4b50      	ldr	r3, [pc, #320]	; (8002638 <main+0x210>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a50      	ldr	r2, [pc, #320]	; (800263c <main+0x214>)
 80024fc:	6013      	str	r3, [r2, #0]
	 //DODAJ FILTER ZA UPROSECAVANJE VREDNOSTI VLAZNOSTI VAZDUHA//
	  RelativnaVlaznost=relative_humidity;
 80024fe:	4b50      	ldr	r3, [pc, #320]	; (8002640 <main+0x218>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <main+0x21c>)
 8002504:	6013      	str	r3, [r2, #0]
	 //incubationStarted=true;



	  static uint8_t counter=0;
	  if(true==incubationStarted)
 8002506:	7a7b      	ldrb	r3, [r7, #9]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d07c      	beq.n	8002606 <main+0x1de>
	 {
		  //vadi vreme pocetka inkubacije
		  if(0>=counter)
 800250c:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <main+0x220>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <main+0xf8>
		  {
			  startDay=time.date;
 8002514:	4b4d      	ldr	r3, [pc, #308]	; (800264c <main+0x224>)
 8002516:	791b      	ldrb	r3, [r3, #4]
 8002518:	70fb      	strb	r3, [r7, #3]
			  startMonth=time.month;
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <main+0x224>)
 800251c:	795b      	ldrb	r3, [r3, #5]
 800251e:	73fb      	strb	r3, [r7, #15]
		  }
		  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//Startuje NVIC interrupta za zero crossing
 8002520:	2028      	movs	r0, #40	; 0x28
 8002522:	f000 ff82 	bl	800342a <HAL_NVIC_EnableIRQ>
		  PidKorekcija=PID_control(SETPOINT_TEMP, Kp,Ki,Kd,temperature);
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <main+0x228>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	4b49      	ldr	r3, [pc, #292]	; (8002654 <main+0x22c>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <main+0x230>)
 8002534:	edd3 6a00 	vldr	s13, [r3]
 8002538:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <main+0x210>)
 800253a:	ed93 6a00 	vldr	s12, [r3]
 800253e:	eef0 1a46 	vmov.f32	s3, s12
 8002542:	eeb0 1a66 	vmov.f32	s2, s13
 8002546:	eef0 0a47 	vmov.f32	s1, s14
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	2027      	movs	r0, #39	; 0x27
 8002550:	f7ff fab4 	bl	8001abc <PID_control>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b40      	ldr	r3, [pc, #256]	; (800265c <main+0x234>)
 800255a:	601a      	str	r2, [r3, #0]
		  if(0==PidKorekcija)
 800255c:	4b3f      	ldr	r3, [pc, #252]	; (800265c <main+0x234>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <main+0x14a>
		  {
			  HAL_GPIO_WritePin(FanPin_GPIO_Port, FanPin_Pin, GPIO_PIN_SET);//ukljuci ventilator
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800256a:	483d      	ldr	r0, [pc, #244]	; (8002660 <main+0x238>)
 800256c:	f001 f92a 	bl	80037c4 <HAL_GPIO_WritePin>
 8002570:	e005      	b.n	800257e <main+0x156>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(FanPin_GPIO_Port, FanPin_Pin, GPIO_PIN_RESET);//iskljuci ventilator
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002578:	4839      	ldr	r0, [pc, #228]	; (8002660 <main+0x238>)
 800257a:	f001 f923 	bl	80037c4 <HAL_GPIO_WritePin>
		  }
		  counter++;
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <main+0x220>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <main+0x220>)
 8002588:	701a      	strb	r2, [r3, #0]
		  if(255==counter)
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <main+0x220>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2bff      	cmp	r3, #255	; 0xff
 8002590:	d102      	bne.n	8002598 <main+0x170>
		  {
			  counter=1; //counter reset kad overflowuje
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <main+0x220>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
		  }
		  show_tempAndHumidity();
 8002598:	f7ff fd2a 	bl	8001ff0 <show_tempAndHumidity>

		  if(true==daySts)
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <main+0x23c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <main+0x18c>
		  {
			  previousDay=currentDay;
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	733b      	strb	r3, [r7, #12]
			  daySts=false;
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <main+0x23c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
			  currentDayCnt=0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	72bb      	strb	r3, [r7, #10]
 80025b2:	e008      	b.n	80025c6 <main+0x19e>

		  }
		  else if(previousDay != currentDay)
 80025b4:	7b3a      	ldrb	r2, [r7, #12]
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d004      	beq.n	80025c6 <main+0x19e>
		  {
			  currentDayCnt++;
 80025bc:	7abb      	ldrb	r3, [r7, #10]
 80025be:	3301      	adds	r3, #1
 80025c0:	72bb      	strb	r3, [r7, #10]
			  previousDay=currentDay;
 80025c2:	7bbb      	ldrb	r3, [r7, #14]
 80025c4:	733b      	strb	r3, [r7, #12]
		  }
		  //days remaining
		  if(true==redButtonPressedStatDeb)
 80025c6:	4b28      	ldr	r3, [pc, #160]	; (8002668 <main+0x240>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d022      	beq.n	8002616 <main+0x1ee>
		  {
			  if(currentMonth==startMonth)
 80025d0:	7b7a      	ldrb	r2, [r7, #13]
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d10a      	bne.n	80025ee <main+0x1c6>
			  {
			  remainingDays=25-currentDayCnt;
 80025d8:	7abb      	ldrb	r3, [r7, #10]
 80025da:	f1c3 0319 	rsb	r3, r3, #25
 80025de:	72fb      	strb	r3, [r7, #11]
			  	  if(0==remainingDays)
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <main+0x1c6>
			  	  {
			  		currentDayCnt=0; //reset days counter
 80025e6:	2300      	movs	r3, #0
 80025e8:	72bb      	strb	r3, [r7, #10]
			  		incubationFinished=true; //zavrsena inkubacija
 80025ea:	2301      	movs	r3, #1
 80025ec:	723b      	strb	r3, [r7, #8]
			  	  }
			  }
			  incub_menu_3(remainingDays, 1);
 80025ee:	7afb      	ldrb	r3, [r7, #11]
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fe92 	bl	800231c <incub_menu_3>
			  delay_ms(2000);
 80025f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025fc:	f000 facc 	bl	8002b98 <delay_ms>
			  lcd_clear();
 8002600:	f7ff fc18 	bl	8001e34 <lcd_clear>
 8002604:	e007      	b.n	8002616 <main+0x1ee>
		  }
	 }
	  else if(true==incubationFinished)
 8002606:	7a3b      	ldrb	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <main+0x1ee>
	  {
		  counter=0; 						//vraca cnt na 0 da uzme dan kad se opet startuje inkubacija
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <main+0x220>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
		  incubationStarted=false;		   //stavlja status incubationStarted u false, jer nije inkubacija aktivna
 8002612:	2300      	movs	r3, #0
 8002614:	727b      	strb	r3, [r7, #9]
	  }
	  	  currentDay=time.date;
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <main+0x224>)
 8002618:	791b      	ldrb	r3, [r3, #4]
 800261a:	73bb      	strb	r3, [r7, #14]
	  	  currentMonth=time.month;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <main+0x224>)
 800261e:	795b      	ldrb	r3, [r3, #5]
 8002620:	737b      	strb	r3, [r7, #13]
	  	  currentHour=time.hours;
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <main+0x224>)
 8002624:	789b      	ldrb	r3, [r3, #2]
 8002626:	70bb      	strb	r3, [r7, #2]
  {
 8002628:	e74b      	b.n	80024c2 <main+0x9a>
 800262a:	bf00      	nop
 800262c:	20000448 	.word	0x20000448
 8002630:	20000324 	.word	0x20000324
 8002634:	20000252 	.word	0x20000252
 8002638:	20000284 	.word	0x20000284
 800263c:	20000254 	.word	0x20000254
 8002640:	20000278 	.word	0x20000278
 8002644:	20000258 	.word	0x20000258
 8002648:	2000025c 	.word	0x2000025c
 800264c:	200003e8 	.word	0x200003e8
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004
 8002658:	20000008 	.word	0x20000008
 800265c:	20000238 	.word	0x20000238
 8002660:	40020400 	.word	0x40020400
 8002664:	2000000c 	.word	0x2000000c
 8002668:	20000251 	.word	0x20000251

0800266c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b094      	sub	sp, #80	; 0x50
 8002670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	2230      	movs	r2, #48	; 0x30
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f003 fdb0 	bl	80061e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <SystemClock_Config+0xcc>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <SystemClock_Config+0xcc>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <SystemClock_Config+0xcc>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <SystemClock_Config+0xd0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a21      	ldr	r2, [pc, #132]	; (800273c <SystemClock_Config+0xd0>)
 80026b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <SystemClock_Config+0xd0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d2:	2302      	movs	r3, #2
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026dc:	2304      	movs	r3, #4
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80026e0:	233c      	movs	r3, #60	; 0x3c
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e4:	2302      	movs	r3, #2
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026e8:	2307      	movs	r3, #7
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fc75 	bl	8004fe0 <HAL_RCC_OscConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026fc:	f000 fa84 	bl	8002c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002700:	230f      	movs	r3, #15
 8002702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002704:	2302      	movs	r3, #2
 8002706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2101      	movs	r1, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fece 	bl	80054c0 <HAL_RCC_ClockConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800272a:	f000 fa6d 	bl	8002c08 <Error_Handler>
  }
}
 800272e:	bf00      	nop
 8002730:	3750      	adds	r7, #80	; 0x50
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40007000 	.word	0x40007000

08002740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <MX_I2C1_Init+0x50>)
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <MX_I2C1_Init+0x54>)
 8002748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_I2C1_Init+0x50>)
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <MX_I2C1_Init+0x58>)
 800274e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_I2C1_Init+0x50>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_I2C1_Init+0x50>)
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <MX_I2C1_Init+0x50>)
 800275e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_I2C1_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_I2C1_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <MX_I2C1_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_I2C1_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <MX_I2C1_Init+0x50>)
 800277e:	f001 f86d 	bl	800385c <HAL_I2C_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002788:	f000 fa3e 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200002d0 	.word	0x200002d0
 8002794:	40005400 	.word	0x40005400
 8002798:	000186a0 	.word	0x000186a0

0800279c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <MX_SPI1_Init+0x64>)
 80027a2:	4a18      	ldr	r2, [pc, #96]	; (8002804 <MX_SPI1_Init+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_SPI1_Init+0x64>)
 80027a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_SPI1_Init+0x64>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <MX_SPI1_Init+0x64>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_SPI1_Init+0x64>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_SPI1_Init+0x64>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_SPI1_Init+0x64>)
 80027c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_SPI1_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <MX_SPI1_Init+0x64>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_SPI1_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <MX_SPI1_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_SPI1_Init+0x64>)
 80027e8:	220a      	movs	r2, #10
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <MX_SPI1_Init+0x64>)
 80027ee:	f003 f845 	bl	800587c <HAL_SPI_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027f8:	f000 fa06 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200003f0 	.word	0x200003f0
 8002804:	40013000 	.word	0x40013000

08002808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281c:	463b      	mov	r3, r7
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <MX_TIM2_Init+0x94>)
 8002826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800282a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <MX_TIM2_Init+0x94>)
 800282e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <MX_TIM2_Init+0x94>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <MX_TIM2_Init+0x94>)
 800283c:	2201      	movs	r2, #1
 800283e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <MX_TIM2_Init+0x94>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <MX_TIM2_Init+0x94>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800284c:	4813      	ldr	r0, [pc, #76]	; (800289c <MX_TIM2_Init+0x94>)
 800284e:	f003 f879 	bl	8005944 <HAL_TIM_Base_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002858:	f000 f9d6 	bl	8002c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	4619      	mov	r1, r3
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <MX_TIM2_Init+0x94>)
 800286a:	f003 f9c2 	bl	8005bf2 <HAL_TIM_ConfigClockSource>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002874:	f000 f9c8 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002878:	2320      	movs	r3, #32
 800287a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002880:	463b      	mov	r3, r7
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_TIM2_Init+0x94>)
 8002886:	f003 fbd7 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002890:	f000 f9ba 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000448 	.word	0x20000448

080028a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b4:	463b      	mov	r3, r7
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <MX_TIM5_Init+0x94>)
 80028be:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <MX_TIM5_Init+0x98>)
 80028c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 59;
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <MX_TIM5_Init+0x94>)
 80028c4:	223b      	movs	r2, #59	; 0x3b
 80028c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <MX_TIM5_Init+0x94>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xfffffff;
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <MX_TIM5_Init+0x94>)
 80028d0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80028d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <MX_TIM5_Init+0x94>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <MX_TIM5_Init+0x94>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028e2:	4814      	ldr	r0, [pc, #80]	; (8002934 <MX_TIM5_Init+0x94>)
 80028e4:	f003 f82e 	bl	8005944 <HAL_TIM_Base_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80028ee:	f000 f98b 	bl	8002c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028f8:	f107 0308 	add.w	r3, r7, #8
 80028fc:	4619      	mov	r1, r3
 80028fe:	480d      	ldr	r0, [pc, #52]	; (8002934 <MX_TIM5_Init+0x94>)
 8002900:	f003 f977 	bl	8005bf2 <HAL_TIM_ConfigClockSource>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800290a:	f000 f97d 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800290e:	2320      	movs	r3, #32
 8002910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002916:	463b      	mov	r3, r7
 8002918:	4619      	mov	r1, r3
 800291a:	4806      	ldr	r0, [pc, #24]	; (8002934 <MX_TIM5_Init+0x94>)
 800291c:	f003 fb8c 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002926:	f000 f96f 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000324 	.word	0x20000324
 8002938:	40000c00 	.word	0x40000c00

0800293c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	4b7c      	ldr	r3, [pc, #496]	; (8002b48 <MX_GPIO_Init+0x20c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a7b      	ldr	r2, [pc, #492]	; (8002b48 <MX_GPIO_Init+0x20c>)
 800295c:	f043 0310 	orr.w	r3, r3, #16
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b79      	ldr	r3, [pc, #484]	; (8002b48 <MX_GPIO_Init+0x20c>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <MX_GPIO_Init+0x20c>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a74      	ldr	r2, [pc, #464]	; (8002b48 <MX_GPIO_Init+0x20c>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b72      	ldr	r3, [pc, #456]	; (8002b48 <MX_GPIO_Init+0x20c>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <MX_GPIO_Init+0x20c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a6d      	ldr	r2, [pc, #436]	; (8002b48 <MX_GPIO_Init+0x20c>)
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <MX_GPIO_Init+0x20c>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b67      	ldr	r3, [pc, #412]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a66      	ldr	r2, [pc, #408]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a5f      	ldr	r2, [pc, #380]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <MX_GPIO_Init+0x20c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2108      	movs	r1, #8
 80029fe:	4853      	ldr	r0, [pc, #332]	; (8002b4c <MX_GPIO_Init+0x210>)
 8002a00:	f000 fee0 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a04:	2201      	movs	r2, #1
 8002a06:	2101      	movs	r1, #1
 8002a08:	4851      	ldr	r0, [pc, #324]	; (8002b50 <MX_GPIO_Init+0x214>)
 8002a0a:	f000 fedb 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FanPin_Pin|StepperMotorPin4_Pin|StepperMotorPin3_Pin, GPIO_PIN_RESET);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002a14:	484f      	ldr	r0, [pc, #316]	; (8002b54 <MX_GPIO_Init+0x218>)
 8002a16:	f000 fed5 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, StepperMotorPin2_Pin|StepperMotorPin1_Pin|FiringPin_Pin|LD4_Pin
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f64f 3110 	movw	r1, #64272	; 0xfb10
 8002a20:	484d      	ldr	r0, [pc, #308]	; (8002b58 <MX_GPIO_Init+0x21c>)
 8002a22:	f000 fecf 	bl	80037c4 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002a26:	2308      	movs	r3, #8
 8002a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4843      	ldr	r0, [pc, #268]	; (8002b4c <MX_GPIO_Init+0x210>)
 8002a3e:	f000 fd0f 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	4619      	mov	r1, r3
 8002a58:	483d      	ldr	r0, [pc, #244]	; (8002b50 <MX_GPIO_Init+0x214>)
 8002a5a:	f000 fd01 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <MX_GPIO_Init+0x220>)
 8002a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	483b      	ldr	r0, [pc, #236]	; (8002b60 <MX_GPIO_Init+0x224>)
 8002a72:	f000 fcf5 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin ShowDatePin_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|ShowDatePin_Pin;
 8002a76:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4832      	ldr	r0, [pc, #200]	; (8002b54 <MX_GPIO_Init+0x218>)
 8002a8c:	f000 fce8 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : RedButton_Pin GreenButton_Pin */
  GPIO_InitStruct.Pin = RedButton_Pin|GreenButton_Pin;
 8002a90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <MX_GPIO_Init+0x228>)
 8002a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4829      	ldr	r0, [pc, #164]	; (8002b4c <MX_GPIO_Init+0x210>)
 8002aa6:	f000 fcdb 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : FanPin_Pin StepperMotorPin4_Pin StepperMotorPin3_Pin */
  GPIO_InitStruct.Pin = FanPin_Pin|StepperMotorPin4_Pin|StepperMotorPin3_Pin;
 8002aaa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4824      	ldr	r0, [pc, #144]	; (8002b54 <MX_GPIO_Init+0x218>)
 8002ac4:	f000 fccc 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : StepperMotorPin2_Pin StepperMotorPin1_Pin FiringPin_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = StepperMotorPin2_Pin|StepperMotorPin1_Pin|FiringPin_Pin|LD4_Pin
 8002ac8:	f64f 3310 	movw	r3, #64272	; 0xfb10
 8002acc:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ada:	f107 031c 	add.w	r3, r7, #28
 8002ade:	4619      	mov	r1, r3
 8002ae0:	481d      	ldr	r0, [pc, #116]	; (8002b58 <MX_GPIO_Init+0x21c>)
 8002ae2:	f000 fcbd 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : zeroCrossing_Pin */
  GPIO_InitStruct.Pin = zeroCrossing_Pin;
 8002ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <MX_GPIO_Init+0x228>)
 8002aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(zeroCrossing_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	4619      	mov	r1, r3
 8002afa:	4817      	ldr	r0, [pc, #92]	; (8002b58 <MX_GPIO_Init+0x21c>)
 8002afc:	f000 fcb0 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002b00:	2320      	movs	r3, #32
 8002b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4619      	mov	r1, r3
 8002b12:	4811      	ldr	r0, [pc, #68]	; (8002b58 <MX_GPIO_Init+0x21c>)
 8002b14:	f000 fca4 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_GPIO_Init+0x220>)
 8002b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4808      	ldr	r0, [pc, #32]	; (8002b4c <MX_GPIO_Init+0x210>)
 8002b2c:	f000 fc98 	bl	8003460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	2028      	movs	r0, #40	; 0x28
 8002b36:	f000 fc5c 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b3a:	2028      	movs	r0, #40	; 0x28
 8002b3c:	f000 fc75 	bl	800342a <HAL_NVIC_EnableIRQ>

}
 8002b40:	bf00      	nop
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020c00 	.word	0x40020c00
 8002b5c:	10120000 	.word	0x10120000
 8002b60:	40020000 	.word	0x40020000
 8002b64:	10110000 	.word	0x10110000

08002b68 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(unsigned long delay_us)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,0);
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <delay_us+0x2c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
 	while(__HAL_TIM_GET_COUNTER(&htim5)<delay_us);
 8002b78:	bf00      	nop
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <delay_us+0x2c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d8f9      	bhi.n	8002b7a <delay_us+0x12>
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000324 	.word	0x20000324

08002b98 <delay_ms>:
void delay_ms(unsigned long delay_ms)
{		//htim2.Init.Period razlika u odnosu na delay_us
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
		//__HAL_TIM_SET_COUNTER(&htim2,0);
		count_TIM2=0;
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <delay_ms+0x28>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
		while(count_TIM2<delay_ms);
 8002ba6:	bf00      	nop
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <delay_ms+0x28>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d8fa      	bhi.n	8002ba8 <delay_ms+0x10>

}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	2000020c 	.word	0x2000020c

08002bc4 <millis>:
unsigned long millis(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

	unsigned long temp;
	temp= (unsigned long) HAL_GetTick();
 8002bca:	f000 fb09 	bl	80031e0 <HAL_GetTick>
 8002bce:	6078      	str	r0, [r7, #4]
	 return temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin==zeroCrossing_Pin)
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d103      	bne.n	8002bf6 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		zero_croosing=1;//true
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_GPIO_EXTI_Callback+0x28>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
		__NOP();
	}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_EXTI_Callback+0x1c>
		__NOP();
 8002bf6:	bf00      	nop
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	20000234 	.word	0x20000234

08002c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c56:	2007      	movs	r0, #7
 8002c58:	f000 fbc0 	bl	80033dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800

08002c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_I2C_MspInit+0x84>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d12c      	bne.n	8002ce4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <HAL_I2C_MspInit+0x88>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_I2C_MspInit+0x88>)
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <HAL_I2C_MspInit+0x88>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002ca6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cac:	2312      	movs	r3, #18
 8002cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <HAL_I2C_MspInit+0x8c>)
 8002cc4:	f000 fbcc 	bl	8003460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_I2C_MspInit+0x88>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_I2C_MspInit+0x88>)
 8002cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_I2C_MspInit+0x88>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ce4:	bf00      	nop
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40005400 	.word	0x40005400
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40020400 	.word	0x40020400

08002cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_SPI_MspInit+0x84>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d12b      	bne.n	8002d72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002d52:	23e0      	movs	r3, #224	; 0xe0
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d62:	2305      	movs	r3, #5
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d6e:	f000 fb77 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d72:	bf00      	nop
 8002d74:	3728      	adds	r7, #40	; 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40013000 	.word	0x40013000
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020000 	.word	0x40020000

08002d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d116      	bne.n	8002dc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_TIM_Base_MspInit+0x80>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_TIM_Base_MspInit+0x80>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_TIM_Base_MspInit+0x80>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	201c      	movs	r0, #28
 8002dbc:	f000 fb19 	bl	80033f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dc0:	201c      	movs	r0, #28
 8002dc2:	f000 fb32 	bl	800342a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002dc6:	e01a      	b.n	8002dfe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <HAL_TIM_Base_MspInit+0x84>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d115      	bne.n	8002dfe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_TIM_Base_MspInit+0x80>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <HAL_TIM_Base_MspInit+0x80>)
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_TIM_Base_MspInit+0x80>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2032      	movs	r0, #50	; 0x32
 8002df4:	f000 fafd 	bl	80033f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002df8:	2032      	movs	r0, #50	; 0x32
 8002dfa:	f000 fb16 	bl	800342a <HAL_NVIC_EnableIRQ>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40000c00 	.word	0x40000c00

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <HardFault_Handler+0x4>

08002e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <MemManage_Handler+0x4>

08002e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2e:	e7fe      	b.n	8002e2e <BusFault_Handler+0x4>

08002e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <UsageFault_Handler+0x4>

08002e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e64:	f000 f9a8 	bl	80031b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e70:	4833      	ldr	r0, [pc, #204]	; (8002f40 <TIM2_IRQHandler+0xd4>)
 8002e72:	f002 fdb6 	bl	80059e2 <HAL_TIM_IRQHandler>
  	  //Da bi timer ovako radio htim2.Init.Period mora biti veci od 0!
  	  	 static unsigned long counterTIM2=0;
  	  	 static unsigned  debounceCntRed=0;
  	  	 static unsigned  debounceCntGreen=0;

  	  	 count_TIM2++;
 8002e76:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <TIM2_IRQHandler+0xd8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <TIM2_IRQHandler+0xd8>)
 8002e7e:	6013      	str	r3, [r2, #0]

  	  	 //ispod je debouncing funkcionalnost iskoriscena pomocu timera od 1ms

//red button
     	if(false==redButtonPressedStatDeb)
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <TIM2_IRQHandler+0xdc>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <TIM2_IRQHandler+0x4c>
     	{
  	  	 if(true==redButtonPressedStat)
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <TIM2_IRQHandler+0xe0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <TIM2_IRQHandler+0x4c>
     		{
  	  		  debounceCntRed++;
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <TIM2_IRQHandler+0xe4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <TIM2_IRQHandler+0xe4>)
 8002ea2:	6013      	str	r3, [r2, #0]
     		if(DEBOUNCING_TIME_MS<debounceCntRed)
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <TIM2_IRQHandler+0xe4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b32      	cmp	r3, #50	; 0x32
 8002eaa:	d905      	bls.n	8002eb8 <TIM2_IRQHandler+0x4c>
     			{
     				redButtonPressedStatDeb=true;
 8002eac:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <TIM2_IRQHandler+0xdc>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
     				debounceCntRed=0;
 8002eb2:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <TIM2_IRQHandler+0xe4>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
     	}
     	else
     	{
     			//do nothing
     	}
     	if(true==redButtonPressedStatDeb)
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <TIM2_IRQHandler+0xdc>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <TIM2_IRQHandler+0x72>
     	{
			 if(!(HAL_GPIO_ReadPin(RedButton_GPIO_Port, RedButton_Pin)))
 8002ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ec6:	4823      	ldr	r0, [pc, #140]	; (8002f54 <TIM2_IRQHandler+0xe8>)
 8002ec8:	f000 fc64 	bl	8003794 <HAL_GPIO_ReadPin>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <TIM2_IRQHandler+0x72>
			{
				 redButtonPressedStat=false;
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <TIM2_IRQHandler+0xe0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
				 redButtonPressedStatDeb=false;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <TIM2_IRQHandler+0xdc>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
			 {
				 //do nothing
			 }
     	}
 //green button
     	if(false==greenButtonPressedStatDeb)
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <TIM2_IRQHandler+0xec>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f083 0301 	eor.w	r3, r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d013      	beq.n	8002f16 <TIM2_IRQHandler+0xaa>
     	{
     		if(true==greenButtonPressedStat)
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <TIM2_IRQHandler+0xf0>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00e      	beq.n	8002f16 <TIM2_IRQHandler+0xaa>
     		{
     			debounceCntGreen++;
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <TIM2_IRQHandler+0xf4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <TIM2_IRQHandler+0xf4>)
 8002f00:	6013      	str	r3, [r2, #0]
     			if(DEBOUNCING_TIME_MS<debounceCntGreen)
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <TIM2_IRQHandler+0xf4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b32      	cmp	r3, #50	; 0x32
 8002f08:	d905      	bls.n	8002f16 <TIM2_IRQHandler+0xaa>
     			{
     				greenButtonPressedStatDeb=true;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <TIM2_IRQHandler+0xec>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
     				debounceCntGreen=0;
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <TIM2_IRQHandler+0xf4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
     	else
     	{
     		//do nothing
     	}

     		if(true==greenButtonPressedStatDeb)
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <TIM2_IRQHandler+0xec>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <TIM2_IRQHandler+0xd0>
     		{
				if(!(HAL_GPIO_ReadPin(GreenButton_GPIO_Port, GreenButton_Pin)))
 8002f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f24:	480b      	ldr	r0, [pc, #44]	; (8002f54 <TIM2_IRQHandler+0xe8>)
 8002f26:	f000 fc35 	bl	8003794 <HAL_GPIO_ReadPin>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <TIM2_IRQHandler+0xd0>
				{
					greenButtonPressedStat=false;
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <TIM2_IRQHandler+0xf0>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
					greenButtonPressedStatDeb=false;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <TIM2_IRQHandler+0xec>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM2_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000448 	.word	0x20000448
 8002f44:	2000020c 	.word	0x2000020c
 8002f48:	20000251 	.word	0x20000251
 8002f4c:	20000248 	.word	0x20000248
 8002f50:	20000260 	.word	0x20000260
 8002f54:	40021000 	.word	0x40021000
 8002f58:	20000252 	.word	0x20000252
 8002f5c:	20000250 	.word	0x20000250
 8002f60:	20000264 	.word	0x20000264

08002f64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//zeroCrossing Detection

if(__HAL_GPIO_EXTI_GET_FLAG(zeroCrossing_Pin))
 8002f68:	4b26      	ldr	r3, [pc, #152]	; (8003004 <EXTI15_10_IRQHandler+0xa0>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <EXTI15_10_IRQHandler+0x1a>
{
	kontrola_grejac(PidKorekcija);
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <EXTI15_10_IRQHandler+0xa4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fe3d 	bl	8001bf8 <kontrola_grejac>
}
//RedButton Pressed
if(false==redButtonPressedStat)
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <EXTI15_10_IRQHandler+0xa8>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f083 0301 	eor.w	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d011      	beq.n	8002fb2 <EXTI15_10_IRQHandler+0x4e>
{
	if(__HAL_GPIO_EXTI_GET_FLAG(RedButton_Pin))
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <EXTI15_10_IRQHandler+0xa0>)
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <EXTI15_10_IRQHandler+0x48>
	{

		redButtonPressed++;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <EXTI15_10_IRQHandler+0xac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <EXTI15_10_IRQHandler+0xac>)
 8002fa2:	6013      	str	r3, [r2, #0]
		redButtonPressedStat=true;
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <EXTI15_10_IRQHandler+0xa8>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e002      	b.n	8002fb2 <EXTI15_10_IRQHandler+0x4e>

	}
	else
	{
		redButtonPressedStat=false;
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <EXTI15_10_IRQHandler+0xa8>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
{

}

//GreenButton Pressed
if(false==greenButtonPressedStat)
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <EXTI15_10_IRQHandler+0xb0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f083 0301 	eor.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d011      	beq.n	8002fe6 <EXTI15_10_IRQHandler+0x82>
{
	if(__HAL_GPIO_EXTI_GET_FLAG(GreenButton_Pin))
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <EXTI15_10_IRQHandler+0xa0>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <EXTI15_10_IRQHandler+0x7c>
	{
		greenButtonPressed++;
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <EXTI15_10_IRQHandler+0xb4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a10      	ldr	r2, [pc, #64]	; (8003018 <EXTI15_10_IRQHandler+0xb4>)
 8002fd6:	6013      	str	r3, [r2, #0]
		greenButtonPressedStat=true;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <EXTI15_10_IRQHandler+0xb0>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e002      	b.n	8002fe6 <EXTI15_10_IRQHandler+0x82>

	}
	else
	{
		greenButtonPressedStat=false;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <EXTI15_10_IRQHandler+0xb0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]

//__HAL_GPIO_EXTI_CLEAR_FLAG(GreenButton_Pin);
//__HAL_GPIO_EXTI_CLEAR_FLAG(RedButton_Pin);

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002fe6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fea:	f000 fc1f 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002fee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ff2:	f000 fc1b 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002ff6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ffa:	f000 fc17 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40013c00 	.word	0x40013c00
 8003008:	20000238 	.word	0x20000238
 800300c:	20000248 	.word	0x20000248
 8003010:	20000244 	.word	0x20000244
 8003014:	20000250 	.word	0x20000250
 8003018:	2000024c 	.word	0x2000024c

0800301c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <TIM5_IRQHandler+0x18>)
 8003022:	f002 fcde 	bl	80059e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  count_us++;
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <TIM5_IRQHandler+0x1c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	4a02      	ldr	r2, [pc, #8]	; (8003038 <TIM5_IRQHandler+0x1c>)
 800302e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM5_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000324 	.word	0x20000324
 8003038:	20000210 	.word	0x20000210

0800303c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <_sbrk+0x50>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <_sbrk+0x16>
		heap_end = &end;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <_sbrk+0x50>)
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <_sbrk+0x54>)
 8003050:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <_sbrk+0x50>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <_sbrk+0x50>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	466a      	mov	r2, sp
 8003062:	4293      	cmp	r3, r2
 8003064:	d907      	bls.n	8003076 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003066:	f003 f877 	bl	8006158 <__errno>
 800306a:	4602      	mov	r2, r0
 800306c:	230c      	movs	r3, #12
 800306e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003074:	e006      	b.n	8003084 <_sbrk+0x48>
	}

	heap_end += incr;
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <_sbrk+0x50>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	4a03      	ldr	r2, [pc, #12]	; (800308c <_sbrk+0x50>)
 8003080:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000268 	.word	0x20000268
 8003090:	20000490 	.word	0x20000490

08003094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <SystemInit+0x28>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	4a07      	ldr	r2, [pc, #28]	; (80030bc <SystemInit+0x28>)
 80030a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <SystemInit+0x28>)
 80030aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ae:	609a      	str	r2, [r3, #8]
#endif
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030c6:	e003      	b.n	80030d0 <LoopCopyDataInit>

080030c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030ce:	3104      	adds	r1, #4

080030d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030d0:	480b      	ldr	r0, [pc, #44]	; (8003100 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030d8:	d3f6      	bcc.n	80030c8 <CopyDataInit>
  ldr  r2, =_sbss
 80030da:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030dc:	e002      	b.n	80030e4 <LoopFillZerobss>

080030de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030e0:	f842 3b04 	str.w	r3, [r2], #4

080030e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030e8:	d3f9      	bcc.n	80030de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ea:	f7ff ffd3 	bl	8003094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ee:	f003 f839 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f2:	f7ff f999 	bl	8002428 <main>
  bx  lr    
 80030f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030fc:	0800ab1c 	.word	0x0800ab1c
  ldr  r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003104:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8003108:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800310c:	20000490 	.word	0x20000490

08003110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC_IRQHandler>
	...

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_Init+0x40>)
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_Init+0x40>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_Init+0x40>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313c:	2003      	movs	r0, #3
 800313e:	f000 f94d 	bl	80033dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003142:	2000      	movs	r0, #0
 8003144:	f000 f808 	bl	8003158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003148:	f7ff fd66 	bl	8002c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_InitTick+0x54>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_InitTick+0x58>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f965 	bl	8003446 <HAL_SYSTICK_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e00e      	b.n	80031a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d80a      	bhi.n	80031a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800318c:	2200      	movs	r2, #0
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003194:	f000 f92d 	bl	80033f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003198:	4a06      	ldr	r2, [pc, #24]	; (80031b4 <HAL_InitTick+0x5c>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000010 	.word	0x20000010
 80031b0:	20000018 	.word	0x20000018
 80031b4:	20000014 	.word	0x20000014

080031b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x20>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_IncTick+0x24>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_IncTick+0x24>)
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000018 	.word	0x20000018
 80031dc:	20000488 	.word	0x20000488

080031e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return uwTick;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_GetTick+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000488 	.word	0x20000488

080031f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff ffee 	bl	80031e0 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003210:	d005      	beq.n	800321e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_Delay+0x40>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800321e:	bf00      	nop
 8003220:	f7ff ffde 	bl	80031e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	429a      	cmp	r2, r3
 800322e:	d8f7      	bhi.n	8003220 <HAL_Delay+0x28>
  {
  }
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000018 	.word	0x20000018

0800323c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326e:	4a04      	ldr	r2, [pc, #16]	; (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	60d3      	str	r3, [r2, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <__NVIC_GetPriorityGrouping+0x18>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 0307 	and.w	r3, r3, #7
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	db0b      	blt.n	80032ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	4907      	ldr	r1, [pc, #28]	; (80032d8 <__NVIC_EnableIRQ+0x38>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2001      	movs	r0, #1
 80032c2:	fa00 f202 	lsl.w	r2, r0, r2
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100

080032dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	db0a      	blt.n	8003306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <__NVIC_SetPriority+0x4c>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	440b      	add	r3, r1
 8003300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003304:	e00a      	b.n	800331c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4908      	ldr	r1, [pc, #32]	; (800332c <__NVIC_SetPriority+0x50>)
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	3b04      	subs	r3, #4
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	440b      	add	r3, r1
 800331a:	761a      	strb	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000e100 	.word	0xe000e100
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f1c3 0307 	rsb	r3, r3, #7
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf28      	it	cs
 800334e:	2304      	movcs	r3, #4
 8003350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3304      	adds	r3, #4
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <NVIC_EncodePriority+0x30>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b03      	subs	r3, #3
 800335e:	e000      	b.n	8003362 <NVIC_EncodePriority+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43d9      	mvns	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	4313      	orrs	r3, r2
         );
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a8:	d301      	bcc.n	80033ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00f      	b.n	80033ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <SysTick_Config+0x40>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033b6:	210f      	movs	r1, #15
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033bc:	f7ff ff8e 	bl	80032dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <SysTick_Config+0x40>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <SysTick_Config+0x40>)
 80033c8:	2207      	movs	r2, #7
 80033ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	e000e010 	.word	0xe000e010

080033dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff29 	bl	800323c <__NVIC_SetPriorityGrouping>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003404:	f7ff ff3e 	bl	8003284 <__NVIC_GetPriorityGrouping>
 8003408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	6978      	ldr	r0, [r7, #20]
 8003410:	f7ff ff8e 	bl	8003330 <NVIC_EncodePriority>
 8003414:	4602      	mov	r2, r0
 8003416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff5d 	bl	80032dc <__NVIC_SetPriority>
}
 8003422:	bf00      	nop
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff31 	bl	80032a0 <__NVIC_EnableIRQ>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ffa2 	bl	8003398 <SysTick_Config>
 8003454:	4603      	mov	r3, r0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e16b      	b.n	8003754 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	f040 815a 	bne.w	800374e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d00b      	beq.n	80034ba <HAL_GPIO_Init+0x5a>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d007      	beq.n	80034ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034ae:	2b11      	cmp	r3, #17
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b12      	cmp	r3, #18
 80034b8:	d130      	bne.n	800351c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 0201 	and.w	r2, r3, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0xfc>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b12      	cmp	r3, #18
 800355a:	d123      	bne.n	80035a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	08da      	lsrs	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3208      	adds	r2, #8
 8003564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80b4 	beq.w	800374e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b5f      	ldr	r3, [pc, #380]	; (8003768 <HAL_GPIO_Init+0x308>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_GPIO_Init+0x308>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_GPIO_Init+0x308>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003602:	4a5a      	ldr	r2, [pc, #360]	; (800376c <HAL_GPIO_Init+0x30c>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_GPIO_Init+0x310>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02b      	beq.n	8003686 <HAL_GPIO_Init+0x226>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a50      	ldr	r2, [pc, #320]	; (8003774 <HAL_GPIO_Init+0x314>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d025      	beq.n	8003682 <HAL_GPIO_Init+0x222>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4f      	ldr	r2, [pc, #316]	; (8003778 <HAL_GPIO_Init+0x318>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01f      	beq.n	800367e <HAL_GPIO_Init+0x21e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4e      	ldr	r2, [pc, #312]	; (800377c <HAL_GPIO_Init+0x31c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d019      	beq.n	800367a <HAL_GPIO_Init+0x21a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4d      	ldr	r2, [pc, #308]	; (8003780 <HAL_GPIO_Init+0x320>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_GPIO_Init+0x216>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4c      	ldr	r2, [pc, #304]	; (8003784 <HAL_GPIO_Init+0x324>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00d      	beq.n	8003672 <HAL_GPIO_Init+0x212>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4b      	ldr	r2, [pc, #300]	; (8003788 <HAL_GPIO_Init+0x328>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <HAL_GPIO_Init+0x20e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4a      	ldr	r2, [pc, #296]	; (800378c <HAL_GPIO_Init+0x32c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_GPIO_Init+0x20a>
 8003666:	2307      	movs	r3, #7
 8003668:	e00e      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800366a:	2308      	movs	r3, #8
 800366c:	e00c      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800366e:	2306      	movs	r3, #6
 8003670:	e00a      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003672:	2305      	movs	r3, #5
 8003674:	e008      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003676:	2304      	movs	r3, #4
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800367a:	2303      	movs	r3, #3
 800367c:	e004      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800367e:	2302      	movs	r3, #2
 8003680:	e002      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003686:	2300      	movs	r3, #0
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f002 0203 	and.w	r2, r2, #3
 800368e:	0092      	lsls	r2, r2, #2
 8003690:	4093      	lsls	r3, r2
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003698:	4934      	ldr	r1, [pc, #208]	; (800376c <HAL_GPIO_Init+0x30c>)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036a6:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_GPIO_Init+0x330>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ca:	4a31      	ldr	r2, [pc, #196]	; (8003790 <HAL_GPIO_Init+0x330>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <HAL_GPIO_Init+0x330>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <HAL_GPIO_Init+0x330>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fa:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_GPIO_Init+0x330>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_GPIO_Init+0x330>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_GPIO_Init+0x330>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HAL_GPIO_Init+0x330>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3301      	adds	r3, #1
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	f67f ae90 	bls.w	800347c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800375c:	bf00      	nop
 800375e:	3724      	adds	r7, #36	; 0x24
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40023800 	.word	0x40023800
 800376c:	40013800 	.word	0x40013800
 8003770:	40020000 	.word	0x40020000
 8003774:	40020400 	.word	0x40020400
 8003778:	40020800 	.word	0x40020800
 800377c:	40020c00 	.word	0x40020c00
 8003780:	40021000 	.word	0x40021000
 8003784:	40021400 	.word	0x40021400
 8003788:	40021800 	.word	0x40021800
 800378c:	40021c00 	.word	0x40021c00
 8003790:	40013c00 	.word	0x40013c00

08003794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	887b      	ldrh	r3, [r7, #2]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e001      	b.n	80037b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
 80037d0:	4613      	mov	r3, r2
 80037d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d4:	787b      	ldrb	r3, [r7, #1]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037e0:	e003      	b.n	80037ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	041a      	lsls	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	619a      	str	r2, [r3, #24]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	887b      	ldrh	r3, [r7, #2]
 8003808:	401a      	ands	r2, r3
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	429a      	cmp	r2, r3
 800380e:	d104      	bne.n	800381a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	041a      	lsls	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003818:	e002      	b.n	8003820 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	619a      	str	r2, [r3, #24]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff f9c6 	bl	8002bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e11f      	b.n	8003aae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff f9f0 	bl	8002c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c0:	f001 ffc8 	bl	8005854 <HAL_RCC_GetPCLK1Freq>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a7b      	ldr	r2, [pc, #492]	; (8003ab8 <HAL_I2C_Init+0x25c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d807      	bhi.n	80038e0 <HAL_I2C_Init+0x84>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <HAL_I2C_Init+0x260>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e006      	b.n	80038ee <HAL_I2C_Init+0x92>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a77      	ldr	r2, [pc, #476]	; (8003ac0 <HAL_I2C_Init+0x264>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0db      	b.n	8003aae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a72      	ldr	r2, [pc, #456]	; (8003ac4 <HAL_I2C_Init+0x268>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9b      	lsrs	r3, r3, #18
 8003900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a64      	ldr	r2, [pc, #400]	; (8003ab8 <HAL_I2C_Init+0x25c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d802      	bhi.n	8003930 <HAL_I2C_Init+0xd4>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	e009      	b.n	8003944 <HAL_I2C_Init+0xe8>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	4a63      	ldr	r2, [pc, #396]	; (8003ac8 <HAL_I2C_Init+0x26c>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4956      	ldr	r1, [pc, #344]	; (8003ab8 <HAL_I2C_Init+0x25c>)
 8003960:	428b      	cmp	r3, r1
 8003962:	d80d      	bhi.n	8003980 <HAL_I2C_Init+0x124>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e59      	subs	r1, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003972:	3301      	adds	r3, #1
 8003974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003978:	2b04      	cmp	r3, #4
 800397a:	bf38      	it	cc
 800397c:	2304      	movcc	r3, #4
 800397e:	e04f      	b.n	8003a20 <HAL_I2C_Init+0x1c4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_I2C_Init+0x150>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e012      	b.n	80039d2 <HAL_I2C_Init+0x176>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Init+0x17e>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e022      	b.n	8003a20 <HAL_I2C_Init+0x1c4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_I2C_Init+0x1a4>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e58      	subs	r0, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	440b      	add	r3, r1
 80039f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Init+0x1c4>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6809      	ldr	r1, [r1, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6911      	ldr	r1, [r2, #16]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	001e847f 	.word	0x001e847f
 8003ac0:	003d08ff 	.word	0x003d08ff
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7ff fb7e 	bl	80031e0 <HAL_GetTick>
 8003ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 80e0 	bne.w	8003cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	4970      	ldr	r1, [pc, #448]	; (8003cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f001 f890 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0d3      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x50>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0cc      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d007      	beq.n	8003b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a50      	ldr	r2, [pc, #320]	; (8003cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fe16 	bl	80047bc <I2C_MasterRequestWrite>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e08d      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb0:	e066      	b.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f001 f90a 	bl	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06b      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11b      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	6a39      	ldr	r1, [r7, #32]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f001 f8fa 	bl	8004e52 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d107      	bne.n	8003c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01a      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d194      	bne.n	8003bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000

08003cc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cdc:	f7ff fa80 	bl	80031e0 <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	f040 820b 	bne.w	8004106 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2319      	movs	r3, #25
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	497c      	ldr	r1, [pc, #496]	; (8003eec <HAL_I2C_Master_Receive+0x224>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 ff92 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
 8003d08:	e1fe      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2C_Master_Receive+0x50>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e1f7      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d007      	beq.n	8003d3e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2222      	movs	r2, #34	; 0x22
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	893a      	ldrh	r2, [r7, #8]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a5c      	ldr	r2, [pc, #368]	; (8003ef0 <HAL_I2C_Master_Receive+0x228>)
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d80:	8979      	ldrh	r1, [r7, #10]
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fd9a 	bl	80048c0 <I2C_MasterRequestRead>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1b8      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e18c      	b.n	80040e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11b      	bne.n	8003e06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e16c      	b.n	80040e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d11b      	bne.n	8003e46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	e14c      	b.n	80040e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e6c:	e138      	b.n	80040e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	f200 80f1 	bhi.w	800405a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d123      	bne.n	8003ec8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f001 f825 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e139      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ec6:	e10b      	b.n	80040e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d14e      	bne.n	8003f6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <HAL_I2C_Master_Receive+0x22c>)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fea2 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e10e      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
 8003eea:	bf00      	nop
 8003eec:	00100002 	.word	0x00100002
 8003ef0:	ffff0000 	.word	0xffff0000
 8003ef4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f6c:	e0b8      	b.n	80040e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	2200      	movs	r2, #0
 8003f76:	4966      	ldr	r1, [pc, #408]	; (8004110 <HAL_I2C_Master_Receive+0x448>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fe53 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0bf      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	494f      	ldr	r1, [pc, #316]	; (8004110 <HAL_I2C_Master_Receive+0x448>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fe25 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e091      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004058:	e042      	b.n	80040e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 ff38 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e04c      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d118      	bne.n	80040e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f47f aec2 	bne.w	8003e6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3728      	adds	r7, #40	; 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	00010004 	.word	0x00010004

08004114 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	461a      	mov	r2, r3
 8004122:	4603      	mov	r3, r0
 8004124:	817b      	strh	r3, [r7, #10]
 8004126:	460b      	mov	r3, r1
 8004128:	813b      	strh	r3, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800412e:	f7ff f857 	bl	80031e0 <HAL_GetTick>
 8004132:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b20      	cmp	r3, #32
 800413e:	f040 8208 	bne.w	8004552 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	2319      	movs	r3, #25
 8004148:	2201      	movs	r2, #1
 800414a:	497b      	ldr	r1, [pc, #492]	; (8004338 <HAL_I2C_Mem_Read+0x224>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fd69 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
 800415a:	e1fb      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_I2C_Mem_Read+0x56>
 8004166:	2302      	movs	r3, #2
 8004168:	e1f4      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d007      	beq.n	8004190 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800419e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2222      	movs	r2, #34	; 0x22
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a5b      	ldr	r2, [pc, #364]	; (800433c <HAL_I2C_Mem_Read+0x228>)
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041d2:	88f8      	ldrh	r0, [r7, #6]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	8979      	ldrh	r1, [r7, #10]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4603      	mov	r3, r0
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fc38 	bl	8004a58 <I2C_RequestMemoryRead>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1b0      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e184      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	2b01      	cmp	r3, #1
 8004228:	d11b      	bne.n	8004262 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004238:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e164      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	2b02      	cmp	r3, #2
 8004268:	d11b      	bne.n	80042a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004278:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	e144      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042b8:	e138      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b03      	cmp	r3, #3
 80042c0:	f200 80f1 	bhi.w	80044a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d123      	bne.n	8004314 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fdff 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e139      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004312:	e10b      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b02      	cmp	r3, #2
 800431a:	d14e      	bne.n	80043ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	2200      	movs	r2, #0
 8004324:	4906      	ldr	r1, [pc, #24]	; (8004340 <HAL_I2C_Mem_Read+0x22c>)
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fc7c 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e10e      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
 8004336:	bf00      	nop
 8004338:	00100002 	.word	0x00100002
 800433c:	ffff0000 	.word	0xffff0000
 8004340:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b8:	e0b8      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2200      	movs	r2, #0
 80043c2:	4966      	ldr	r1, [pc, #408]	; (800455c <HAL_I2C_Mem_Read+0x448>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fc2d 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0bf      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2200      	movs	r2, #0
 800441e:	494f      	ldr	r1, [pc, #316]	; (800455c <HAL_I2C_Mem_Read+0x448>)
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fbff 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e091      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044a4:	e042      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fd12 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e04c      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d118      	bne.n	800452c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f aec2 	bne.w	80042ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	00010004 	.word	0x00010004

08004560 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	460b      	mov	r3, r1
 800456e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004570:	f7fe fe36 	bl	80031e0 <HAL_GetTick>
 8004574:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004576:	2301      	movs	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b20      	cmp	r3, #32
 8004584:	f040 8110 	bne.w	80047a8 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2319      	movs	r3, #25
 800458e:	2201      	movs	r2, #1
 8004590:	4988      	ldr	r1, [pc, #544]	; (80047b4 <HAL_I2C_IsDeviceReady+0x254>)
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fb46 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	e103      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_I2C_IsDeviceReady+0x50>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e0fc      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x24a>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d007      	beq.n	80045d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2224      	movs	r2, #36	; 0x24
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a70      	ldr	r2, [pc, #448]	; (80047b8 <HAL_I2C_IsDeviceReady+0x258>)
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004608:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2200      	movs	r2, #0
 8004612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fb04 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00c      	beq.n	800463c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e0b6      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800463c:	897b      	ldrh	r3, [r7, #10]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800464a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800464c:	f7fe fdc8 	bl	80031e0 <HAL_GetTick>
 8004650:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b02      	cmp	r3, #2
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004680:	e025      	b.n	80046ce <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004682:	f7fe fdad 	bl	80031e0 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <HAL_I2C_IsDeviceReady+0x138>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	22a0      	movs	r2, #160	; 0xa0
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	bf0c      	ite	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	2300      	movne	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2ba0      	cmp	r3, #160	; 0xa0
 80046d8:	d005      	beq.n	80046e6 <HAL_I2C_IsDeviceReady+0x186>
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_I2C_IsDeviceReady+0x186>
 80046e0:	7dbb      	ldrb	r3, [r7, #22]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0cd      	beq.n	8004682 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d129      	bne.n	8004750 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	2319      	movs	r3, #25
 8004728:	2201      	movs	r2, #1
 800472a:	4922      	ldr	r1, [pc, #136]	; (80047b4 <HAL_I2C_IsDeviceReady+0x254>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa79 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e036      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e02c      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004768:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2319      	movs	r3, #25
 8004770:	2201      	movs	r2, #1
 8004772:	4910      	ldr	r1, [pc, #64]	; (80047b4 <HAL_I2C_IsDeviceReady+0x254>)
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fa55 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e012      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	3301      	adds	r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	f4ff af33 	bcc.w	80045fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	00100002 	.word	0x00100002
 80047b8:	ffff0000 	.word	0xffff0000

080047bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	460b      	mov	r3, r1
 80047ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d006      	beq.n	80047e6 <I2C_MasterRequestWrite+0x2a>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d003      	beq.n	80047e6 <I2C_MasterRequestWrite+0x2a>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e4:	d108      	bne.n	80047f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e00b      	b.n	8004810 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	2b12      	cmp	r3, #18
 80047fe:	d107      	bne.n	8004810 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800480e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fa01 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e035      	b.n	80048ae <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484a:	d108      	bne.n	800485e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800484c:	897b      	ldrh	r3, [r7, #10]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800485a:	611a      	str	r2, [r3, #16]
 800485c:	e01b      	b.n	8004896 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	11db      	asrs	r3, r3, #7
 8004862:	b2db      	uxtb	r3, r3
 8004864:	f003 0306 	and.w	r3, r3, #6
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f063 030f 	orn	r3, r3, #15
 800486e:	b2da      	uxtb	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	490f      	ldr	r1, [pc, #60]	; (80048b8 <I2C_MasterRequestWrite+0xfc>)
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa28 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e010      	b.n	80048ae <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800488c:	897b      	ldrh	r3, [r7, #10]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4908      	ldr	r1, [pc, #32]	; (80048bc <I2C_MasterRequestWrite+0x100>)
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fa18 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	00010008 	.word	0x00010008
 80048bc:	00010002 	.word	0x00010002

080048c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	460b      	mov	r3, r1
 80048ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d006      	beq.n	80048fa <I2C_MasterRequestRead+0x3a>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d003      	beq.n	80048fa <I2C_MasterRequestRead+0x3a>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048f8:	d108      	bne.n	800490c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e00b      	b.n	8004924 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	2b11      	cmp	r3, #17
 8004912:	d107      	bne.n	8004924 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f977 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00c      	beq.n	8004956 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e078      	b.n	8004a48 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495e:	d108      	bne.n	8004972 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]
 8004970:	e05e      	b.n	8004a30 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	11db      	asrs	r3, r3, #7
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 0306 	and.w	r3, r3, #6
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f063 030f 	orn	r3, r3, #15
 8004982:	b2da      	uxtb	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4930      	ldr	r1, [pc, #192]	; (8004a50 <I2C_MasterRequestRead+0x190>)
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f99e 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e053      	b.n	8004a48 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049a0:	897b      	ldrh	r3, [r7, #10]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4929      	ldr	r1, [pc, #164]	; (8004a54 <I2C_MasterRequestRead+0x194>)
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f98e 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e043      	b.n	8004a48 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f916 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e017      	b.n	8004a48 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	11db      	asrs	r3, r3, #7
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 0306 	and.w	r3, r3, #6
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f063 030e 	orn	r3, r3, #14
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4907      	ldr	r1, [pc, #28]	; (8004a54 <I2C_MasterRequestRead+0x194>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f94b 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00010008 	.word	0x00010008
 8004a54:	00010002 	.word	0x00010002

08004a58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f8c0 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00c      	beq.n	8004ac4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0a9      	b.n	8004c18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ad2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	6a3a      	ldr	r2, [r7, #32]
 8004ad8:	4951      	ldr	r1, [pc, #324]	; (8004c20 <I2C_RequestMemoryRead+0x1c8>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f8f9 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e096      	b.n	8004c18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	6a39      	ldr	r1, [r7, #32]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f963 	bl	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00d      	beq.n	8004b2c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d107      	bne.n	8004b28 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e075      	b.n	8004c18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b32:	893b      	ldrh	r3, [r7, #8]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]
 8004b3c:	e021      	b.n	8004b82 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b3e:	893b      	ldrh	r3, [r7, #8]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	6a39      	ldr	r1, [r7, #32]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f93d 	bl	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d107      	bne.n	8004b74 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e04f      	b.n	8004c18 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b78:	893b      	ldrh	r3, [r7, #8]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	6a39      	ldr	r1, [r7, #32]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f922 	bl	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d107      	bne.n	8004baa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e034      	b.n	8004c18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f82a 	bl	8004c24 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e013      	b.n	8004c18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bf0:	897b      	ldrh	r3, [r7, #10]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	6a3a      	ldr	r2, [r7, #32]
 8004c04:	4906      	ldr	r1, [pc, #24]	; (8004c20 <I2C_RequestMemoryRead+0x1c8>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f863 	bl	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	00010002 	.word	0x00010002

08004c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c34:	e025      	b.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c3c:	d021      	beq.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fe facf 	bl	80031e0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d116      	bne.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e023      	b.n	8004cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10d      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	43da      	mvns	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	e00c      	b.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d0b6      	beq.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce0:	e051      	b.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf0:	d123      	bne.n	8004d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e046      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d40:	d021      	beq.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fe fa4d 	bl	80031e0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d116      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e020      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e00b      	b.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d18d      	bne.n	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ddc:	e02d      	b.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f8ce 	bl	8004f80 <I2C_IsAcknowledgeFailed>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e02d      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df4:	d021      	beq.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fe f9f3 	bl	80031e0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d116      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e007      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d1ca      	bne.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e5e:	e02d      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f88d 	bl	8004f80 <I2C_IsAcknowledgeFailed>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e02d      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e76:	d021      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fe f9b2 	bl	80031e0 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d116      	bne.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d1ca      	bne.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee0:	e042      	b.n	8004f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d119      	bne.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0210 	mvn.w	r2, #16
 8004ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e029      	b.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fe f95c 	bl	80031e0 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d116      	bne.n	8004f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e007      	b.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d1b5      	bne.n	8004ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f96:	d11b      	bne.n	8004fd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f043 0204 	orr.w	r2, r3, #4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e25b      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d075      	beq.n	80050ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ffe:	4ba3      	ldr	r3, [pc, #652]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d00c      	beq.n	8005024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800500a:	4ba0      	ldr	r3, [pc, #640]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005012:	2b08      	cmp	r3, #8
 8005014:	d112      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005016:	4b9d      	ldr	r3, [pc, #628]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005022:	d10b      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	4b99      	ldr	r3, [pc, #612]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05b      	beq.n	80050e8 <HAL_RCC_OscConfig+0x108>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d157      	bne.n	80050e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e236      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d106      	bne.n	8005054 <HAL_RCC_OscConfig+0x74>
 8005046:	4b91      	ldr	r3, [pc, #580]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a90      	ldr	r2, [pc, #576]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e01d      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x98>
 800505e:	4b8b      	ldr	r3, [pc, #556]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a8a      	ldr	r2, [pc, #552]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b88      	ldr	r3, [pc, #544]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a87      	ldr	r2, [pc, #540]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e00b      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005078:	4b84      	ldr	r3, [pc, #528]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a83      	ldr	r2, [pc, #524]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800507e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b81      	ldr	r3, [pc, #516]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a80      	ldr	r2, [pc, #512]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800508a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800508e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d013      	beq.n	80050c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fe f8a2 	bl	80031e0 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fe f89e 	bl	80031e0 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e1fb      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b76      	ldr	r3, [pc, #472]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0xc0>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fe f88e 	bl	80031e0 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fe f88a 	bl	80031e0 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	; 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e1e7      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050da:	4b6c      	ldr	r3, [pc, #432]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0xe8>
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d063      	beq.n	80051be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f6:	4b65      	ldr	r3, [pc, #404]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005102:	4b62      	ldr	r3, [pc, #392]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800510a:	2b08      	cmp	r3, #8
 800510c:	d11c      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510e:	4b5f      	ldr	r3, [pc, #380]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d116      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511a:	4b5c      	ldr	r3, [pc, #368]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e1bb      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b56      	ldr	r3, [pc, #344]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4952      	ldr	r1, [pc, #328]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	e03a      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d020      	beq.n	8005192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005150:	4b4f      	ldr	r3, [pc, #316]	; (8005290 <HAL_RCC_OscConfig+0x2b0>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fe f843 	bl	80031e0 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515e:	f7fe f83f 	bl	80031e0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e19c      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005170:	4b46      	ldr	r3, [pc, #280]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517c:	4b43      	ldr	r3, [pc, #268]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4940      	ldr	r1, [pc, #256]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]
 8005190:	e015      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005192:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <HAL_RCC_OscConfig+0x2b0>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fe f822 	bl	80031e0 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fe f81e 	bl	80031e0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e17b      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d030      	beq.n	800522c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d2:	4b30      	ldr	r3, [pc, #192]	; (8005294 <HAL_RCC_OscConfig+0x2b4>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fe f802 	bl	80031e0 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e0:	f7fd fffe 	bl	80031e0 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e15b      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x200>
 80051fe:	e015      	b.n	800522c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005200:	4b24      	ldr	r3, [pc, #144]	; (8005294 <HAL_RCC_OscConfig+0x2b4>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fd ffeb 	bl	80031e0 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800520e:	f7fd ffe7 	bl	80031e0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e144      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005220:	4b1a      	ldr	r3, [pc, #104]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80a0 	beq.w	800537a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10f      	bne.n	800526a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	4a0e      	ldr	r2, [pc, #56]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 8005254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005258:	6413      	str	r3, [r2, #64]	; 0x40
 800525a:	4b0c      	ldr	r3, [pc, #48]	; (800528c <HAL_RCC_OscConfig+0x2ac>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526a:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <HAL_RCC_OscConfig+0x2b8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d121      	bne.n	80052ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005276:	4b08      	ldr	r3, [pc, #32]	; (8005298 <HAL_RCC_OscConfig+0x2b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a07      	ldr	r2, [pc, #28]	; (8005298 <HAL_RCC_OscConfig+0x2b8>)
 800527c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005282:	f7fd ffad 	bl	80031e0 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005288:	e011      	b.n	80052ae <HAL_RCC_OscConfig+0x2ce>
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800
 8005290:	42470000 	.word	0x42470000
 8005294:	42470e80 	.word	0x42470e80
 8005298:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529c:	f7fd ffa0 	bl	80031e0 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e0fd      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <HAL_RCC_OscConfig+0x4d4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_OscConfig+0x2f0>
 80052c2:	4b7d      	ldr	r3, [pc, #500]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	4a7c      	ldr	r2, [pc, #496]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6713      	str	r3, [r2, #112]	; 0x70
 80052ce:	e01c      	b.n	800530a <HAL_RCC_OscConfig+0x32a>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	d10c      	bne.n	80052f2 <HAL_RCC_OscConfig+0x312>
 80052d8:	4b77      	ldr	r3, [pc, #476]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	4a76      	ldr	r2, [pc, #472]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052de:	f043 0304 	orr.w	r3, r3, #4
 80052e2:	6713      	str	r3, [r2, #112]	; 0x70
 80052e4:	4b74      	ldr	r3, [pc, #464]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	4a73      	ldr	r2, [pc, #460]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	6713      	str	r3, [r2, #112]	; 0x70
 80052f0:	e00b      	b.n	800530a <HAL_RCC_OscConfig+0x32a>
 80052f2:	4b71      	ldr	r3, [pc, #452]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	4a70      	ldr	r2, [pc, #448]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70
 80052fe:	4b6e      	ldr	r3, [pc, #440]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	4a6d      	ldr	r2, [pc, #436]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005304:	f023 0304 	bic.w	r3, r3, #4
 8005308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d015      	beq.n	800533e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005312:	f7fd ff65 	bl	80031e0 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005318:	e00a      	b.n	8005330 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800531a:	f7fd ff61 	bl	80031e0 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	; 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e0bc      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005330:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0ee      	beq.n	800531a <HAL_RCC_OscConfig+0x33a>
 800533c:	e014      	b.n	8005368 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533e:	f7fd ff4f 	bl	80031e0 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005344:	e00a      	b.n	800535c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005346:	f7fd ff4b 	bl	80031e0 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0a6      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535c:	4b56      	ldr	r3, [pc, #344]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ee      	bne.n	8005346 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d105      	bne.n	800537a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536e:	4b52      	ldr	r3, [pc, #328]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	4a51      	ldr	r2, [pc, #324]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8092 	beq.w	80054a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005384:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 030c 	and.w	r3, r3, #12
 800538c:	2b08      	cmp	r3, #8
 800538e:	d05c      	beq.n	800544a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b02      	cmp	r3, #2
 8005396:	d141      	bne.n	800541c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005398:	4b48      	ldr	r3, [pc, #288]	; (80054bc <HAL_RCC_OscConfig+0x4dc>)
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539e:	f7fd ff1f 	bl	80031e0 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a6:	f7fd ff1b 	bl	80031e0 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e078      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b8:	4b3f      	ldr	r3, [pc, #252]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f0      	bne.n	80053a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	019b      	lsls	r3, r3, #6
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	3b01      	subs	r3, #1
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	061b      	lsls	r3, r3, #24
 80053e8:	4933      	ldr	r1, [pc, #204]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ee:	4b33      	ldr	r3, [pc, #204]	; (80054bc <HAL_RCC_OscConfig+0x4dc>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f4:	f7fd fef4 	bl	80031e0 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053fc:	f7fd fef0 	bl	80031e0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e04d      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540e:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x41c>
 800541a:	e045      	b.n	80054a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <HAL_RCC_OscConfig+0x4dc>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005422:	f7fd fedd 	bl	80031e0 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542a:	f7fd fed9 	bl	80031e0 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e036      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543c:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x44a>
 8005448:	e02e      	b.n	80054a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e029      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <HAL_RCC_OscConfig+0x4d8>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	429a      	cmp	r2, r3
 8005468:	d11c      	bne.n	80054a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d115      	bne.n	80054a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800547e:	4013      	ands	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005484:	4293      	cmp	r3, r2
 8005486:	d10d      	bne.n	80054a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d106      	bne.n	80054a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40007000 	.word	0x40007000
 80054b8:	40023800 	.word	0x40023800
 80054bc:	42470060 	.word	0x42470060

080054c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0cc      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054d4:	4b68      	ldr	r3, [pc, #416]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d90c      	bls.n	80054fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b65      	ldr	r3, [pc, #404]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b63      	ldr	r3, [pc, #396]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0b8      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005514:	4b59      	ldr	r3, [pc, #356]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4a58      	ldr	r2, [pc, #352]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800551e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800552c:	4b53      	ldr	r3, [pc, #332]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4a52      	ldr	r2, [pc, #328]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005538:	4b50      	ldr	r3, [pc, #320]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	494d      	ldr	r1, [pc, #308]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d044      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d119      	bne.n	800559e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07f      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d003      	beq.n	800557e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800557a:	2b03      	cmp	r3, #3
 800557c:	d107      	bne.n	800558e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557e:	4b3f      	ldr	r3, [pc, #252]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e06f      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558e:	4b3b      	ldr	r3, [pc, #236]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e067      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800559e:	4b37      	ldr	r3, [pc, #220]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f023 0203 	bic.w	r2, r3, #3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4934      	ldr	r1, [pc, #208]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055b0:	f7fd fe16 	bl	80031e0 <HAL_GetTick>
 80055b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b6:	e00a      	b.n	80055ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b8:	f7fd fe12 	bl	80031e0 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e04f      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ce:	4b2b      	ldr	r3, [pc, #172]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 020c 	and.w	r2, r3, #12
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	429a      	cmp	r2, r3
 80055de:	d1eb      	bne.n	80055b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d20c      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b22      	ldr	r3, [pc, #136]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d001      	beq.n	8005608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e032      	b.n	800566e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005614:	4b19      	ldr	r3, [pc, #100]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4916      	ldr	r1, [pc, #88]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005632:	4b12      	ldr	r3, [pc, #72]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	490e      	ldr	r1, [pc, #56]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005646:	f000 f821 	bl	800568c <HAL_RCC_GetSysClockFreq>
 800564a:	4601      	mov	r1, r0
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <HAL_RCC_ClockConfig+0x1c0>)
 8005658:	5cd3      	ldrb	r3, [r2, r3]
 800565a:	fa21 f303 	lsr.w	r3, r1, r3
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <HAL_RCC_ClockConfig+0x1c4>)
 8005660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <HAL_RCC_ClockConfig+0x1c8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd fd76 	bl	8003158 <HAL_InitTick>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023c00 	.word	0x40023c00
 800567c:	40023800 	.word	0x40023800
 8005680:	0800a7f4 	.word	0x0800a7f4
 8005684:	20000010 	.word	0x20000010
 8005688:	20000014 	.word	0x20000014

0800568c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800568c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	2300      	movs	r3, #0
 800569c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a2:	4b63      	ldr	r3, [pc, #396]	; (8005830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d007      	beq.n	80056be <HAL_RCC_GetSysClockFreq+0x32>
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d008      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0x38>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 80b4 	bne.w	8005820 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056b8:	4b5e      	ldr	r3, [pc, #376]	; (8005834 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80056ba:	60bb      	str	r3, [r7, #8]
       break;
 80056bc:	e0b3      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056be:	4b5e      	ldr	r3, [pc, #376]	; (8005838 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80056c0:	60bb      	str	r3, [r7, #8]
      break;
 80056c2:	e0b0      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c4:	4b5a      	ldr	r3, [pc, #360]	; (8005830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ce:	4b58      	ldr	r3, [pc, #352]	; (8005830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04a      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056da:	4b55      	ldr	r3, [pc, #340]	; (8005830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	099b      	lsrs	r3, r3, #6
 80056e0:	f04f 0400 	mov.w	r4, #0
 80056e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	ea03 0501 	and.w	r5, r3, r1
 80056f0:	ea04 0602 	and.w	r6, r4, r2
 80056f4:	4629      	mov	r1, r5
 80056f6:	4632      	mov	r2, r6
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	f04f 0400 	mov.w	r4, #0
 8005700:	0154      	lsls	r4, r2, #5
 8005702:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005706:	014b      	lsls	r3, r1, #5
 8005708:	4619      	mov	r1, r3
 800570a:	4622      	mov	r2, r4
 800570c:	1b49      	subs	r1, r1, r5
 800570e:	eb62 0206 	sbc.w	r2, r2, r6
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	f04f 0400 	mov.w	r4, #0
 800571a:	0194      	lsls	r4, r2, #6
 800571c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005720:	018b      	lsls	r3, r1, #6
 8005722:	1a5b      	subs	r3, r3, r1
 8005724:	eb64 0402 	sbc.w	r4, r4, r2
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	00e2      	lsls	r2, r4, #3
 8005732:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005736:	00d9      	lsls	r1, r3, #3
 8005738:	460b      	mov	r3, r1
 800573a:	4614      	mov	r4, r2
 800573c:	195b      	adds	r3, r3, r5
 800573e:	eb44 0406 	adc.w	r4, r4, r6
 8005742:	f04f 0100 	mov.w	r1, #0
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	0262      	lsls	r2, r4, #9
 800574c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005750:	0259      	lsls	r1, r3, #9
 8005752:	460b      	mov	r3, r1
 8005754:	4614      	mov	r4, r2
 8005756:	4618      	mov	r0, r3
 8005758:	4621      	mov	r1, r4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f04f 0400 	mov.w	r4, #0
 8005760:	461a      	mov	r2, r3
 8005762:	4623      	mov	r3, r4
 8005764:	f7fb fa90 	bl	8000c88 <__aeabi_uldivmod>
 8005768:	4603      	mov	r3, r0
 800576a:	460c      	mov	r4, r1
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e049      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005770:	4b2f      	ldr	r3, [pc, #188]	; (8005830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	099b      	lsrs	r3, r3, #6
 8005776:	f04f 0400 	mov.w	r4, #0
 800577a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	ea03 0501 	and.w	r5, r3, r1
 8005786:	ea04 0602 	and.w	r6, r4, r2
 800578a:	4629      	mov	r1, r5
 800578c:	4632      	mov	r2, r6
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	f04f 0400 	mov.w	r4, #0
 8005796:	0154      	lsls	r4, r2, #5
 8005798:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800579c:	014b      	lsls	r3, r1, #5
 800579e:	4619      	mov	r1, r3
 80057a0:	4622      	mov	r2, r4
 80057a2:	1b49      	subs	r1, r1, r5
 80057a4:	eb62 0206 	sbc.w	r2, r2, r6
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	f04f 0400 	mov.w	r4, #0
 80057b0:	0194      	lsls	r4, r2, #6
 80057b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80057b6:	018b      	lsls	r3, r1, #6
 80057b8:	1a5b      	subs	r3, r3, r1
 80057ba:	eb64 0402 	sbc.w	r4, r4, r2
 80057be:	f04f 0100 	mov.w	r1, #0
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	00e2      	lsls	r2, r4, #3
 80057c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80057cc:	00d9      	lsls	r1, r3, #3
 80057ce:	460b      	mov	r3, r1
 80057d0:	4614      	mov	r4, r2
 80057d2:	195b      	adds	r3, r3, r5
 80057d4:	eb44 0406 	adc.w	r4, r4, r6
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	02a2      	lsls	r2, r4, #10
 80057e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80057e6:	0299      	lsls	r1, r3, #10
 80057e8:	460b      	mov	r3, r1
 80057ea:	4614      	mov	r4, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	4621      	mov	r1, r4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f04f 0400 	mov.w	r4, #0
 80057f6:	461a      	mov	r2, r3
 80057f8:	4623      	mov	r3, r4
 80057fa:	f7fb fa45 	bl	8000c88 <__aeabi_uldivmod>
 80057fe:	4603      	mov	r3, r0
 8005800:	460c      	mov	r4, r1
 8005802:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	3301      	adds	r3, #1
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	60bb      	str	r3, [r7, #8]
      break;
 800581e:	e002      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005822:	60bb      	str	r3, [r7, #8]
      break;
 8005824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005826:	68bb      	ldr	r3, [r7, #8]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005830:	40023800 	.word	0x40023800
 8005834:	00f42400 	.word	0x00f42400
 8005838:	007a1200 	.word	0x007a1200

0800583c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005840:	4b03      	ldr	r3, [pc, #12]	; (8005850 <HAL_RCC_GetHCLKFreq+0x14>)
 8005842:	681b      	ldr	r3, [r3, #0]
}
 8005844:	4618      	mov	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	20000010 	.word	0x20000010

08005854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005858:	f7ff fff0 	bl	800583c <HAL_RCC_GetHCLKFreq>
 800585c:	4601      	mov	r1, r0
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	0a9b      	lsrs	r3, r3, #10
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	4a03      	ldr	r2, [pc, #12]	; (8005878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005870:	4618      	mov	r0, r3
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40023800 	.word	0x40023800
 8005878:	0800a804 	.word	0x0800a804

0800587c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e056      	b.n	800593c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fd fa25 	bl	8002cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	ea42 0103 	orr.w	r1, r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	0c1b      	lsrs	r3, r3, #16
 800590c:	f003 0104 	and.w	r1, r3, #4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69da      	ldr	r2, [r3, #28]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800592a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e01d      	b.n	8005992 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fd fa0c 	bl	8002d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f000 fa1e 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d122      	bne.n	8005a3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d11b      	bne.n	8005a3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f06f 0202 	mvn.w	r2, #2
 8005a0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f9af 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005a2a:	e005      	b.n	8005a38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f9a1 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f9b2 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d122      	bne.n	8005a92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d11b      	bne.n	8005a92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f06f 0204 	mvn.w	r2, #4
 8005a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f985 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005a7e:	e005      	b.n	8005a8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f977 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f988 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d122      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d11b      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0208 	mvn.w	r2, #8
 8005ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2204      	movs	r2, #4
 8005abc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f95b 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005ad2:	e005      	b.n	8005ae0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f94d 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f95e 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d122      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d11b      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0210 	mvn.w	r2, #16
 8005b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2208      	movs	r2, #8
 8005b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f931 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005b26:	e005      	b.n	8005b34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f923 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f934 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10e      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d107      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f06f 0201 	mvn.w	r2, #1
 8005b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f8fd 	bl	8005d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b80      	cmp	r3, #128	; 0x80
 8005b72:	d10e      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fad9 	bl	8006144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d10e      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d107      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8f9 	bl	8005db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d10e      	bne.n	8005bea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d107      	bne.n	8005bea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f06f 0220 	mvn.w	r2, #32
 8005be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 faa3 	bl	8006130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_TIM_ConfigClockSource+0x18>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e0a6      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x166>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c30:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d067      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0x120>
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d80b      	bhi.n	8005c5e <HAL_TIM_ConfigClockSource+0x6c>
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d073      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x140>
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d802      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x62>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06f      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c52:	e078      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d06c      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x140>
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	d06a      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c5c:	e073      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c5e:	2b70      	cmp	r3, #112	; 0x70
 8005c60:	d00d      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x8c>
 8005c62:	2b70      	cmp	r3, #112	; 0x70
 8005c64:	d804      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x7e>
 8005c66:	2b50      	cmp	r3, #80	; 0x50
 8005c68:	d033      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0xe0>
 8005c6a:	2b60      	cmp	r3, #96	; 0x60
 8005c6c:	d041      	beq.n	8005cf2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c6e:	e06a      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d066      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x152>
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7a:	d017      	beq.n	8005cac <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c7c:	e063      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6899      	ldr	r1, [r3, #8]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f000 f9b3 	bl	8005ff8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	609a      	str	r2, [r3, #8]
      break;
 8005caa:	e04c      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	6899      	ldr	r1, [r3, #8]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f000 f99c 	bl	8005ff8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cce:	609a      	str	r2, [r3, #8]
      break;
 8005cd0:	e039      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	6859      	ldr	r1, [r3, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f000 f910 	bl	8005f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2150      	movs	r1, #80	; 0x50
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f969 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005cf0:	e029      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6859      	ldr	r1, [r3, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f000 f92f 	bl	8005f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2160      	movs	r1, #96	; 0x60
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f959 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d10:	e019      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 f8f0 	bl	8005f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2140      	movs	r1, #64	; 0x40
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f949 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d30:	e009      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f000 f940 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d42:	e000      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a40      	ldr	r2, [pc, #256]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d00f      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3c      	ldr	r2, [pc, #240]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3b      	ldr	r2, [pc, #236]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2f      	ldr	r2, [pc, #188]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d02b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d027      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d023      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01f      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d017      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a26      	ldr	r2, [pc, #152]	; (8005ef4 <TIM_Base_SetConfig+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <TIM_Base_SetConfig+0x134>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a24      	ldr	r2, [pc, #144]	; (8005efc <TIM_Base_SetConfig+0x138>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <TIM_Base_SetConfig+0x13c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d108      	bne.n	8005e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_Base_SetConfig+0xf8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d103      	bne.n	8005ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	615a      	str	r2, [r3, #20]
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800
 8005ef8:	40001800 	.word	0x40001800
 8005efc:	40001c00 	.word	0x40001c00
 8005f00:	40002000 	.word	0x40002000

08005f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 030a 	bic.w	r3, r3, #10
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0210 	bic.w	r2, r3, #16
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	031b      	lsls	r3, r3, #12
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f043 0307 	orr.w	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	021a      	lsls	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	431a      	orrs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e05a      	b.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609c:	d01d      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1a      	ldr	r2, [pc, #104]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10c      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40001800 	.word	0x40001800

08006130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <__errno>:
 8006158:	4b01      	ldr	r3, [pc, #4]	; (8006160 <__errno+0x8>)
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	2000001c 	.word	0x2000001c

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4e0d      	ldr	r6, [pc, #52]	; (800619c <__libc_init_array+0x38>)
 8006168:	4c0d      	ldr	r4, [pc, #52]	; (80061a0 <__libc_init_array+0x3c>)
 800616a:	1ba4      	subs	r4, r4, r6
 800616c:	10a4      	asrs	r4, r4, #2
 800616e:	2500      	movs	r5, #0
 8006170:	42a5      	cmp	r5, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	4e0b      	ldr	r6, [pc, #44]	; (80061a4 <__libc_init_array+0x40>)
 8006176:	4c0c      	ldr	r4, [pc, #48]	; (80061a8 <__libc_init_array+0x44>)
 8006178:	f004 faac 	bl	800a6d4 <_init>
 800617c:	1ba4      	subs	r4, r4, r6
 800617e:	10a4      	asrs	r4, r4, #2
 8006180:	2500      	movs	r5, #0
 8006182:	42a5      	cmp	r5, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800618c:	4798      	blx	r3
 800618e:	3501      	adds	r5, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006196:	4798      	blx	r3
 8006198:	3501      	adds	r5, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	0800ab14 	.word	0x0800ab14
 80061a0:	0800ab14 	.word	0x0800ab14
 80061a4:	0800ab14 	.word	0x0800ab14
 80061a8:	0800ab18 	.word	0x0800ab18

080061ac <__itoa>:
 80061ac:	1e93      	subs	r3, r2, #2
 80061ae:	2b22      	cmp	r3, #34	; 0x22
 80061b0:	b510      	push	{r4, lr}
 80061b2:	460c      	mov	r4, r1
 80061b4:	d904      	bls.n	80061c0 <__itoa+0x14>
 80061b6:	2300      	movs	r3, #0
 80061b8:	700b      	strb	r3, [r1, #0]
 80061ba:	461c      	mov	r4, r3
 80061bc:	4620      	mov	r0, r4
 80061be:	bd10      	pop	{r4, pc}
 80061c0:	2a0a      	cmp	r2, #10
 80061c2:	d109      	bne.n	80061d8 <__itoa+0x2c>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	da07      	bge.n	80061d8 <__itoa+0x2c>
 80061c8:	232d      	movs	r3, #45	; 0x2d
 80061ca:	700b      	strb	r3, [r1, #0]
 80061cc:	4240      	negs	r0, r0
 80061ce:	2101      	movs	r1, #1
 80061d0:	4421      	add	r1, r4
 80061d2:	f001 fd1f 	bl	8007c14 <__utoa>
 80061d6:	e7f1      	b.n	80061bc <__itoa+0x10>
 80061d8:	2100      	movs	r1, #0
 80061da:	e7f9      	b.n	80061d0 <__itoa+0x24>

080061dc <itoa>:
 80061dc:	f7ff bfe6 	b.w	80061ac <__itoa>

080061e0 <memset>:
 80061e0:	4402      	add	r2, r0
 80061e2:	4603      	mov	r3, r0
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d100      	bne.n	80061ea <memset+0xa>
 80061e8:	4770      	bx	lr
 80061ea:	f803 1b01 	strb.w	r1, [r3], #1
 80061ee:	e7f9      	b.n	80061e4 <memset+0x4>

080061f0 <__cvt>:
 80061f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	ec55 4b10 	vmov	r4, r5, d0
 80061f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80061fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061fe:	2d00      	cmp	r5, #0
 8006200:	460e      	mov	r6, r1
 8006202:	4691      	mov	r9, r2
 8006204:	4619      	mov	r1, r3
 8006206:	bfb8      	it	lt
 8006208:	4622      	movlt	r2, r4
 800620a:	462b      	mov	r3, r5
 800620c:	f027 0720 	bic.w	r7, r7, #32
 8006210:	bfbb      	ittet	lt
 8006212:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006216:	461d      	movlt	r5, r3
 8006218:	2300      	movge	r3, #0
 800621a:	232d      	movlt	r3, #45	; 0x2d
 800621c:	bfb8      	it	lt
 800621e:	4614      	movlt	r4, r2
 8006220:	2f46      	cmp	r7, #70	; 0x46
 8006222:	700b      	strb	r3, [r1, #0]
 8006224:	d004      	beq.n	8006230 <__cvt+0x40>
 8006226:	2f45      	cmp	r7, #69	; 0x45
 8006228:	d100      	bne.n	800622c <__cvt+0x3c>
 800622a:	3601      	adds	r6, #1
 800622c:	2102      	movs	r1, #2
 800622e:	e000      	b.n	8006232 <__cvt+0x42>
 8006230:	2103      	movs	r1, #3
 8006232:	ab03      	add	r3, sp, #12
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	ab02      	add	r3, sp, #8
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4632      	mov	r2, r6
 800623c:	4653      	mov	r3, sl
 800623e:	ec45 4b10 	vmov	d0, r4, r5
 8006242:	f001 fdb1 	bl	8007da8 <_dtoa_r>
 8006246:	2f47      	cmp	r7, #71	; 0x47
 8006248:	4680      	mov	r8, r0
 800624a:	d102      	bne.n	8006252 <__cvt+0x62>
 800624c:	f019 0f01 	tst.w	r9, #1
 8006250:	d026      	beq.n	80062a0 <__cvt+0xb0>
 8006252:	2f46      	cmp	r7, #70	; 0x46
 8006254:	eb08 0906 	add.w	r9, r8, r6
 8006258:	d111      	bne.n	800627e <__cvt+0x8e>
 800625a:	f898 3000 	ldrb.w	r3, [r8]
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	d10a      	bne.n	8006278 <__cvt+0x88>
 8006262:	2200      	movs	r2, #0
 8006264:	2300      	movs	r3, #0
 8006266:	4620      	mov	r0, r4
 8006268:	4629      	mov	r1, r5
 800626a:	f7fa fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800626e:	b918      	cbnz	r0, 8006278 <__cvt+0x88>
 8006270:	f1c6 0601 	rsb	r6, r6, #1
 8006274:	f8ca 6000 	str.w	r6, [sl]
 8006278:	f8da 3000 	ldr.w	r3, [sl]
 800627c:	4499      	add	r9, r3
 800627e:	2200      	movs	r2, #0
 8006280:	2300      	movs	r3, #0
 8006282:	4620      	mov	r0, r4
 8006284:	4629      	mov	r1, r5
 8006286:	f7fa fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800628a:	b938      	cbnz	r0, 800629c <__cvt+0xac>
 800628c:	2230      	movs	r2, #48	; 0x30
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	454b      	cmp	r3, r9
 8006292:	d205      	bcs.n	80062a0 <__cvt+0xb0>
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	9103      	str	r1, [sp, #12]
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e7f8      	b.n	800628e <__cvt+0x9e>
 800629c:	f8cd 900c 	str.w	r9, [sp, #12]
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062a4:	eba3 0308 	sub.w	r3, r3, r8
 80062a8:	4640      	mov	r0, r8
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	b004      	add	sp, #16
 80062ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080062b2 <__exponent>:
 80062b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062b4:	2900      	cmp	r1, #0
 80062b6:	4604      	mov	r4, r0
 80062b8:	bfba      	itte	lt
 80062ba:	4249      	neglt	r1, r1
 80062bc:	232d      	movlt	r3, #45	; 0x2d
 80062be:	232b      	movge	r3, #43	; 0x2b
 80062c0:	2909      	cmp	r1, #9
 80062c2:	f804 2b02 	strb.w	r2, [r4], #2
 80062c6:	7043      	strb	r3, [r0, #1]
 80062c8:	dd20      	ble.n	800630c <__exponent+0x5a>
 80062ca:	f10d 0307 	add.w	r3, sp, #7
 80062ce:	461f      	mov	r7, r3
 80062d0:	260a      	movs	r6, #10
 80062d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80062d6:	fb06 1115 	mls	r1, r6, r5, r1
 80062da:	3130      	adds	r1, #48	; 0x30
 80062dc:	2d09      	cmp	r5, #9
 80062de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062e2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80062e6:	4629      	mov	r1, r5
 80062e8:	dc09      	bgt.n	80062fe <__exponent+0x4c>
 80062ea:	3130      	adds	r1, #48	; 0x30
 80062ec:	3b02      	subs	r3, #2
 80062ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80062f2:	42bb      	cmp	r3, r7
 80062f4:	4622      	mov	r2, r4
 80062f6:	d304      	bcc.n	8006302 <__exponent+0x50>
 80062f8:	1a10      	subs	r0, r2, r0
 80062fa:	b003      	add	sp, #12
 80062fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fe:	4613      	mov	r3, r2
 8006300:	e7e7      	b.n	80062d2 <__exponent+0x20>
 8006302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006306:	f804 2b01 	strb.w	r2, [r4], #1
 800630a:	e7f2      	b.n	80062f2 <__exponent+0x40>
 800630c:	2330      	movs	r3, #48	; 0x30
 800630e:	4419      	add	r1, r3
 8006310:	7083      	strb	r3, [r0, #2]
 8006312:	1d02      	adds	r2, r0, #4
 8006314:	70c1      	strb	r1, [r0, #3]
 8006316:	e7ef      	b.n	80062f8 <__exponent+0x46>

08006318 <_printf_float>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	b08d      	sub	sp, #52	; 0x34
 800631e:	460c      	mov	r4, r1
 8006320:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006324:	4616      	mov	r6, r2
 8006326:	461f      	mov	r7, r3
 8006328:	4605      	mov	r5, r0
 800632a:	f002 fe21 	bl	8008f70 <_localeconv_r>
 800632e:	6803      	ldr	r3, [r0, #0]
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	4618      	mov	r0, r3
 8006334:	f7f9 ff4c 	bl	80001d0 <strlen>
 8006338:	2300      	movs	r3, #0
 800633a:	930a      	str	r3, [sp, #40]	; 0x28
 800633c:	f8d8 3000 	ldr.w	r3, [r8]
 8006340:	9005      	str	r0, [sp, #20]
 8006342:	3307      	adds	r3, #7
 8006344:	f023 0307 	bic.w	r3, r3, #7
 8006348:	f103 0208 	add.w	r2, r3, #8
 800634c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006350:	f8d4 b000 	ldr.w	fp, [r4]
 8006354:	f8c8 2000 	str.w	r2, [r8]
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006360:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006364:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006368:	9307      	str	r3, [sp, #28]
 800636a:	f8cd 8018 	str.w	r8, [sp, #24]
 800636e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006372:	4ba7      	ldr	r3, [pc, #668]	; (8006610 <_printf_float+0x2f8>)
 8006374:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006378:	f7fa fbd8 	bl	8000b2c <__aeabi_dcmpun>
 800637c:	bb70      	cbnz	r0, 80063dc <_printf_float+0xc4>
 800637e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006382:	4ba3      	ldr	r3, [pc, #652]	; (8006610 <_printf_float+0x2f8>)
 8006384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006388:	f7fa fbb2 	bl	8000af0 <__aeabi_dcmple>
 800638c:	bb30      	cbnz	r0, 80063dc <_printf_float+0xc4>
 800638e:	2200      	movs	r2, #0
 8006390:	2300      	movs	r3, #0
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7fa fba1 	bl	8000adc <__aeabi_dcmplt>
 800639a:	b110      	cbz	r0, 80063a2 <_printf_float+0x8a>
 800639c:	232d      	movs	r3, #45	; 0x2d
 800639e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a2:	4a9c      	ldr	r2, [pc, #624]	; (8006614 <_printf_float+0x2fc>)
 80063a4:	4b9c      	ldr	r3, [pc, #624]	; (8006618 <_printf_float+0x300>)
 80063a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80063aa:	bf8c      	ite	hi
 80063ac:	4690      	movhi	r8, r2
 80063ae:	4698      	movls	r8, r3
 80063b0:	2303      	movs	r3, #3
 80063b2:	f02b 0204 	bic.w	r2, fp, #4
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	f04f 0900 	mov.w	r9, #0
 80063be:	9700      	str	r7, [sp, #0]
 80063c0:	4633      	mov	r3, r6
 80063c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80063c4:	4621      	mov	r1, r4
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 f9e6 	bl	8006798 <_printf_common>
 80063cc:	3001      	adds	r0, #1
 80063ce:	f040 808d 	bne.w	80064ec <_printf_float+0x1d4>
 80063d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063d6:	b00d      	add	sp, #52	; 0x34
 80063d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063dc:	4642      	mov	r2, r8
 80063de:	464b      	mov	r3, r9
 80063e0:	4640      	mov	r0, r8
 80063e2:	4649      	mov	r1, r9
 80063e4:	f7fa fba2 	bl	8000b2c <__aeabi_dcmpun>
 80063e8:	b110      	cbz	r0, 80063f0 <_printf_float+0xd8>
 80063ea:	4a8c      	ldr	r2, [pc, #560]	; (800661c <_printf_float+0x304>)
 80063ec:	4b8c      	ldr	r3, [pc, #560]	; (8006620 <_printf_float+0x308>)
 80063ee:	e7da      	b.n	80063a6 <_printf_float+0x8e>
 80063f0:	6861      	ldr	r1, [r4, #4]
 80063f2:	1c4b      	adds	r3, r1, #1
 80063f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80063f8:	a80a      	add	r0, sp, #40	; 0x28
 80063fa:	d13e      	bne.n	800647a <_printf_float+0x162>
 80063fc:	2306      	movs	r3, #6
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	2300      	movs	r3, #0
 8006402:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006406:	ab09      	add	r3, sp, #36	; 0x24
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	ec49 8b10 	vmov	d0, r8, r9
 800640e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006412:	6022      	str	r2, [r4, #0]
 8006414:	f8cd a004 	str.w	sl, [sp, #4]
 8006418:	6861      	ldr	r1, [r4, #4]
 800641a:	4628      	mov	r0, r5
 800641c:	f7ff fee8 	bl	80061f0 <__cvt>
 8006420:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006424:	2b47      	cmp	r3, #71	; 0x47
 8006426:	4680      	mov	r8, r0
 8006428:	d109      	bne.n	800643e <_printf_float+0x126>
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	1cd8      	adds	r0, r3, #3
 800642e:	db02      	blt.n	8006436 <_printf_float+0x11e>
 8006430:	6862      	ldr	r2, [r4, #4]
 8006432:	4293      	cmp	r3, r2
 8006434:	dd47      	ble.n	80064c6 <_printf_float+0x1ae>
 8006436:	f1aa 0a02 	sub.w	sl, sl, #2
 800643a:	fa5f fa8a 	uxtb.w	sl, sl
 800643e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006444:	d824      	bhi.n	8006490 <_printf_float+0x178>
 8006446:	3901      	subs	r1, #1
 8006448:	4652      	mov	r2, sl
 800644a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800644e:	9109      	str	r1, [sp, #36]	; 0x24
 8006450:	f7ff ff2f 	bl	80062b2 <__exponent>
 8006454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006456:	1813      	adds	r3, r2, r0
 8006458:	2a01      	cmp	r2, #1
 800645a:	4681      	mov	r9, r0
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	dc02      	bgt.n	8006466 <_printf_float+0x14e>
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	07d1      	lsls	r1, r2, #31
 8006464:	d501      	bpl.n	800646a <_printf_float+0x152>
 8006466:	3301      	adds	r3, #1
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0a5      	beq.n	80063be <_printf_float+0xa6>
 8006472:	232d      	movs	r3, #45	; 0x2d
 8006474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006478:	e7a1      	b.n	80063be <_printf_float+0xa6>
 800647a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800647e:	f000 8177 	beq.w	8006770 <_printf_float+0x458>
 8006482:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006486:	d1bb      	bne.n	8006400 <_printf_float+0xe8>
 8006488:	2900      	cmp	r1, #0
 800648a:	d1b9      	bne.n	8006400 <_printf_float+0xe8>
 800648c:	2301      	movs	r3, #1
 800648e:	e7b6      	b.n	80063fe <_printf_float+0xe6>
 8006490:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006494:	d119      	bne.n	80064ca <_printf_float+0x1b2>
 8006496:	2900      	cmp	r1, #0
 8006498:	6863      	ldr	r3, [r4, #4]
 800649a:	dd0c      	ble.n	80064b6 <_printf_float+0x19e>
 800649c:	6121      	str	r1, [r4, #16]
 800649e:	b913      	cbnz	r3, 80064a6 <_printf_float+0x18e>
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	07d2      	lsls	r2, r2, #31
 80064a4:	d502      	bpl.n	80064ac <_printf_float+0x194>
 80064a6:	3301      	adds	r3, #1
 80064a8:	440b      	add	r3, r1
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80064b0:	f04f 0900 	mov.w	r9, #0
 80064b4:	e7d9      	b.n	800646a <_printf_float+0x152>
 80064b6:	b913      	cbnz	r3, 80064be <_printf_float+0x1a6>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	07d0      	lsls	r0, r2, #31
 80064bc:	d501      	bpl.n	80064c2 <_printf_float+0x1aa>
 80064be:	3302      	adds	r3, #2
 80064c0:	e7f3      	b.n	80064aa <_printf_float+0x192>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e7f1      	b.n	80064aa <_printf_float+0x192>
 80064c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80064ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80064ce:	4293      	cmp	r3, r2
 80064d0:	db05      	blt.n	80064de <_printf_float+0x1c6>
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	07d1      	lsls	r1, r2, #31
 80064d8:	d5e8      	bpl.n	80064ac <_printf_float+0x194>
 80064da:	3301      	adds	r3, #1
 80064dc:	e7e5      	b.n	80064aa <_printf_float+0x192>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bfd4      	ite	le
 80064e2:	f1c3 0302 	rsble	r3, r3, #2
 80064e6:	2301      	movgt	r3, #1
 80064e8:	4413      	add	r3, r2
 80064ea:	e7de      	b.n	80064aa <_printf_float+0x192>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	055a      	lsls	r2, r3, #21
 80064f0:	d407      	bmi.n	8006502 <_printf_float+0x1ea>
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	4642      	mov	r2, r8
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b8      	blx	r7
 80064fc:	3001      	adds	r0, #1
 80064fe:	d12b      	bne.n	8006558 <_printf_float+0x240>
 8006500:	e767      	b.n	80063d2 <_printf_float+0xba>
 8006502:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006506:	f240 80dc 	bls.w	80066c2 <_printf_float+0x3aa>
 800650a:	2200      	movs	r2, #0
 800650c:	2300      	movs	r3, #0
 800650e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006512:	f7fa fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006516:	2800      	cmp	r0, #0
 8006518:	d033      	beq.n	8006582 <_printf_float+0x26a>
 800651a:	2301      	movs	r3, #1
 800651c:	4a41      	ldr	r2, [pc, #260]	; (8006624 <_printf_float+0x30c>)
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	47b8      	blx	r7
 8006524:	3001      	adds	r0, #1
 8006526:	f43f af54 	beq.w	80063d2 <_printf_float+0xba>
 800652a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800652e:	429a      	cmp	r2, r3
 8006530:	db02      	blt.n	8006538 <_printf_float+0x220>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	07d8      	lsls	r0, r3, #31
 8006536:	d50f      	bpl.n	8006558 <_printf_float+0x240>
 8006538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f af45 	beq.w	80063d2 <_printf_float+0xba>
 8006548:	f04f 0800 	mov.w	r8, #0
 800654c:	f104 091a 	add.w	r9, r4, #26
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	3b01      	subs	r3, #1
 8006554:	4543      	cmp	r3, r8
 8006556:	dc09      	bgt.n	800656c <_printf_float+0x254>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	079b      	lsls	r3, r3, #30
 800655c:	f100 8103 	bmi.w	8006766 <_printf_float+0x44e>
 8006560:	68e0      	ldr	r0, [r4, #12]
 8006562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006564:	4298      	cmp	r0, r3
 8006566:	bfb8      	it	lt
 8006568:	4618      	movlt	r0, r3
 800656a:	e734      	b.n	80063d6 <_printf_float+0xbe>
 800656c:	2301      	movs	r3, #1
 800656e:	464a      	mov	r2, r9
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f af2b 	beq.w	80063d2 <_printf_float+0xba>
 800657c:	f108 0801 	add.w	r8, r8, #1
 8006580:	e7e6      	b.n	8006550 <_printf_float+0x238>
 8006582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	dc2b      	bgt.n	80065e0 <_printf_float+0x2c8>
 8006588:	2301      	movs	r3, #1
 800658a:	4a26      	ldr	r2, [pc, #152]	; (8006624 <_printf_float+0x30c>)
 800658c:	4631      	mov	r1, r6
 800658e:	4628      	mov	r0, r5
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	f43f af1d 	beq.w	80063d2 <_printf_float+0xba>
 8006598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659a:	b923      	cbnz	r3, 80065a6 <_printf_float+0x28e>
 800659c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659e:	b913      	cbnz	r3, 80065a6 <_printf_float+0x28e>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	07d9      	lsls	r1, r3, #31
 80065a4:	d5d8      	bpl.n	8006558 <_printf_float+0x240>
 80065a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af0e 	beq.w	80063d2 <_printf_float+0xba>
 80065b6:	f04f 0900 	mov.w	r9, #0
 80065ba:	f104 0a1a 	add.w	sl, r4, #26
 80065be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c0:	425b      	negs	r3, r3
 80065c2:	454b      	cmp	r3, r9
 80065c4:	dc01      	bgt.n	80065ca <_printf_float+0x2b2>
 80065c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c8:	e794      	b.n	80064f4 <_printf_float+0x1dc>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	f43f aefc 	beq.w	80063d2 <_printf_float+0xba>
 80065da:	f109 0901 	add.w	r9, r9, #1
 80065de:	e7ee      	b.n	80065be <_printf_float+0x2a6>
 80065e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065e4:	429a      	cmp	r2, r3
 80065e6:	bfa8      	it	ge
 80065e8:	461a      	movge	r2, r3
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	4691      	mov	r9, r2
 80065ee:	dd07      	ble.n	8006600 <_printf_float+0x2e8>
 80065f0:	4613      	mov	r3, r2
 80065f2:	4631      	mov	r1, r6
 80065f4:	4642      	mov	r2, r8
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f aee9 	beq.w	80063d2 <_printf_float+0xba>
 8006600:	f104 031a 	add.w	r3, r4, #26
 8006604:	f04f 0b00 	mov.w	fp, #0
 8006608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800660c:	9306      	str	r3, [sp, #24]
 800660e:	e015      	b.n	800663c <_printf_float+0x324>
 8006610:	7fefffff 	.word	0x7fefffff
 8006614:	0800a810 	.word	0x0800a810
 8006618:	0800a80c 	.word	0x0800a80c
 800661c:	0800a818 	.word	0x0800a818
 8006620:	0800a814 	.word	0x0800a814
 8006624:	0800a81c 	.word	0x0800a81c
 8006628:	2301      	movs	r3, #1
 800662a:	9a06      	ldr	r2, [sp, #24]
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f aecd 	beq.w	80063d2 <_printf_float+0xba>
 8006638:	f10b 0b01 	add.w	fp, fp, #1
 800663c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006640:	ebaa 0309 	sub.w	r3, sl, r9
 8006644:	455b      	cmp	r3, fp
 8006646:	dcef      	bgt.n	8006628 <_printf_float+0x310>
 8006648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800664c:	429a      	cmp	r2, r3
 800664e:	44d0      	add	r8, sl
 8006650:	db15      	blt.n	800667e <_printf_float+0x366>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	07da      	lsls	r2, r3, #31
 8006656:	d412      	bmi.n	800667e <_printf_float+0x366>
 8006658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800665c:	eba3 020a 	sub.w	r2, r3, sl
 8006660:	eba3 0a01 	sub.w	sl, r3, r1
 8006664:	4592      	cmp	sl, r2
 8006666:	bfa8      	it	ge
 8006668:	4692      	movge	sl, r2
 800666a:	f1ba 0f00 	cmp.w	sl, #0
 800666e:	dc0e      	bgt.n	800668e <_printf_float+0x376>
 8006670:	f04f 0800 	mov.w	r8, #0
 8006674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006678:	f104 091a 	add.w	r9, r4, #26
 800667c:	e019      	b.n	80066b2 <_printf_float+0x39a>
 800667e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	47b8      	blx	r7
 8006688:	3001      	adds	r0, #1
 800668a:	d1e5      	bne.n	8006658 <_printf_float+0x340>
 800668c:	e6a1      	b.n	80063d2 <_printf_float+0xba>
 800668e:	4653      	mov	r3, sl
 8006690:	4642      	mov	r2, r8
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	d1e9      	bne.n	8006670 <_printf_float+0x358>
 800669c:	e699      	b.n	80063d2 <_printf_float+0xba>
 800669e:	2301      	movs	r3, #1
 80066a0:	464a      	mov	r2, r9
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	f43f ae92 	beq.w	80063d2 <_printf_float+0xba>
 80066ae:	f108 0801 	add.w	r8, r8, #1
 80066b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	eba3 030a 	sub.w	r3, r3, sl
 80066bc:	4543      	cmp	r3, r8
 80066be:	dcee      	bgt.n	800669e <_printf_float+0x386>
 80066c0:	e74a      	b.n	8006558 <_printf_float+0x240>
 80066c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c4:	2a01      	cmp	r2, #1
 80066c6:	dc01      	bgt.n	80066cc <_printf_float+0x3b4>
 80066c8:	07db      	lsls	r3, r3, #31
 80066ca:	d53a      	bpl.n	8006742 <_printf_float+0x42a>
 80066cc:	2301      	movs	r3, #1
 80066ce:	4642      	mov	r2, r8
 80066d0:	4631      	mov	r1, r6
 80066d2:	4628      	mov	r0, r5
 80066d4:	47b8      	blx	r7
 80066d6:	3001      	adds	r0, #1
 80066d8:	f43f ae7b 	beq.w	80063d2 <_printf_float+0xba>
 80066dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e0:	4631      	mov	r1, r6
 80066e2:	4628      	mov	r0, r5
 80066e4:	47b8      	blx	r7
 80066e6:	3001      	adds	r0, #1
 80066e8:	f108 0801 	add.w	r8, r8, #1
 80066ec:	f43f ae71 	beq.w	80063d2 <_printf_float+0xba>
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	2200      	movs	r2, #0
 80066f4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80066f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066fc:	2300      	movs	r3, #0
 80066fe:	f7fa f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006702:	b9c8      	cbnz	r0, 8006738 <_printf_float+0x420>
 8006704:	4653      	mov	r3, sl
 8006706:	4642      	mov	r2, r8
 8006708:	4631      	mov	r1, r6
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	d10e      	bne.n	8006730 <_printf_float+0x418>
 8006712:	e65e      	b.n	80063d2 <_printf_float+0xba>
 8006714:	2301      	movs	r3, #1
 8006716:	4652      	mov	r2, sl
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f ae57 	beq.w	80063d2 <_printf_float+0xba>
 8006724:	f108 0801 	add.w	r8, r8, #1
 8006728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672a:	3b01      	subs	r3, #1
 800672c:	4543      	cmp	r3, r8
 800672e:	dcf1      	bgt.n	8006714 <_printf_float+0x3fc>
 8006730:	464b      	mov	r3, r9
 8006732:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006736:	e6de      	b.n	80064f6 <_printf_float+0x1de>
 8006738:	f04f 0800 	mov.w	r8, #0
 800673c:	f104 0a1a 	add.w	sl, r4, #26
 8006740:	e7f2      	b.n	8006728 <_printf_float+0x410>
 8006742:	2301      	movs	r3, #1
 8006744:	e7df      	b.n	8006706 <_printf_float+0x3ee>
 8006746:	2301      	movs	r3, #1
 8006748:	464a      	mov	r2, r9
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	f43f ae3e 	beq.w	80063d2 <_printf_float+0xba>
 8006756:	f108 0801 	add.w	r8, r8, #1
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	4543      	cmp	r3, r8
 8006762:	dcf0      	bgt.n	8006746 <_printf_float+0x42e>
 8006764:	e6fc      	b.n	8006560 <_printf_float+0x248>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	f104 0919 	add.w	r9, r4, #25
 800676e:	e7f4      	b.n	800675a <_printf_float+0x442>
 8006770:	2900      	cmp	r1, #0
 8006772:	f43f ae8b 	beq.w	800648c <_printf_float+0x174>
 8006776:	2300      	movs	r3, #0
 8006778:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800677c:	ab09      	add	r3, sp, #36	; 0x24
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	ec49 8b10 	vmov	d0, r8, r9
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	f8cd a004 	str.w	sl, [sp, #4]
 800678a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800678e:	4628      	mov	r0, r5
 8006790:	f7ff fd2e 	bl	80061f0 <__cvt>
 8006794:	4680      	mov	r8, r0
 8006796:	e648      	b.n	800642a <_printf_float+0x112>

08006798 <_printf_common>:
 8006798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800679c:	4691      	mov	r9, r2
 800679e:	461f      	mov	r7, r3
 80067a0:	688a      	ldr	r2, [r1, #8]
 80067a2:	690b      	ldr	r3, [r1, #16]
 80067a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067a8:	4293      	cmp	r3, r2
 80067aa:	bfb8      	it	lt
 80067ac:	4613      	movlt	r3, r2
 80067ae:	f8c9 3000 	str.w	r3, [r9]
 80067b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067b6:	4606      	mov	r6, r0
 80067b8:	460c      	mov	r4, r1
 80067ba:	b112      	cbz	r2, 80067c2 <_printf_common+0x2a>
 80067bc:	3301      	adds	r3, #1
 80067be:	f8c9 3000 	str.w	r3, [r9]
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	0699      	lsls	r1, r3, #26
 80067c6:	bf42      	ittt	mi
 80067c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80067cc:	3302      	addmi	r3, #2
 80067ce:	f8c9 3000 	strmi.w	r3, [r9]
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	f015 0506 	ands.w	r5, r5, #6
 80067d8:	d107      	bne.n	80067ea <_printf_common+0x52>
 80067da:	f104 0a19 	add.w	sl, r4, #25
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	f8d9 2000 	ldr.w	r2, [r9]
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	42ab      	cmp	r3, r5
 80067e8:	dc28      	bgt.n	800683c <_printf_common+0xa4>
 80067ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	3300      	adds	r3, #0
 80067f2:	bf18      	it	ne
 80067f4:	2301      	movne	r3, #1
 80067f6:	0692      	lsls	r2, r2, #26
 80067f8:	d42d      	bmi.n	8006856 <_printf_common+0xbe>
 80067fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067fe:	4639      	mov	r1, r7
 8006800:	4630      	mov	r0, r6
 8006802:	47c0      	blx	r8
 8006804:	3001      	adds	r0, #1
 8006806:	d020      	beq.n	800684a <_printf_common+0xb2>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	68e5      	ldr	r5, [r4, #12]
 800680c:	f8d9 2000 	ldr.w	r2, [r9]
 8006810:	f003 0306 	and.w	r3, r3, #6
 8006814:	2b04      	cmp	r3, #4
 8006816:	bf08      	it	eq
 8006818:	1aad      	subeq	r5, r5, r2
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	6922      	ldr	r2, [r4, #16]
 800681e:	bf0c      	ite	eq
 8006820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006824:	2500      	movne	r5, #0
 8006826:	4293      	cmp	r3, r2
 8006828:	bfc4      	itt	gt
 800682a:	1a9b      	subgt	r3, r3, r2
 800682c:	18ed      	addgt	r5, r5, r3
 800682e:	f04f 0900 	mov.w	r9, #0
 8006832:	341a      	adds	r4, #26
 8006834:	454d      	cmp	r5, r9
 8006836:	d11a      	bne.n	800686e <_printf_common+0xd6>
 8006838:	2000      	movs	r0, #0
 800683a:	e008      	b.n	800684e <_printf_common+0xb6>
 800683c:	2301      	movs	r3, #1
 800683e:	4652      	mov	r2, sl
 8006840:	4639      	mov	r1, r7
 8006842:	4630      	mov	r0, r6
 8006844:	47c0      	blx	r8
 8006846:	3001      	adds	r0, #1
 8006848:	d103      	bne.n	8006852 <_printf_common+0xba>
 800684a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006852:	3501      	adds	r5, #1
 8006854:	e7c3      	b.n	80067de <_printf_common+0x46>
 8006856:	18e1      	adds	r1, r4, r3
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	2030      	movs	r0, #48	; 0x30
 800685c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006860:	4422      	add	r2, r4
 8006862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800686a:	3302      	adds	r3, #2
 800686c:	e7c5      	b.n	80067fa <_printf_common+0x62>
 800686e:	2301      	movs	r3, #1
 8006870:	4622      	mov	r2, r4
 8006872:	4639      	mov	r1, r7
 8006874:	4630      	mov	r0, r6
 8006876:	47c0      	blx	r8
 8006878:	3001      	adds	r0, #1
 800687a:	d0e6      	beq.n	800684a <_printf_common+0xb2>
 800687c:	f109 0901 	add.w	r9, r9, #1
 8006880:	e7d8      	b.n	8006834 <_printf_common+0x9c>
	...

08006884 <_printf_i>:
 8006884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006888:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800688c:	460c      	mov	r4, r1
 800688e:	7e09      	ldrb	r1, [r1, #24]
 8006890:	b085      	sub	sp, #20
 8006892:	296e      	cmp	r1, #110	; 0x6e
 8006894:	4617      	mov	r7, r2
 8006896:	4606      	mov	r6, r0
 8006898:	4698      	mov	r8, r3
 800689a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800689c:	f000 80b3 	beq.w	8006a06 <_printf_i+0x182>
 80068a0:	d822      	bhi.n	80068e8 <_printf_i+0x64>
 80068a2:	2963      	cmp	r1, #99	; 0x63
 80068a4:	d036      	beq.n	8006914 <_printf_i+0x90>
 80068a6:	d80a      	bhi.n	80068be <_printf_i+0x3a>
 80068a8:	2900      	cmp	r1, #0
 80068aa:	f000 80b9 	beq.w	8006a20 <_printf_i+0x19c>
 80068ae:	2958      	cmp	r1, #88	; 0x58
 80068b0:	f000 8083 	beq.w	80069ba <_printf_i+0x136>
 80068b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80068bc:	e032      	b.n	8006924 <_printf_i+0xa0>
 80068be:	2964      	cmp	r1, #100	; 0x64
 80068c0:	d001      	beq.n	80068c6 <_printf_i+0x42>
 80068c2:	2969      	cmp	r1, #105	; 0x69
 80068c4:	d1f6      	bne.n	80068b4 <_printf_i+0x30>
 80068c6:	6820      	ldr	r0, [r4, #0]
 80068c8:	6813      	ldr	r3, [r2, #0]
 80068ca:	0605      	lsls	r5, r0, #24
 80068cc:	f103 0104 	add.w	r1, r3, #4
 80068d0:	d52a      	bpl.n	8006928 <_printf_i+0xa4>
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6011      	str	r1, [r2, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da03      	bge.n	80068e2 <_printf_i+0x5e>
 80068da:	222d      	movs	r2, #45	; 0x2d
 80068dc:	425b      	negs	r3, r3
 80068de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068e2:	486f      	ldr	r0, [pc, #444]	; (8006aa0 <_printf_i+0x21c>)
 80068e4:	220a      	movs	r2, #10
 80068e6:	e039      	b.n	800695c <_printf_i+0xd8>
 80068e8:	2973      	cmp	r1, #115	; 0x73
 80068ea:	f000 809d 	beq.w	8006a28 <_printf_i+0x1a4>
 80068ee:	d808      	bhi.n	8006902 <_printf_i+0x7e>
 80068f0:	296f      	cmp	r1, #111	; 0x6f
 80068f2:	d020      	beq.n	8006936 <_printf_i+0xb2>
 80068f4:	2970      	cmp	r1, #112	; 0x70
 80068f6:	d1dd      	bne.n	80068b4 <_printf_i+0x30>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	f043 0320 	orr.w	r3, r3, #32
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	e003      	b.n	800690a <_printf_i+0x86>
 8006902:	2975      	cmp	r1, #117	; 0x75
 8006904:	d017      	beq.n	8006936 <_printf_i+0xb2>
 8006906:	2978      	cmp	r1, #120	; 0x78
 8006908:	d1d4      	bne.n	80068b4 <_printf_i+0x30>
 800690a:	2378      	movs	r3, #120	; 0x78
 800690c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006910:	4864      	ldr	r0, [pc, #400]	; (8006aa4 <_printf_i+0x220>)
 8006912:	e055      	b.n	80069c0 <_printf_i+0x13c>
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	1d19      	adds	r1, r3, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6011      	str	r1, [r2, #0]
 800691c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006924:	2301      	movs	r3, #1
 8006926:	e08c      	b.n	8006a42 <_printf_i+0x1be>
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6011      	str	r1, [r2, #0]
 800692c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006930:	bf18      	it	ne
 8006932:	b21b      	sxthne	r3, r3
 8006934:	e7cf      	b.n	80068d6 <_printf_i+0x52>
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	6825      	ldr	r5, [r4, #0]
 800693a:	1d18      	adds	r0, r3, #4
 800693c:	6010      	str	r0, [r2, #0]
 800693e:	0628      	lsls	r0, r5, #24
 8006940:	d501      	bpl.n	8006946 <_printf_i+0xc2>
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	e002      	b.n	800694c <_printf_i+0xc8>
 8006946:	0668      	lsls	r0, r5, #25
 8006948:	d5fb      	bpl.n	8006942 <_printf_i+0xbe>
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	4854      	ldr	r0, [pc, #336]	; (8006aa0 <_printf_i+0x21c>)
 800694e:	296f      	cmp	r1, #111	; 0x6f
 8006950:	bf14      	ite	ne
 8006952:	220a      	movne	r2, #10
 8006954:	2208      	moveq	r2, #8
 8006956:	2100      	movs	r1, #0
 8006958:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800695c:	6865      	ldr	r5, [r4, #4]
 800695e:	60a5      	str	r5, [r4, #8]
 8006960:	2d00      	cmp	r5, #0
 8006962:	f2c0 8095 	blt.w	8006a90 <_printf_i+0x20c>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	f021 0104 	bic.w	r1, r1, #4
 800696c:	6021      	str	r1, [r4, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d13d      	bne.n	80069ee <_printf_i+0x16a>
 8006972:	2d00      	cmp	r5, #0
 8006974:	f040 808e 	bne.w	8006a94 <_printf_i+0x210>
 8006978:	4665      	mov	r5, ip
 800697a:	2a08      	cmp	r2, #8
 800697c:	d10b      	bne.n	8006996 <_printf_i+0x112>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	07db      	lsls	r3, r3, #31
 8006982:	d508      	bpl.n	8006996 <_printf_i+0x112>
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	6862      	ldr	r2, [r4, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	bfde      	ittt	le
 800698c:	2330      	movle	r3, #48	; 0x30
 800698e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006992:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006996:	ebac 0305 	sub.w	r3, ip, r5
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	f8cd 8000 	str.w	r8, [sp]
 80069a0:	463b      	mov	r3, r7
 80069a2:	aa03      	add	r2, sp, #12
 80069a4:	4621      	mov	r1, r4
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff fef6 	bl	8006798 <_printf_common>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d14d      	bne.n	8006a4c <_printf_i+0x1c8>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069b4:	b005      	add	sp, #20
 80069b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069ba:	4839      	ldr	r0, [pc, #228]	; (8006aa0 <_printf_i+0x21c>)
 80069bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80069c0:	6813      	ldr	r3, [r2, #0]
 80069c2:	6821      	ldr	r1, [r4, #0]
 80069c4:	1d1d      	adds	r5, r3, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6015      	str	r5, [r2, #0]
 80069ca:	060a      	lsls	r2, r1, #24
 80069cc:	d50b      	bpl.n	80069e6 <_printf_i+0x162>
 80069ce:	07ca      	lsls	r2, r1, #31
 80069d0:	bf44      	itt	mi
 80069d2:	f041 0120 	orrmi.w	r1, r1, #32
 80069d6:	6021      	strmi	r1, [r4, #0]
 80069d8:	b91b      	cbnz	r3, 80069e2 <_printf_i+0x15e>
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	f022 0220 	bic.w	r2, r2, #32
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	2210      	movs	r2, #16
 80069e4:	e7b7      	b.n	8006956 <_printf_i+0xd2>
 80069e6:	064d      	lsls	r5, r1, #25
 80069e8:	bf48      	it	mi
 80069ea:	b29b      	uxthmi	r3, r3
 80069ec:	e7ef      	b.n	80069ce <_printf_i+0x14a>
 80069ee:	4665      	mov	r5, ip
 80069f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f4:	fb02 3311 	mls	r3, r2, r1, r3
 80069f8:	5cc3      	ldrb	r3, [r0, r3]
 80069fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069fe:	460b      	mov	r3, r1
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d1f5      	bne.n	80069f0 <_printf_i+0x16c>
 8006a04:	e7b9      	b.n	800697a <_printf_i+0xf6>
 8006a06:	6813      	ldr	r3, [r2, #0]
 8006a08:	6825      	ldr	r5, [r4, #0]
 8006a0a:	6961      	ldr	r1, [r4, #20]
 8006a0c:	1d18      	adds	r0, r3, #4
 8006a0e:	6010      	str	r0, [r2, #0]
 8006a10:	0628      	lsls	r0, r5, #24
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	d501      	bpl.n	8006a1a <_printf_i+0x196>
 8006a16:	6019      	str	r1, [r3, #0]
 8006a18:	e002      	b.n	8006a20 <_printf_i+0x19c>
 8006a1a:	066a      	lsls	r2, r5, #25
 8006a1c:	d5fb      	bpl.n	8006a16 <_printf_i+0x192>
 8006a1e:	8019      	strh	r1, [r3, #0]
 8006a20:	2300      	movs	r3, #0
 8006a22:	6123      	str	r3, [r4, #16]
 8006a24:	4665      	mov	r5, ip
 8006a26:	e7b9      	b.n	800699c <_printf_i+0x118>
 8006a28:	6813      	ldr	r3, [r2, #0]
 8006a2a:	1d19      	adds	r1, r3, #4
 8006a2c:	6011      	str	r1, [r2, #0]
 8006a2e:	681d      	ldr	r5, [r3, #0]
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	2100      	movs	r1, #0
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7f9 fbd3 	bl	80001e0 <memchr>
 8006a3a:	b108      	cbz	r0, 8006a40 <_printf_i+0x1bc>
 8006a3c:	1b40      	subs	r0, r0, r5
 8006a3e:	6060      	str	r0, [r4, #4]
 8006a40:	6863      	ldr	r3, [r4, #4]
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	2300      	movs	r3, #0
 8006a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4a:	e7a7      	b.n	800699c <_printf_i+0x118>
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	462a      	mov	r2, r5
 8006a50:	4639      	mov	r1, r7
 8006a52:	4630      	mov	r0, r6
 8006a54:	47c0      	blx	r8
 8006a56:	3001      	adds	r0, #1
 8006a58:	d0aa      	beq.n	80069b0 <_printf_i+0x12c>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	079b      	lsls	r3, r3, #30
 8006a5e:	d413      	bmi.n	8006a88 <_printf_i+0x204>
 8006a60:	68e0      	ldr	r0, [r4, #12]
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	4298      	cmp	r0, r3
 8006a66:	bfb8      	it	lt
 8006a68:	4618      	movlt	r0, r3
 8006a6a:	e7a3      	b.n	80069b4 <_printf_i+0x130>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	464a      	mov	r2, r9
 8006a70:	4639      	mov	r1, r7
 8006a72:	4630      	mov	r0, r6
 8006a74:	47c0      	blx	r8
 8006a76:	3001      	adds	r0, #1
 8006a78:	d09a      	beq.n	80069b0 <_printf_i+0x12c>
 8006a7a:	3501      	adds	r5, #1
 8006a7c:	68e3      	ldr	r3, [r4, #12]
 8006a7e:	9a03      	ldr	r2, [sp, #12]
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	42ab      	cmp	r3, r5
 8006a84:	dcf2      	bgt.n	8006a6c <_printf_i+0x1e8>
 8006a86:	e7eb      	b.n	8006a60 <_printf_i+0x1dc>
 8006a88:	2500      	movs	r5, #0
 8006a8a:	f104 0919 	add.w	r9, r4, #25
 8006a8e:	e7f5      	b.n	8006a7c <_printf_i+0x1f8>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1ac      	bne.n	80069ee <_printf_i+0x16a>
 8006a94:	7803      	ldrb	r3, [r0, #0]
 8006a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a9e:	e76c      	b.n	800697a <_printf_i+0xf6>
 8006aa0:	0800a81e 	.word	0x0800a81e
 8006aa4:	0800a82f 	.word	0x0800a82f

08006aa8 <_scanf_float>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	469a      	mov	sl, r3
 8006aae:	688b      	ldr	r3, [r1, #8]
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	1e5a      	subs	r2, r3, #1
 8006ab4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ab8:	b087      	sub	sp, #28
 8006aba:	bf83      	ittte	hi
 8006abc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006ac0:	189b      	addhi	r3, r3, r2
 8006ac2:	9301      	strhi	r3, [sp, #4]
 8006ac4:	2300      	movls	r3, #0
 8006ac6:	bf86      	itte	hi
 8006ac8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006acc:	608b      	strhi	r3, [r1, #8]
 8006ace:	9301      	strls	r3, [sp, #4]
 8006ad0:	680b      	ldr	r3, [r1, #0]
 8006ad2:	4688      	mov	r8, r1
 8006ad4:	f04f 0b00 	mov.w	fp, #0
 8006ad8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006adc:	f848 3b1c 	str.w	r3, [r8], #28
 8006ae0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4645      	mov	r5, r8
 8006aea:	465a      	mov	r2, fp
 8006aec:	46d9      	mov	r9, fp
 8006aee:	f8cd b008 	str.w	fp, [sp, #8]
 8006af2:	68a1      	ldr	r1, [r4, #8]
 8006af4:	b181      	cbz	r1, 8006b18 <_scanf_float+0x70>
 8006af6:	6833      	ldr	r3, [r6, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b49      	cmp	r3, #73	; 0x49
 8006afc:	d071      	beq.n	8006be2 <_scanf_float+0x13a>
 8006afe:	d84d      	bhi.n	8006b9c <_scanf_float+0xf4>
 8006b00:	2b39      	cmp	r3, #57	; 0x39
 8006b02:	d840      	bhi.n	8006b86 <_scanf_float+0xde>
 8006b04:	2b31      	cmp	r3, #49	; 0x31
 8006b06:	f080 8088 	bcs.w	8006c1a <_scanf_float+0x172>
 8006b0a:	2b2d      	cmp	r3, #45	; 0x2d
 8006b0c:	f000 8090 	beq.w	8006c30 <_scanf_float+0x188>
 8006b10:	d815      	bhi.n	8006b3e <_scanf_float+0x96>
 8006b12:	2b2b      	cmp	r3, #43	; 0x2b
 8006b14:	f000 808c 	beq.w	8006c30 <_scanf_float+0x188>
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	d003      	beq.n	8006b26 <_scanf_float+0x7e>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	3a01      	subs	r2, #1
 8006b28:	2a01      	cmp	r2, #1
 8006b2a:	f200 80ea 	bhi.w	8006d02 <_scanf_float+0x25a>
 8006b2e:	4545      	cmp	r5, r8
 8006b30:	f200 80dc 	bhi.w	8006cec <_scanf_float+0x244>
 8006b34:	2601      	movs	r6, #1
 8006b36:	4630      	mov	r0, r6
 8006b38:	b007      	add	sp, #28
 8006b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b40:	f000 809f 	beq.w	8006c82 <_scanf_float+0x1da>
 8006b44:	2b30      	cmp	r3, #48	; 0x30
 8006b46:	d1e7      	bne.n	8006b18 <_scanf_float+0x70>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006b4e:	d064      	beq.n	8006c1a <_scanf_float+0x172>
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006b56:	6020      	str	r0, [r4, #0]
 8006b58:	f109 0901 	add.w	r9, r9, #1
 8006b5c:	b11b      	cbz	r3, 8006b66 <_scanf_float+0xbe>
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	3101      	adds	r1, #1
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	60a1      	str	r1, [r4, #8]
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	60a3      	str	r3, [r4, #8]
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	6873      	ldr	r3, [r6, #4]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	6073      	str	r3, [r6, #4]
 8006b7a:	f340 80ac 	ble.w	8006cd6 <_scanf_float+0x22e>
 8006b7e:	6833      	ldr	r3, [r6, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	6033      	str	r3, [r6, #0]
 8006b84:	e7b5      	b.n	8006af2 <_scanf_float+0x4a>
 8006b86:	2b45      	cmp	r3, #69	; 0x45
 8006b88:	f000 8085 	beq.w	8006c96 <_scanf_float+0x1ee>
 8006b8c:	2b46      	cmp	r3, #70	; 0x46
 8006b8e:	d06a      	beq.n	8006c66 <_scanf_float+0x1be>
 8006b90:	2b41      	cmp	r3, #65	; 0x41
 8006b92:	d1c1      	bne.n	8006b18 <_scanf_float+0x70>
 8006b94:	2a01      	cmp	r2, #1
 8006b96:	d1bf      	bne.n	8006b18 <_scanf_float+0x70>
 8006b98:	2202      	movs	r2, #2
 8006b9a:	e046      	b.n	8006c2a <_scanf_float+0x182>
 8006b9c:	2b65      	cmp	r3, #101	; 0x65
 8006b9e:	d07a      	beq.n	8006c96 <_scanf_float+0x1ee>
 8006ba0:	d818      	bhi.n	8006bd4 <_scanf_float+0x12c>
 8006ba2:	2b54      	cmp	r3, #84	; 0x54
 8006ba4:	d066      	beq.n	8006c74 <_scanf_float+0x1cc>
 8006ba6:	d811      	bhi.n	8006bcc <_scanf_float+0x124>
 8006ba8:	2b4e      	cmp	r3, #78	; 0x4e
 8006baa:	d1b5      	bne.n	8006b18 <_scanf_float+0x70>
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	d146      	bne.n	8006c3e <_scanf_float+0x196>
 8006bb0:	f1b9 0f00 	cmp.w	r9, #0
 8006bb4:	d145      	bne.n	8006c42 <_scanf_float+0x19a>
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006bbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006bc0:	d13f      	bne.n	8006c42 <_scanf_float+0x19a>
 8006bc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006bc6:	6021      	str	r1, [r4, #0]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	e02e      	b.n	8006c2a <_scanf_float+0x182>
 8006bcc:	2b59      	cmp	r3, #89	; 0x59
 8006bce:	d01e      	beq.n	8006c0e <_scanf_float+0x166>
 8006bd0:	2b61      	cmp	r3, #97	; 0x61
 8006bd2:	e7de      	b.n	8006b92 <_scanf_float+0xea>
 8006bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8006bd6:	d0e9      	beq.n	8006bac <_scanf_float+0x104>
 8006bd8:	d815      	bhi.n	8006c06 <_scanf_float+0x15e>
 8006bda:	2b66      	cmp	r3, #102	; 0x66
 8006bdc:	d043      	beq.n	8006c66 <_scanf_float+0x1be>
 8006bde:	2b69      	cmp	r3, #105	; 0x69
 8006be0:	d19a      	bne.n	8006b18 <_scanf_float+0x70>
 8006be2:	f1bb 0f00 	cmp.w	fp, #0
 8006be6:	d138      	bne.n	8006c5a <_scanf_float+0x1b2>
 8006be8:	f1b9 0f00 	cmp.w	r9, #0
 8006bec:	d197      	bne.n	8006b1e <_scanf_float+0x76>
 8006bee:	6821      	ldr	r1, [r4, #0]
 8006bf0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006bf4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006bf8:	d195      	bne.n	8006b26 <_scanf_float+0x7e>
 8006bfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006bfe:	6021      	str	r1, [r4, #0]
 8006c00:	f04f 0b01 	mov.w	fp, #1
 8006c04:	e011      	b.n	8006c2a <_scanf_float+0x182>
 8006c06:	2b74      	cmp	r3, #116	; 0x74
 8006c08:	d034      	beq.n	8006c74 <_scanf_float+0x1cc>
 8006c0a:	2b79      	cmp	r3, #121	; 0x79
 8006c0c:	d184      	bne.n	8006b18 <_scanf_float+0x70>
 8006c0e:	f1bb 0f07 	cmp.w	fp, #7
 8006c12:	d181      	bne.n	8006b18 <_scanf_float+0x70>
 8006c14:	f04f 0b08 	mov.w	fp, #8
 8006c18:	e007      	b.n	8006c2a <_scanf_float+0x182>
 8006c1a:	eb12 0f0b 	cmn.w	r2, fp
 8006c1e:	f47f af7b 	bne.w	8006b18 <_scanf_float+0x70>
 8006c22:	6821      	ldr	r1, [r4, #0]
 8006c24:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006c28:	6021      	str	r1, [r4, #0]
 8006c2a:	702b      	strb	r3, [r5, #0]
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	e79a      	b.n	8006b66 <_scanf_float+0xbe>
 8006c30:	6821      	ldr	r1, [r4, #0]
 8006c32:	0608      	lsls	r0, r1, #24
 8006c34:	f57f af70 	bpl.w	8006b18 <_scanf_float+0x70>
 8006c38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006c3c:	e7f4      	b.n	8006c28 <_scanf_float+0x180>
 8006c3e:	2a02      	cmp	r2, #2
 8006c40:	d047      	beq.n	8006cd2 <_scanf_float+0x22a>
 8006c42:	f1bb 0f01 	cmp.w	fp, #1
 8006c46:	d003      	beq.n	8006c50 <_scanf_float+0x1a8>
 8006c48:	f1bb 0f04 	cmp.w	fp, #4
 8006c4c:	f47f af64 	bne.w	8006b18 <_scanf_float+0x70>
 8006c50:	f10b 0b01 	add.w	fp, fp, #1
 8006c54:	fa5f fb8b 	uxtb.w	fp, fp
 8006c58:	e7e7      	b.n	8006c2a <_scanf_float+0x182>
 8006c5a:	f1bb 0f03 	cmp.w	fp, #3
 8006c5e:	d0f7      	beq.n	8006c50 <_scanf_float+0x1a8>
 8006c60:	f1bb 0f05 	cmp.w	fp, #5
 8006c64:	e7f2      	b.n	8006c4c <_scanf_float+0x1a4>
 8006c66:	f1bb 0f02 	cmp.w	fp, #2
 8006c6a:	f47f af55 	bne.w	8006b18 <_scanf_float+0x70>
 8006c6e:	f04f 0b03 	mov.w	fp, #3
 8006c72:	e7da      	b.n	8006c2a <_scanf_float+0x182>
 8006c74:	f1bb 0f06 	cmp.w	fp, #6
 8006c78:	f47f af4e 	bne.w	8006b18 <_scanf_float+0x70>
 8006c7c:	f04f 0b07 	mov.w	fp, #7
 8006c80:	e7d3      	b.n	8006c2a <_scanf_float+0x182>
 8006c82:	6821      	ldr	r1, [r4, #0]
 8006c84:	0588      	lsls	r0, r1, #22
 8006c86:	f57f af47 	bpl.w	8006b18 <_scanf_float+0x70>
 8006c8a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006c8e:	6021      	str	r1, [r4, #0]
 8006c90:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c94:	e7c9      	b.n	8006c2a <_scanf_float+0x182>
 8006c96:	6821      	ldr	r1, [r4, #0]
 8006c98:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006c9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006ca0:	d006      	beq.n	8006cb0 <_scanf_float+0x208>
 8006ca2:	0548      	lsls	r0, r1, #21
 8006ca4:	f57f af38 	bpl.w	8006b18 <_scanf_float+0x70>
 8006ca8:	f1b9 0f00 	cmp.w	r9, #0
 8006cac:	f43f af3b 	beq.w	8006b26 <_scanf_float+0x7e>
 8006cb0:	0588      	lsls	r0, r1, #22
 8006cb2:	bf58      	it	pl
 8006cb4:	9802      	ldrpl	r0, [sp, #8]
 8006cb6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006cba:	bf58      	it	pl
 8006cbc:	eba9 0000 	subpl.w	r0, r9, r0
 8006cc0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006cc4:	bf58      	it	pl
 8006cc6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006cca:	6021      	str	r1, [r4, #0]
 8006ccc:	f04f 0900 	mov.w	r9, #0
 8006cd0:	e7ab      	b.n	8006c2a <_scanf_float+0x182>
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	e7a9      	b.n	8006c2a <_scanf_float+0x182>
 8006cd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cda:	9205      	str	r2, [sp, #20]
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4638      	mov	r0, r7
 8006ce0:	4798      	blx	r3
 8006ce2:	9a05      	ldr	r2, [sp, #20]
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f43f af04 	beq.w	8006af2 <_scanf_float+0x4a>
 8006cea:	e715      	b.n	8006b18 <_scanf_float+0x70>
 8006cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	4798      	blx	r3
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	e715      	b.n	8006b2e <_scanf_float+0x86>
 8006d02:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006d06:	2b06      	cmp	r3, #6
 8006d08:	d80a      	bhi.n	8006d20 <_scanf_float+0x278>
 8006d0a:	f1bb 0f02 	cmp.w	fp, #2
 8006d0e:	d968      	bls.n	8006de2 <_scanf_float+0x33a>
 8006d10:	f1ab 0b03 	sub.w	fp, fp, #3
 8006d14:	fa5f fb8b 	uxtb.w	fp, fp
 8006d18:	eba5 0b0b 	sub.w	fp, r5, fp
 8006d1c:	455d      	cmp	r5, fp
 8006d1e:	d14b      	bne.n	8006db8 <_scanf_float+0x310>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	05da      	lsls	r2, r3, #23
 8006d24:	d51f      	bpl.n	8006d66 <_scanf_float+0x2be>
 8006d26:	055b      	lsls	r3, r3, #21
 8006d28:	d468      	bmi.n	8006dfc <_scanf_float+0x354>
 8006d2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	2965      	cmp	r1, #101	; 0x65
 8006d32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006d36:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	d00d      	beq.n	8006d5a <_scanf_float+0x2b2>
 8006d3e:	2945      	cmp	r1, #69	; 0x45
 8006d40:	d00b      	beq.n	8006d5a <_scanf_float+0x2b2>
 8006d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d46:	4632      	mov	r2, r6
 8006d48:	4638      	mov	r0, r7
 8006d4a:	4798      	blx	r3
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	f1a5 0b02 	sub.w	fp, r5, #2
 8006d58:	6123      	str	r3, [r4, #16]
 8006d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d5e:	4632      	mov	r2, r6
 8006d60:	4638      	mov	r0, r7
 8006d62:	4798      	blx	r3
 8006d64:	465d      	mov	r5, fp
 8006d66:	6826      	ldr	r6, [r4, #0]
 8006d68:	f016 0610 	ands.w	r6, r6, #16
 8006d6c:	d17a      	bne.n	8006e64 <_scanf_float+0x3bc>
 8006d6e:	702e      	strb	r6, [r5, #0]
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d7a:	d142      	bne.n	8006e02 <_scanf_float+0x35a>
 8006d7c:	9b02      	ldr	r3, [sp, #8]
 8006d7e:	eba9 0303 	sub.w	r3, r9, r3
 8006d82:	425a      	negs	r2, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d149      	bne.n	8006e1c <_scanf_float+0x374>
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f000 fea3 	bl	8007ad8 <_strtod_r>
 8006d92:	6825      	ldr	r5, [r4, #0]
 8006d94:	f8da 3000 	ldr.w	r3, [sl]
 8006d98:	f015 0f02 	tst.w	r5, #2
 8006d9c:	f103 0204 	add.w	r2, r3, #4
 8006da0:	ec59 8b10 	vmov	r8, r9, d0
 8006da4:	f8ca 2000 	str.w	r2, [sl]
 8006da8:	d043      	beq.n	8006e32 <_scanf_float+0x38a>
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	e9c3 8900 	strd	r8, r9, [r3]
 8006db0:	68e3      	ldr	r3, [r4, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60e3      	str	r3, [r4, #12]
 8006db6:	e6be      	b.n	8006b36 <_scanf_float+0x8e>
 8006db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dbc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	4798      	blx	r3
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	6123      	str	r3, [r4, #16]
 8006dcc:	e7a6      	b.n	8006d1c <_scanf_float+0x274>
 8006dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dd2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	4638      	mov	r0, r7
 8006dda:	4798      	blx	r3
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	6123      	str	r3, [r4, #16]
 8006de2:	4545      	cmp	r5, r8
 8006de4:	d8f3      	bhi.n	8006dce <_scanf_float+0x326>
 8006de6:	e6a5      	b.n	8006b34 <_scanf_float+0x8c>
 8006de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006df0:	4632      	mov	r2, r6
 8006df2:	4638      	mov	r0, r7
 8006df4:	4798      	blx	r3
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	4545      	cmp	r5, r8
 8006dfe:	d8f3      	bhi.n	8006de8 <_scanf_float+0x340>
 8006e00:	e698      	b.n	8006b34 <_scanf_float+0x8c>
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0bf      	beq.n	8006d88 <_scanf_float+0x2e0>
 8006e08:	9904      	ldr	r1, [sp, #16]
 8006e0a:	230a      	movs	r3, #10
 8006e0c:	4632      	mov	r2, r6
 8006e0e:	3101      	adds	r1, #1
 8006e10:	4638      	mov	r0, r7
 8006e12:	f000 feed 	bl	8007bf0 <_strtol_r>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	9d04      	ldr	r5, [sp, #16]
 8006e1a:	1ac2      	subs	r2, r0, r3
 8006e1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e20:	429d      	cmp	r5, r3
 8006e22:	bf28      	it	cs
 8006e24:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006e28:	490f      	ldr	r1, [pc, #60]	; (8006e68 <_scanf_float+0x3c0>)
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 f824 	bl	8006e78 <siprintf>
 8006e30:	e7aa      	b.n	8006d88 <_scanf_float+0x2e0>
 8006e32:	f015 0504 	ands.w	r5, r5, #4
 8006e36:	d1b8      	bne.n	8006daa <_scanf_float+0x302>
 8006e38:	681f      	ldr	r7, [r3, #0]
 8006e3a:	ee10 2a10 	vmov	r2, s0
 8006e3e:	464b      	mov	r3, r9
 8006e40:	ee10 0a10 	vmov	r0, s0
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 fe71 	bl	8000b2c <__aeabi_dcmpun>
 8006e4a:	b128      	cbz	r0, 8006e58 <_scanf_float+0x3b0>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f000 f80d 	bl	8006e6c <nanf>
 8006e52:	ed87 0a00 	vstr	s0, [r7]
 8006e56:	e7ab      	b.n	8006db0 <_scanf_float+0x308>
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fec4 	bl	8000be8 <__aeabi_d2f>
 8006e60:	6038      	str	r0, [r7, #0]
 8006e62:	e7a5      	b.n	8006db0 <_scanf_float+0x308>
 8006e64:	2600      	movs	r6, #0
 8006e66:	e666      	b.n	8006b36 <_scanf_float+0x8e>
 8006e68:	0800a840 	.word	0x0800a840

08006e6c <nanf>:
 8006e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e74 <nanf+0x8>
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	7fc00000 	.word	0x7fc00000

08006e78 <siprintf>:
 8006e78:	b40e      	push	{r1, r2, r3}
 8006e7a:	b500      	push	{lr}
 8006e7c:	b09c      	sub	sp, #112	; 0x70
 8006e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e80:	9002      	str	r0, [sp, #8]
 8006e82:	9006      	str	r0, [sp, #24]
 8006e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e88:	4809      	ldr	r0, [pc, #36]	; (8006eb0 <siprintf+0x38>)
 8006e8a:	9107      	str	r1, [sp, #28]
 8006e8c:	9104      	str	r1, [sp, #16]
 8006e8e:	4909      	ldr	r1, [pc, #36]	; (8006eb4 <siprintf+0x3c>)
 8006e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e94:	9105      	str	r1, [sp, #20]
 8006e96:	6800      	ldr	r0, [r0, #0]
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	a902      	add	r1, sp, #8
 8006e9c:	f002 fdaa 	bl	80099f4 <_svfiprintf_r>
 8006ea0:	9b02      	ldr	r3, [sp, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	b01c      	add	sp, #112	; 0x70
 8006ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eac:	b003      	add	sp, #12
 8006eae:	4770      	bx	lr
 8006eb0:	2000001c 	.word	0x2000001c
 8006eb4:	ffff0208 	.word	0xffff0208

08006eb8 <sulp>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	ec45 4b10 	vmov	d0, r4, r5
 8006ec2:	4616      	mov	r6, r2
 8006ec4:	f002 fb52 	bl	800956c <__ulp>
 8006ec8:	ec51 0b10 	vmov	r0, r1, d0
 8006ecc:	b17e      	cbz	r6, 8006eee <sulp+0x36>
 8006ece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd09      	ble.n	8006eee <sulp+0x36>
 8006eda:	051b      	lsls	r3, r3, #20
 8006edc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ee0:	2400      	movs	r4, #0
 8006ee2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	462b      	mov	r3, r5
 8006eea:	f7f9 fb85 	bl	80005f8 <__aeabi_dmul>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}

08006ef0 <_strtod_l>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	461f      	mov	r7, r3
 8006ef6:	b0a1      	sub	sp, #132	; 0x84
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4681      	mov	r9, r0
 8006efc:	4638      	mov	r0, r7
 8006efe:	460e      	mov	r6, r1
 8006f00:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f02:	931c      	str	r3, [sp, #112]	; 0x70
 8006f04:	f002 f831 	bl	8008f6a <__localeconv_l>
 8006f08:	4680      	mov	r8, r0
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	f7f9 f960 	bl	80001d0 <strlen>
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	4604      	mov	r4, r0
 8006f16:	f04f 0b00 	mov.w	fp, #0
 8006f1a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f1e:	781a      	ldrb	r2, [r3, #0]
 8006f20:	2a0d      	cmp	r2, #13
 8006f22:	d832      	bhi.n	8006f8a <_strtod_l+0x9a>
 8006f24:	2a09      	cmp	r2, #9
 8006f26:	d236      	bcs.n	8006f96 <_strtod_l+0xa6>
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d03e      	beq.n	8006faa <_strtod_l+0xba>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006f32:	782b      	ldrb	r3, [r5, #0]
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	f040 80ac 	bne.w	8007092 <_strtod_l+0x1a2>
 8006f3a:	786b      	ldrb	r3, [r5, #1]
 8006f3c:	2b58      	cmp	r3, #88	; 0x58
 8006f3e:	d001      	beq.n	8006f44 <_strtod_l+0x54>
 8006f40:	2b78      	cmp	r3, #120	; 0x78
 8006f42:	d167      	bne.n	8007014 <_strtod_l+0x124>
 8006f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	ab1c      	add	r3, sp, #112	; 0x70
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	9702      	str	r7, [sp, #8]
 8006f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f50:	4a88      	ldr	r2, [pc, #544]	; (8007174 <_strtod_l+0x284>)
 8006f52:	a91b      	add	r1, sp, #108	; 0x6c
 8006f54:	4648      	mov	r0, r9
 8006f56:	f001 fd2e 	bl	80089b6 <__gethex>
 8006f5a:	f010 0407 	ands.w	r4, r0, #7
 8006f5e:	4606      	mov	r6, r0
 8006f60:	d005      	beq.n	8006f6e <_strtod_l+0x7e>
 8006f62:	2c06      	cmp	r4, #6
 8006f64:	d12b      	bne.n	8006fbe <_strtod_l+0xce>
 8006f66:	3501      	adds	r5, #1
 8006f68:	2300      	movs	r3, #0
 8006f6a:	951b      	str	r5, [sp, #108]	; 0x6c
 8006f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8006f6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f040 859a 	bne.w	8007aaa <_strtod_l+0xbba>
 8006f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f78:	b1e3      	cbz	r3, 8006fb4 <_strtod_l+0xc4>
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f80:	ec43 2b10 	vmov	d0, r2, r3
 8006f84:	b021      	add	sp, #132	; 0x84
 8006f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8a:	2a2b      	cmp	r2, #43	; 0x2b
 8006f8c:	d015      	beq.n	8006fba <_strtod_l+0xca>
 8006f8e:	2a2d      	cmp	r2, #45	; 0x2d
 8006f90:	d004      	beq.n	8006f9c <_strtod_l+0xac>
 8006f92:	2a20      	cmp	r2, #32
 8006f94:	d1ca      	bne.n	8006f2c <_strtod_l+0x3c>
 8006f96:	3301      	adds	r3, #1
 8006f98:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f9a:	e7bf      	b.n	8006f1c <_strtod_l+0x2c>
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	920d      	str	r2, [sp, #52]	; 0x34
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	921b      	str	r2, [sp, #108]	; 0x6c
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1c2      	bne.n	8006f30 <_strtod_l+0x40>
 8006faa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fac:	961b      	str	r6, [sp, #108]	; 0x6c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f040 8579 	bne.w	8007aa6 <_strtod_l+0xbb6>
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	465b      	mov	r3, fp
 8006fb8:	e7e2      	b.n	8006f80 <_strtod_l+0x90>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	e7ef      	b.n	8006f9e <_strtod_l+0xae>
 8006fbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006fc0:	b13a      	cbz	r2, 8006fd2 <_strtod_l+0xe2>
 8006fc2:	2135      	movs	r1, #53	; 0x35
 8006fc4:	a81e      	add	r0, sp, #120	; 0x78
 8006fc6:	f002 fbc9 	bl	800975c <__copybits>
 8006fca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fcc:	4648      	mov	r0, r9
 8006fce:	f002 f836 	bl	800903e <_Bfree>
 8006fd2:	3c01      	subs	r4, #1
 8006fd4:	2c04      	cmp	r4, #4
 8006fd6:	d806      	bhi.n	8006fe6 <_strtod_l+0xf6>
 8006fd8:	e8df f004 	tbb	[pc, r4]
 8006fdc:	1714030a 	.word	0x1714030a
 8006fe0:	0a          	.byte	0x0a
 8006fe1:	00          	.byte	0x00
 8006fe2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006fe6:	0730      	lsls	r0, r6, #28
 8006fe8:	d5c1      	bpl.n	8006f6e <_strtod_l+0x7e>
 8006fea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006fee:	e7be      	b.n	8006f6e <_strtod_l+0x7e>
 8006ff0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006ff4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006ff6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ffa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ffe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007002:	e7f0      	b.n	8006fe6 <_strtod_l+0xf6>
 8007004:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007178 <_strtod_l+0x288>
 8007008:	e7ed      	b.n	8006fe6 <_strtod_l+0xf6>
 800700a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800700e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007012:	e7e8      	b.n	8006fe6 <_strtod_l+0xf6>
 8007014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	921b      	str	r2, [sp, #108]	; 0x6c
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b30      	cmp	r3, #48	; 0x30
 800701e:	d0f9      	beq.n	8007014 <_strtod_l+0x124>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0a4      	beq.n	8006f6e <_strtod_l+0x7e>
 8007024:	2301      	movs	r3, #1
 8007026:	2500      	movs	r5, #0
 8007028:	9306      	str	r3, [sp, #24]
 800702a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800702c:	9308      	str	r3, [sp, #32]
 800702e:	9507      	str	r5, [sp, #28]
 8007030:	9505      	str	r5, [sp, #20]
 8007032:	220a      	movs	r2, #10
 8007034:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007036:	7807      	ldrb	r7, [r0, #0]
 8007038:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800703c:	b2d9      	uxtb	r1, r3
 800703e:	2909      	cmp	r1, #9
 8007040:	d929      	bls.n	8007096 <_strtod_l+0x1a6>
 8007042:	4622      	mov	r2, r4
 8007044:	f8d8 1000 	ldr.w	r1, [r8]
 8007048:	f002 fddc 	bl	8009c04 <strncmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	d031      	beq.n	80070b4 <_strtod_l+0x1c4>
 8007050:	2000      	movs	r0, #0
 8007052:	9c05      	ldr	r4, [sp, #20]
 8007054:	9004      	str	r0, [sp, #16]
 8007056:	463b      	mov	r3, r7
 8007058:	4602      	mov	r2, r0
 800705a:	2b65      	cmp	r3, #101	; 0x65
 800705c:	d001      	beq.n	8007062 <_strtod_l+0x172>
 800705e:	2b45      	cmp	r3, #69	; 0x45
 8007060:	d114      	bne.n	800708c <_strtod_l+0x19c>
 8007062:	b924      	cbnz	r4, 800706e <_strtod_l+0x17e>
 8007064:	b910      	cbnz	r0, 800706c <_strtod_l+0x17c>
 8007066:	9b06      	ldr	r3, [sp, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d09e      	beq.n	8006faa <_strtod_l+0xba>
 800706c:	2400      	movs	r4, #0
 800706e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007070:	1c73      	adds	r3, r6, #1
 8007072:	931b      	str	r3, [sp, #108]	; 0x6c
 8007074:	7873      	ldrb	r3, [r6, #1]
 8007076:	2b2b      	cmp	r3, #43	; 0x2b
 8007078:	d078      	beq.n	800716c <_strtod_l+0x27c>
 800707a:	2b2d      	cmp	r3, #45	; 0x2d
 800707c:	d070      	beq.n	8007160 <_strtod_l+0x270>
 800707e:	f04f 0c00 	mov.w	ip, #0
 8007082:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007086:	2f09      	cmp	r7, #9
 8007088:	d97c      	bls.n	8007184 <_strtod_l+0x294>
 800708a:	961b      	str	r6, [sp, #108]	; 0x6c
 800708c:	f04f 0e00 	mov.w	lr, #0
 8007090:	e09a      	b.n	80071c8 <_strtod_l+0x2d8>
 8007092:	2300      	movs	r3, #0
 8007094:	e7c7      	b.n	8007026 <_strtod_l+0x136>
 8007096:	9905      	ldr	r1, [sp, #20]
 8007098:	2908      	cmp	r1, #8
 800709a:	bfdd      	ittte	le
 800709c:	9907      	ldrle	r1, [sp, #28]
 800709e:	fb02 3301 	mlale	r3, r2, r1, r3
 80070a2:	9307      	strle	r3, [sp, #28]
 80070a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80070a8:	9b05      	ldr	r3, [sp, #20]
 80070aa:	3001      	adds	r0, #1
 80070ac:	3301      	adds	r3, #1
 80070ae:	9305      	str	r3, [sp, #20]
 80070b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80070b2:	e7bf      	b.n	8007034 <_strtod_l+0x144>
 80070b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070b6:	191a      	adds	r2, r3, r4
 80070b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80070ba:	9a05      	ldr	r2, [sp, #20]
 80070bc:	5d1b      	ldrb	r3, [r3, r4]
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d037      	beq.n	8007132 <_strtod_l+0x242>
 80070c2:	9c05      	ldr	r4, [sp, #20]
 80070c4:	4602      	mov	r2, r0
 80070c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80070ca:	2909      	cmp	r1, #9
 80070cc:	d913      	bls.n	80070f6 <_strtod_l+0x206>
 80070ce:	2101      	movs	r1, #1
 80070d0:	9104      	str	r1, [sp, #16]
 80070d2:	e7c2      	b.n	800705a <_strtod_l+0x16a>
 80070d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	3001      	adds	r0, #1
 80070de:	2b30      	cmp	r3, #48	; 0x30
 80070e0:	d0f8      	beq.n	80070d4 <_strtod_l+0x1e4>
 80070e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80070e6:	2a08      	cmp	r2, #8
 80070e8:	f200 84e4 	bhi.w	8007ab4 <_strtod_l+0xbc4>
 80070ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80070ee:	9208      	str	r2, [sp, #32]
 80070f0:	4602      	mov	r2, r0
 80070f2:	2000      	movs	r0, #0
 80070f4:	4604      	mov	r4, r0
 80070f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80070fa:	f100 0101 	add.w	r1, r0, #1
 80070fe:	d012      	beq.n	8007126 <_strtod_l+0x236>
 8007100:	440a      	add	r2, r1
 8007102:	eb00 0c04 	add.w	ip, r0, r4
 8007106:	4621      	mov	r1, r4
 8007108:	270a      	movs	r7, #10
 800710a:	458c      	cmp	ip, r1
 800710c:	d113      	bne.n	8007136 <_strtod_l+0x246>
 800710e:	1821      	adds	r1, r4, r0
 8007110:	2908      	cmp	r1, #8
 8007112:	f104 0401 	add.w	r4, r4, #1
 8007116:	4404      	add	r4, r0
 8007118:	dc19      	bgt.n	800714e <_strtod_l+0x25e>
 800711a:	9b07      	ldr	r3, [sp, #28]
 800711c:	210a      	movs	r1, #10
 800711e:	fb01 e303 	mla	r3, r1, r3, lr
 8007122:	9307      	str	r3, [sp, #28]
 8007124:	2100      	movs	r1, #0
 8007126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007128:	1c58      	adds	r0, r3, #1
 800712a:	901b      	str	r0, [sp, #108]	; 0x6c
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	4608      	mov	r0, r1
 8007130:	e7c9      	b.n	80070c6 <_strtod_l+0x1d6>
 8007132:	9805      	ldr	r0, [sp, #20]
 8007134:	e7d3      	b.n	80070de <_strtod_l+0x1ee>
 8007136:	2908      	cmp	r1, #8
 8007138:	f101 0101 	add.w	r1, r1, #1
 800713c:	dc03      	bgt.n	8007146 <_strtod_l+0x256>
 800713e:	9b07      	ldr	r3, [sp, #28]
 8007140:	437b      	muls	r3, r7
 8007142:	9307      	str	r3, [sp, #28]
 8007144:	e7e1      	b.n	800710a <_strtod_l+0x21a>
 8007146:	2910      	cmp	r1, #16
 8007148:	bfd8      	it	le
 800714a:	437d      	mulle	r5, r7
 800714c:	e7dd      	b.n	800710a <_strtod_l+0x21a>
 800714e:	2c10      	cmp	r4, #16
 8007150:	bfdc      	itt	le
 8007152:	210a      	movle	r1, #10
 8007154:	fb01 e505 	mlale	r5, r1, r5, lr
 8007158:	e7e4      	b.n	8007124 <_strtod_l+0x234>
 800715a:	2301      	movs	r3, #1
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	e781      	b.n	8007064 <_strtod_l+0x174>
 8007160:	f04f 0c01 	mov.w	ip, #1
 8007164:	1cb3      	adds	r3, r6, #2
 8007166:	931b      	str	r3, [sp, #108]	; 0x6c
 8007168:	78b3      	ldrb	r3, [r6, #2]
 800716a:	e78a      	b.n	8007082 <_strtod_l+0x192>
 800716c:	f04f 0c00 	mov.w	ip, #0
 8007170:	e7f8      	b.n	8007164 <_strtod_l+0x274>
 8007172:	bf00      	nop
 8007174:	0800a848 	.word	0x0800a848
 8007178:	7ff00000 	.word	0x7ff00000
 800717c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800717e:	1c5f      	adds	r7, r3, #1
 8007180:	971b      	str	r7, [sp, #108]	; 0x6c
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d0f9      	beq.n	800717c <_strtod_l+0x28c>
 8007188:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800718c:	2f08      	cmp	r7, #8
 800718e:	f63f af7d 	bhi.w	800708c <_strtod_l+0x19c>
 8007192:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007198:	930a      	str	r3, [sp, #40]	; 0x28
 800719a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800719c:	1c5f      	adds	r7, r3, #1
 800719e:	971b      	str	r7, [sp, #108]	; 0x6c
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80071a6:	f1b8 0f09 	cmp.w	r8, #9
 80071aa:	d937      	bls.n	800721c <_strtod_l+0x32c>
 80071ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071ae:	1a7f      	subs	r7, r7, r1
 80071b0:	2f08      	cmp	r7, #8
 80071b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80071b6:	dc37      	bgt.n	8007228 <_strtod_l+0x338>
 80071b8:	45be      	cmp	lr, r7
 80071ba:	bfa8      	it	ge
 80071bc:	46be      	movge	lr, r7
 80071be:	f1bc 0f00 	cmp.w	ip, #0
 80071c2:	d001      	beq.n	80071c8 <_strtod_l+0x2d8>
 80071c4:	f1ce 0e00 	rsb	lr, lr, #0
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	d151      	bne.n	8007270 <_strtod_l+0x380>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	f47f aece 	bne.w	8006f6e <_strtod_l+0x7e>
 80071d2:	9a06      	ldr	r2, [sp, #24]
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	f47f aeca 	bne.w	8006f6e <_strtod_l+0x7e>
 80071da:	9a04      	ldr	r2, [sp, #16]
 80071dc:	2a00      	cmp	r2, #0
 80071de:	f47f aee4 	bne.w	8006faa <_strtod_l+0xba>
 80071e2:	2b4e      	cmp	r3, #78	; 0x4e
 80071e4:	d027      	beq.n	8007236 <_strtod_l+0x346>
 80071e6:	dc21      	bgt.n	800722c <_strtod_l+0x33c>
 80071e8:	2b49      	cmp	r3, #73	; 0x49
 80071ea:	f47f aede 	bne.w	8006faa <_strtod_l+0xba>
 80071ee:	49a0      	ldr	r1, [pc, #640]	; (8007470 <_strtod_l+0x580>)
 80071f0:	a81b      	add	r0, sp, #108	; 0x6c
 80071f2:	f001 fe13 	bl	8008e1c <__match>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f43f aed7 	beq.w	8006faa <_strtod_l+0xba>
 80071fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fe:	499d      	ldr	r1, [pc, #628]	; (8007474 <_strtod_l+0x584>)
 8007200:	3b01      	subs	r3, #1
 8007202:	a81b      	add	r0, sp, #108	; 0x6c
 8007204:	931b      	str	r3, [sp, #108]	; 0x6c
 8007206:	f001 fe09 	bl	8008e1c <__match>
 800720a:	b910      	cbnz	r0, 8007212 <_strtod_l+0x322>
 800720c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800720e:	3301      	adds	r3, #1
 8007210:	931b      	str	r3, [sp, #108]	; 0x6c
 8007212:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007488 <_strtod_l+0x598>
 8007216:	f04f 0a00 	mov.w	sl, #0
 800721a:	e6a8      	b.n	8006f6e <_strtod_l+0x7e>
 800721c:	210a      	movs	r1, #10
 800721e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007222:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007226:	e7b8      	b.n	800719a <_strtod_l+0x2aa>
 8007228:	46be      	mov	lr, r7
 800722a:	e7c8      	b.n	80071be <_strtod_l+0x2ce>
 800722c:	2b69      	cmp	r3, #105	; 0x69
 800722e:	d0de      	beq.n	80071ee <_strtod_l+0x2fe>
 8007230:	2b6e      	cmp	r3, #110	; 0x6e
 8007232:	f47f aeba 	bne.w	8006faa <_strtod_l+0xba>
 8007236:	4990      	ldr	r1, [pc, #576]	; (8007478 <_strtod_l+0x588>)
 8007238:	a81b      	add	r0, sp, #108	; 0x6c
 800723a:	f001 fdef 	bl	8008e1c <__match>
 800723e:	2800      	cmp	r0, #0
 8007240:	f43f aeb3 	beq.w	8006faa <_strtod_l+0xba>
 8007244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b28      	cmp	r3, #40	; 0x28
 800724a:	d10e      	bne.n	800726a <_strtod_l+0x37a>
 800724c:	aa1e      	add	r2, sp, #120	; 0x78
 800724e:	498b      	ldr	r1, [pc, #556]	; (800747c <_strtod_l+0x58c>)
 8007250:	a81b      	add	r0, sp, #108	; 0x6c
 8007252:	f001 fdf7 	bl	8008e44 <__hexnan>
 8007256:	2805      	cmp	r0, #5
 8007258:	d107      	bne.n	800726a <_strtod_l+0x37a>
 800725a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800725c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007260:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007264:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007268:	e681      	b.n	8006f6e <_strtod_l+0x7e>
 800726a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007490 <_strtod_l+0x5a0>
 800726e:	e7d2      	b.n	8007216 <_strtod_l+0x326>
 8007270:	ebae 0302 	sub.w	r3, lr, r2
 8007274:	9306      	str	r3, [sp, #24]
 8007276:	9b05      	ldr	r3, [sp, #20]
 8007278:	9807      	ldr	r0, [sp, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bf08      	it	eq
 800727e:	4623      	moveq	r3, r4
 8007280:	2c10      	cmp	r4, #16
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	46a0      	mov	r8, r4
 8007286:	bfa8      	it	ge
 8007288:	f04f 0810 	movge.w	r8, #16
 800728c:	f7f9 f93a 	bl	8000504 <__aeabi_ui2d>
 8007290:	2c09      	cmp	r4, #9
 8007292:	4682      	mov	sl, r0
 8007294:	468b      	mov	fp, r1
 8007296:	dc13      	bgt.n	80072c0 <_strtod_l+0x3d0>
 8007298:	9b06      	ldr	r3, [sp, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f43f ae67 	beq.w	8006f6e <_strtod_l+0x7e>
 80072a0:	9b06      	ldr	r3, [sp, #24]
 80072a2:	dd7a      	ble.n	800739a <_strtod_l+0x4aa>
 80072a4:	2b16      	cmp	r3, #22
 80072a6:	dc61      	bgt.n	800736c <_strtod_l+0x47c>
 80072a8:	4a75      	ldr	r2, [pc, #468]	; (8007480 <_strtod_l+0x590>)
 80072aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80072ae:	e9de 0100 	ldrd	r0, r1, [lr]
 80072b2:	4652      	mov	r2, sl
 80072b4:	465b      	mov	r3, fp
 80072b6:	f7f9 f99f 	bl	80005f8 <__aeabi_dmul>
 80072ba:	4682      	mov	sl, r0
 80072bc:	468b      	mov	fp, r1
 80072be:	e656      	b.n	8006f6e <_strtod_l+0x7e>
 80072c0:	4b6f      	ldr	r3, [pc, #444]	; (8007480 <_strtod_l+0x590>)
 80072c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80072c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80072ca:	f7f9 f995 	bl	80005f8 <__aeabi_dmul>
 80072ce:	4606      	mov	r6, r0
 80072d0:	4628      	mov	r0, r5
 80072d2:	460f      	mov	r7, r1
 80072d4:	f7f9 f916 	bl	8000504 <__aeabi_ui2d>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4630      	mov	r0, r6
 80072de:	4639      	mov	r1, r7
 80072e0:	f7f8 ffd4 	bl	800028c <__adddf3>
 80072e4:	2c0f      	cmp	r4, #15
 80072e6:	4682      	mov	sl, r0
 80072e8:	468b      	mov	fp, r1
 80072ea:	ddd5      	ble.n	8007298 <_strtod_l+0x3a8>
 80072ec:	9b06      	ldr	r3, [sp, #24]
 80072ee:	eba4 0808 	sub.w	r8, r4, r8
 80072f2:	4498      	add	r8, r3
 80072f4:	f1b8 0f00 	cmp.w	r8, #0
 80072f8:	f340 8096 	ble.w	8007428 <_strtod_l+0x538>
 80072fc:	f018 030f 	ands.w	r3, r8, #15
 8007300:	d00a      	beq.n	8007318 <_strtod_l+0x428>
 8007302:	495f      	ldr	r1, [pc, #380]	; (8007480 <_strtod_l+0x590>)
 8007304:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007308:	4652      	mov	r2, sl
 800730a:	465b      	mov	r3, fp
 800730c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	4682      	mov	sl, r0
 8007316:	468b      	mov	fp, r1
 8007318:	f038 080f 	bics.w	r8, r8, #15
 800731c:	d073      	beq.n	8007406 <_strtod_l+0x516>
 800731e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007322:	dd47      	ble.n	80073b4 <_strtod_l+0x4c4>
 8007324:	2400      	movs	r4, #0
 8007326:	46a0      	mov	r8, r4
 8007328:	9407      	str	r4, [sp, #28]
 800732a:	9405      	str	r4, [sp, #20]
 800732c:	2322      	movs	r3, #34	; 0x22
 800732e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007488 <_strtod_l+0x598>
 8007332:	f8c9 3000 	str.w	r3, [r9]
 8007336:	f04f 0a00 	mov.w	sl, #0
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f43f ae16 	beq.w	8006f6e <_strtod_l+0x7e>
 8007342:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007344:	4648      	mov	r0, r9
 8007346:	f001 fe7a 	bl	800903e <_Bfree>
 800734a:	9905      	ldr	r1, [sp, #20]
 800734c:	4648      	mov	r0, r9
 800734e:	f001 fe76 	bl	800903e <_Bfree>
 8007352:	4641      	mov	r1, r8
 8007354:	4648      	mov	r0, r9
 8007356:	f001 fe72 	bl	800903e <_Bfree>
 800735a:	9907      	ldr	r1, [sp, #28]
 800735c:	4648      	mov	r0, r9
 800735e:	f001 fe6e 	bl	800903e <_Bfree>
 8007362:	4621      	mov	r1, r4
 8007364:	4648      	mov	r0, r9
 8007366:	f001 fe6a 	bl	800903e <_Bfree>
 800736a:	e600      	b.n	8006f6e <_strtod_l+0x7e>
 800736c:	9a06      	ldr	r2, [sp, #24]
 800736e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007372:	4293      	cmp	r3, r2
 8007374:	dbba      	blt.n	80072ec <_strtod_l+0x3fc>
 8007376:	4d42      	ldr	r5, [pc, #264]	; (8007480 <_strtod_l+0x590>)
 8007378:	f1c4 040f 	rsb	r4, r4, #15
 800737c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007380:	4652      	mov	r2, sl
 8007382:	465b      	mov	r3, fp
 8007384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007388:	f7f9 f936 	bl	80005f8 <__aeabi_dmul>
 800738c:	9b06      	ldr	r3, [sp, #24]
 800738e:	1b1c      	subs	r4, r3, r4
 8007390:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007398:	e78d      	b.n	80072b6 <_strtod_l+0x3c6>
 800739a:	f113 0f16 	cmn.w	r3, #22
 800739e:	dba5      	blt.n	80072ec <_strtod_l+0x3fc>
 80073a0:	4a37      	ldr	r2, [pc, #220]	; (8007480 <_strtod_l+0x590>)
 80073a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80073a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80073aa:	4650      	mov	r0, sl
 80073ac:	4659      	mov	r1, fp
 80073ae:	f7f9 fa4d 	bl	800084c <__aeabi_ddiv>
 80073b2:	e782      	b.n	80072ba <_strtod_l+0x3ca>
 80073b4:	2300      	movs	r3, #0
 80073b6:	4e33      	ldr	r6, [pc, #204]	; (8007484 <_strtod_l+0x594>)
 80073b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80073bc:	4650      	mov	r0, sl
 80073be:	4659      	mov	r1, fp
 80073c0:	461d      	mov	r5, r3
 80073c2:	f1b8 0f01 	cmp.w	r8, #1
 80073c6:	dc21      	bgt.n	800740c <_strtod_l+0x51c>
 80073c8:	b10b      	cbz	r3, 80073ce <_strtod_l+0x4de>
 80073ca:	4682      	mov	sl, r0
 80073cc:	468b      	mov	fp, r1
 80073ce:	4b2d      	ldr	r3, [pc, #180]	; (8007484 <_strtod_l+0x594>)
 80073d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80073d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80073d8:	4652      	mov	r2, sl
 80073da:	465b      	mov	r3, fp
 80073dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80073e0:	f7f9 f90a 	bl	80005f8 <__aeabi_dmul>
 80073e4:	4b28      	ldr	r3, [pc, #160]	; (8007488 <_strtod_l+0x598>)
 80073e6:	460a      	mov	r2, r1
 80073e8:	400b      	ands	r3, r1
 80073ea:	4928      	ldr	r1, [pc, #160]	; (800748c <_strtod_l+0x59c>)
 80073ec:	428b      	cmp	r3, r1
 80073ee:	4682      	mov	sl, r0
 80073f0:	d898      	bhi.n	8007324 <_strtod_l+0x434>
 80073f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80073f6:	428b      	cmp	r3, r1
 80073f8:	bf86      	itte	hi
 80073fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007494 <_strtod_l+0x5a4>
 80073fe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007402:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007406:	2300      	movs	r3, #0
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	e077      	b.n	80074fc <_strtod_l+0x60c>
 800740c:	f018 0f01 	tst.w	r8, #1
 8007410:	d006      	beq.n	8007420 <_strtod_l+0x530>
 8007412:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f9 f8ed 	bl	80005f8 <__aeabi_dmul>
 800741e:	2301      	movs	r3, #1
 8007420:	3501      	adds	r5, #1
 8007422:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007426:	e7cc      	b.n	80073c2 <_strtod_l+0x4d2>
 8007428:	d0ed      	beq.n	8007406 <_strtod_l+0x516>
 800742a:	f1c8 0800 	rsb	r8, r8, #0
 800742e:	f018 020f 	ands.w	r2, r8, #15
 8007432:	d00a      	beq.n	800744a <_strtod_l+0x55a>
 8007434:	4b12      	ldr	r3, [pc, #72]	; (8007480 <_strtod_l+0x590>)
 8007436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800743a:	4650      	mov	r0, sl
 800743c:	4659      	mov	r1, fp
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f9 fa03 	bl	800084c <__aeabi_ddiv>
 8007446:	4682      	mov	sl, r0
 8007448:	468b      	mov	fp, r1
 800744a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800744e:	d0da      	beq.n	8007406 <_strtod_l+0x516>
 8007450:	f1b8 0f1f 	cmp.w	r8, #31
 8007454:	dd20      	ble.n	8007498 <_strtod_l+0x5a8>
 8007456:	2400      	movs	r4, #0
 8007458:	46a0      	mov	r8, r4
 800745a:	9407      	str	r4, [sp, #28]
 800745c:	9405      	str	r4, [sp, #20]
 800745e:	2322      	movs	r3, #34	; 0x22
 8007460:	f04f 0a00 	mov.w	sl, #0
 8007464:	f04f 0b00 	mov.w	fp, #0
 8007468:	f8c9 3000 	str.w	r3, [r9]
 800746c:	e765      	b.n	800733a <_strtod_l+0x44a>
 800746e:	bf00      	nop
 8007470:	0800a811 	.word	0x0800a811
 8007474:	0800a8c0 	.word	0x0800a8c0
 8007478:	0800a819 	.word	0x0800a819
 800747c:	0800a85c 	.word	0x0800a85c
 8007480:	0800a900 	.word	0x0800a900
 8007484:	0800a8d8 	.word	0x0800a8d8
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	7ca00000 	.word	0x7ca00000
 8007490:	fff80000 	.word	0xfff80000
 8007494:	7fefffff 	.word	0x7fefffff
 8007498:	f018 0310 	ands.w	r3, r8, #16
 800749c:	bf18      	it	ne
 800749e:	236a      	movne	r3, #106	; 0x6a
 80074a0:	4da0      	ldr	r5, [pc, #640]	; (8007724 <_strtod_l+0x834>)
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	4650      	mov	r0, sl
 80074a6:	4659      	mov	r1, fp
 80074a8:	2300      	movs	r3, #0
 80074aa:	f1b8 0f00 	cmp.w	r8, #0
 80074ae:	f300 810a 	bgt.w	80076c6 <_strtod_l+0x7d6>
 80074b2:	b10b      	cbz	r3, 80074b8 <_strtod_l+0x5c8>
 80074b4:	4682      	mov	sl, r0
 80074b6:	468b      	mov	fp, r1
 80074b8:	9b04      	ldr	r3, [sp, #16]
 80074ba:	b1bb      	cbz	r3, 80074ec <_strtod_l+0x5fc>
 80074bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80074c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	4659      	mov	r1, fp
 80074c8:	dd10      	ble.n	80074ec <_strtod_l+0x5fc>
 80074ca:	2b1f      	cmp	r3, #31
 80074cc:	f340 8107 	ble.w	80076de <_strtod_l+0x7ee>
 80074d0:	2b34      	cmp	r3, #52	; 0x34
 80074d2:	bfde      	ittt	le
 80074d4:	3b20      	suble	r3, #32
 80074d6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80074da:	fa02 f303 	lslle.w	r3, r2, r3
 80074de:	f04f 0a00 	mov.w	sl, #0
 80074e2:	bfcc      	ite	gt
 80074e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80074e8:	ea03 0b01 	andle.w	fp, r3, r1
 80074ec:	2200      	movs	r2, #0
 80074ee:	2300      	movs	r3, #0
 80074f0:	4650      	mov	r0, sl
 80074f2:	4659      	mov	r1, fp
 80074f4:	f7f9 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1ac      	bne.n	8007456 <_strtod_l+0x566>
 80074fc:	9b07      	ldr	r3, [sp, #28]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	9a05      	ldr	r2, [sp, #20]
 8007502:	9908      	ldr	r1, [sp, #32]
 8007504:	4623      	mov	r3, r4
 8007506:	4648      	mov	r0, r9
 8007508:	f001 fdeb 	bl	80090e2 <__s2b>
 800750c:	9007      	str	r0, [sp, #28]
 800750e:	2800      	cmp	r0, #0
 8007510:	f43f af08 	beq.w	8007324 <_strtod_l+0x434>
 8007514:	9a06      	ldr	r2, [sp, #24]
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	2a00      	cmp	r2, #0
 800751a:	f1c3 0300 	rsb	r3, r3, #0
 800751e:	bfa8      	it	ge
 8007520:	2300      	movge	r3, #0
 8007522:	930e      	str	r3, [sp, #56]	; 0x38
 8007524:	2400      	movs	r4, #0
 8007526:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800752a:	9316      	str	r3, [sp, #88]	; 0x58
 800752c:	46a0      	mov	r8, r4
 800752e:	9b07      	ldr	r3, [sp, #28]
 8007530:	4648      	mov	r0, r9
 8007532:	6859      	ldr	r1, [r3, #4]
 8007534:	f001 fd4f 	bl	8008fd6 <_Balloc>
 8007538:	9005      	str	r0, [sp, #20]
 800753a:	2800      	cmp	r0, #0
 800753c:	f43f aef6 	beq.w	800732c <_strtod_l+0x43c>
 8007540:	9b07      	ldr	r3, [sp, #28]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	3202      	adds	r2, #2
 8007546:	f103 010c 	add.w	r1, r3, #12
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	300c      	adds	r0, #12
 800754e:	f001 fd37 	bl	8008fc0 <memcpy>
 8007552:	aa1e      	add	r2, sp, #120	; 0x78
 8007554:	a91d      	add	r1, sp, #116	; 0x74
 8007556:	ec4b ab10 	vmov	d0, sl, fp
 800755a:	4648      	mov	r0, r9
 800755c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007560:	f002 f87a 	bl	8009658 <__d2b>
 8007564:	901c      	str	r0, [sp, #112]	; 0x70
 8007566:	2800      	cmp	r0, #0
 8007568:	f43f aee0 	beq.w	800732c <_strtod_l+0x43c>
 800756c:	2101      	movs	r1, #1
 800756e:	4648      	mov	r0, r9
 8007570:	f001 fe43 	bl	80091fa <__i2b>
 8007574:	4680      	mov	r8, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f aed8 	beq.w	800732c <_strtod_l+0x43c>
 800757c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800757e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007580:	2e00      	cmp	r6, #0
 8007582:	bfab      	itete	ge
 8007584:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007586:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007588:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800758a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800758c:	bfac      	ite	ge
 800758e:	18f7      	addge	r7, r6, r3
 8007590:	1b9d      	sublt	r5, r3, r6
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	1af6      	subs	r6, r6, r3
 8007596:	4416      	add	r6, r2
 8007598:	4b63      	ldr	r3, [pc, #396]	; (8007728 <_strtod_l+0x838>)
 800759a:	3e01      	subs	r6, #1
 800759c:	429e      	cmp	r6, r3
 800759e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075a2:	f280 80af 	bge.w	8007704 <_strtod_l+0x814>
 80075a6:	1b9b      	subs	r3, r3, r6
 80075a8:	2b1f      	cmp	r3, #31
 80075aa:	eba2 0203 	sub.w	r2, r2, r3
 80075ae:	f04f 0101 	mov.w	r1, #1
 80075b2:	f300 809b 	bgt.w	80076ec <_strtod_l+0x7fc>
 80075b6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80075bc:	2300      	movs	r3, #0
 80075be:	930a      	str	r3, [sp, #40]	; 0x28
 80075c0:	18be      	adds	r6, r7, r2
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	42b7      	cmp	r7, r6
 80075c6:	4415      	add	r5, r2
 80075c8:	441d      	add	r5, r3
 80075ca:	463b      	mov	r3, r7
 80075cc:	bfa8      	it	ge
 80075ce:	4633      	movge	r3, r6
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	bfa8      	it	ge
 80075d4:	462b      	movge	r3, r5
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfc2      	ittt	gt
 80075da:	1af6      	subgt	r6, r6, r3
 80075dc:	1aed      	subgt	r5, r5, r3
 80075de:	1aff      	subgt	r7, r7, r3
 80075e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e2:	b1bb      	cbz	r3, 8007614 <_strtod_l+0x724>
 80075e4:	4641      	mov	r1, r8
 80075e6:	461a      	mov	r2, r3
 80075e8:	4648      	mov	r0, r9
 80075ea:	f001 fea5 	bl	8009338 <__pow5mult>
 80075ee:	4680      	mov	r8, r0
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f ae9b 	beq.w	800732c <_strtod_l+0x43c>
 80075f6:	4601      	mov	r1, r0
 80075f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80075fa:	4648      	mov	r0, r9
 80075fc:	f001 fe06 	bl	800920c <__multiply>
 8007600:	900c      	str	r0, [sp, #48]	; 0x30
 8007602:	2800      	cmp	r0, #0
 8007604:	f43f ae92 	beq.w	800732c <_strtod_l+0x43c>
 8007608:	991c      	ldr	r1, [sp, #112]	; 0x70
 800760a:	4648      	mov	r0, r9
 800760c:	f001 fd17 	bl	800903e <_Bfree>
 8007610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007612:	931c      	str	r3, [sp, #112]	; 0x70
 8007614:	2e00      	cmp	r6, #0
 8007616:	dc7a      	bgt.n	800770e <_strtod_l+0x81e>
 8007618:	9b06      	ldr	r3, [sp, #24]
 800761a:	2b00      	cmp	r3, #0
 800761c:	dd08      	ble.n	8007630 <_strtod_l+0x740>
 800761e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007620:	9905      	ldr	r1, [sp, #20]
 8007622:	4648      	mov	r0, r9
 8007624:	f001 fe88 	bl	8009338 <__pow5mult>
 8007628:	9005      	str	r0, [sp, #20]
 800762a:	2800      	cmp	r0, #0
 800762c:	f43f ae7e 	beq.w	800732c <_strtod_l+0x43c>
 8007630:	2d00      	cmp	r5, #0
 8007632:	dd08      	ble.n	8007646 <_strtod_l+0x756>
 8007634:	462a      	mov	r2, r5
 8007636:	9905      	ldr	r1, [sp, #20]
 8007638:	4648      	mov	r0, r9
 800763a:	f001 fecb 	bl	80093d4 <__lshift>
 800763e:	9005      	str	r0, [sp, #20]
 8007640:	2800      	cmp	r0, #0
 8007642:	f43f ae73 	beq.w	800732c <_strtod_l+0x43c>
 8007646:	2f00      	cmp	r7, #0
 8007648:	dd08      	ble.n	800765c <_strtod_l+0x76c>
 800764a:	4641      	mov	r1, r8
 800764c:	463a      	mov	r2, r7
 800764e:	4648      	mov	r0, r9
 8007650:	f001 fec0 	bl	80093d4 <__lshift>
 8007654:	4680      	mov	r8, r0
 8007656:	2800      	cmp	r0, #0
 8007658:	f43f ae68 	beq.w	800732c <_strtod_l+0x43c>
 800765c:	9a05      	ldr	r2, [sp, #20]
 800765e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007660:	4648      	mov	r0, r9
 8007662:	f001 ff25 	bl	80094b0 <__mdiff>
 8007666:	4604      	mov	r4, r0
 8007668:	2800      	cmp	r0, #0
 800766a:	f43f ae5f 	beq.w	800732c <_strtod_l+0x43c>
 800766e:	68c3      	ldr	r3, [r0, #12]
 8007670:	930c      	str	r3, [sp, #48]	; 0x30
 8007672:	2300      	movs	r3, #0
 8007674:	60c3      	str	r3, [r0, #12]
 8007676:	4641      	mov	r1, r8
 8007678:	f001 ff00 	bl	800947c <__mcmp>
 800767c:	2800      	cmp	r0, #0
 800767e:	da55      	bge.n	800772c <_strtod_l+0x83c>
 8007680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007682:	b9e3      	cbnz	r3, 80076be <_strtod_l+0x7ce>
 8007684:	f1ba 0f00 	cmp.w	sl, #0
 8007688:	d119      	bne.n	80076be <_strtod_l+0x7ce>
 800768a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800768e:	b9b3      	cbnz	r3, 80076be <_strtod_l+0x7ce>
 8007690:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007694:	0d1b      	lsrs	r3, r3, #20
 8007696:	051b      	lsls	r3, r3, #20
 8007698:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800769c:	d90f      	bls.n	80076be <_strtod_l+0x7ce>
 800769e:	6963      	ldr	r3, [r4, #20]
 80076a0:	b913      	cbnz	r3, 80076a8 <_strtod_l+0x7b8>
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	dd0a      	ble.n	80076be <_strtod_l+0x7ce>
 80076a8:	4621      	mov	r1, r4
 80076aa:	2201      	movs	r2, #1
 80076ac:	4648      	mov	r0, r9
 80076ae:	f001 fe91 	bl	80093d4 <__lshift>
 80076b2:	4641      	mov	r1, r8
 80076b4:	4604      	mov	r4, r0
 80076b6:	f001 fee1 	bl	800947c <__mcmp>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	dc67      	bgt.n	800778e <_strtod_l+0x89e>
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d171      	bne.n	80077a8 <_strtod_l+0x8b8>
 80076c4:	e63d      	b.n	8007342 <_strtod_l+0x452>
 80076c6:	f018 0f01 	tst.w	r8, #1
 80076ca:	d004      	beq.n	80076d6 <_strtod_l+0x7e6>
 80076cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076d0:	f7f8 ff92 	bl	80005f8 <__aeabi_dmul>
 80076d4:	2301      	movs	r3, #1
 80076d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076da:	3508      	adds	r5, #8
 80076dc:	e6e5      	b.n	80074aa <_strtod_l+0x5ba>
 80076de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	ea03 0a0a 	and.w	sl, r3, sl
 80076ea:	e6ff      	b.n	80074ec <_strtod_l+0x5fc>
 80076ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80076f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80076f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80076f8:	36e2      	adds	r6, #226	; 0xe2
 80076fa:	fa01 f306 	lsl.w	r3, r1, r6
 80076fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007700:	910f      	str	r1, [sp, #60]	; 0x3c
 8007702:	e75d      	b.n	80075c0 <_strtod_l+0x6d0>
 8007704:	2300      	movs	r3, #0
 8007706:	930a      	str	r3, [sp, #40]	; 0x28
 8007708:	2301      	movs	r3, #1
 800770a:	930f      	str	r3, [sp, #60]	; 0x3c
 800770c:	e758      	b.n	80075c0 <_strtod_l+0x6d0>
 800770e:	4632      	mov	r2, r6
 8007710:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007712:	4648      	mov	r0, r9
 8007714:	f001 fe5e 	bl	80093d4 <__lshift>
 8007718:	901c      	str	r0, [sp, #112]	; 0x70
 800771a:	2800      	cmp	r0, #0
 800771c:	f47f af7c 	bne.w	8007618 <_strtod_l+0x728>
 8007720:	e604      	b.n	800732c <_strtod_l+0x43c>
 8007722:	bf00      	nop
 8007724:	0800a870 	.word	0x0800a870
 8007728:	fffffc02 	.word	0xfffffc02
 800772c:	465d      	mov	r5, fp
 800772e:	f040 8086 	bne.w	800783e <_strtod_l+0x94e>
 8007732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007738:	b32a      	cbz	r2, 8007786 <_strtod_l+0x896>
 800773a:	4aaf      	ldr	r2, [pc, #700]	; (80079f8 <_strtod_l+0xb08>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d153      	bne.n	80077e8 <_strtod_l+0x8f8>
 8007740:	9b04      	ldr	r3, [sp, #16]
 8007742:	4650      	mov	r0, sl
 8007744:	b1d3      	cbz	r3, 800777c <_strtod_l+0x88c>
 8007746:	4aad      	ldr	r2, [pc, #692]	; (80079fc <_strtod_l+0xb0c>)
 8007748:	402a      	ands	r2, r5
 800774a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800774e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007752:	d816      	bhi.n	8007782 <_strtod_l+0x892>
 8007754:	0d12      	lsrs	r2, r2, #20
 8007756:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800775a:	fa01 f303 	lsl.w	r3, r1, r3
 800775e:	4298      	cmp	r0, r3
 8007760:	d142      	bne.n	80077e8 <_strtod_l+0x8f8>
 8007762:	4ba7      	ldr	r3, [pc, #668]	; (8007a00 <_strtod_l+0xb10>)
 8007764:	429d      	cmp	r5, r3
 8007766:	d102      	bne.n	800776e <_strtod_l+0x87e>
 8007768:	3001      	adds	r0, #1
 800776a:	f43f addf 	beq.w	800732c <_strtod_l+0x43c>
 800776e:	4ba3      	ldr	r3, [pc, #652]	; (80079fc <_strtod_l+0xb0c>)
 8007770:	402b      	ands	r3, r5
 8007772:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007776:	f04f 0a00 	mov.w	sl, #0
 800777a:	e7a0      	b.n	80076be <_strtod_l+0x7ce>
 800777c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007780:	e7ed      	b.n	800775e <_strtod_l+0x86e>
 8007782:	460b      	mov	r3, r1
 8007784:	e7eb      	b.n	800775e <_strtod_l+0x86e>
 8007786:	bb7b      	cbnz	r3, 80077e8 <_strtod_l+0x8f8>
 8007788:	f1ba 0f00 	cmp.w	sl, #0
 800778c:	d12c      	bne.n	80077e8 <_strtod_l+0x8f8>
 800778e:	9904      	ldr	r1, [sp, #16]
 8007790:	4a9a      	ldr	r2, [pc, #616]	; (80079fc <_strtod_l+0xb0c>)
 8007792:	465b      	mov	r3, fp
 8007794:	b1f1      	cbz	r1, 80077d4 <_strtod_l+0x8e4>
 8007796:	ea02 010b 	and.w	r1, r2, fp
 800779a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800779e:	dc19      	bgt.n	80077d4 <_strtod_l+0x8e4>
 80077a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077a4:	f77f ae5b 	ble.w	800745e <_strtod_l+0x56e>
 80077a8:	4a96      	ldr	r2, [pc, #600]	; (8007a04 <_strtod_l+0xb14>)
 80077aa:	2300      	movs	r3, #0
 80077ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80077b0:	4650      	mov	r0, sl
 80077b2:	4659      	mov	r1, fp
 80077b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077b8:	f7f8 ff1e 	bl	80005f8 <__aeabi_dmul>
 80077bc:	4682      	mov	sl, r0
 80077be:	468b      	mov	fp, r1
 80077c0:	2900      	cmp	r1, #0
 80077c2:	f47f adbe 	bne.w	8007342 <_strtod_l+0x452>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f47f adbb 	bne.w	8007342 <_strtod_l+0x452>
 80077cc:	2322      	movs	r3, #34	; 0x22
 80077ce:	f8c9 3000 	str.w	r3, [r9]
 80077d2:	e5b6      	b.n	8007342 <_strtod_l+0x452>
 80077d4:	4013      	ands	r3, r2
 80077d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80077da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80077e6:	e76a      	b.n	80076be <_strtod_l+0x7ce>
 80077e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ea:	b193      	cbz	r3, 8007812 <_strtod_l+0x922>
 80077ec:	422b      	tst	r3, r5
 80077ee:	f43f af66 	beq.w	80076be <_strtod_l+0x7ce>
 80077f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077f4:	9a04      	ldr	r2, [sp, #16]
 80077f6:	4650      	mov	r0, sl
 80077f8:	4659      	mov	r1, fp
 80077fa:	b173      	cbz	r3, 800781a <_strtod_l+0x92a>
 80077fc:	f7ff fb5c 	bl	8006eb8 <sulp>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007808:	f7f8 fd40 	bl	800028c <__adddf3>
 800780c:	4682      	mov	sl, r0
 800780e:	468b      	mov	fp, r1
 8007810:	e755      	b.n	80076be <_strtod_l+0x7ce>
 8007812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007814:	ea13 0f0a 	tst.w	r3, sl
 8007818:	e7e9      	b.n	80077ee <_strtod_l+0x8fe>
 800781a:	f7ff fb4d 	bl	8006eb8 <sulp>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007826:	f7f8 fd2f 	bl	8000288 <__aeabi_dsub>
 800782a:	2200      	movs	r2, #0
 800782c:	2300      	movs	r3, #0
 800782e:	4682      	mov	sl, r0
 8007830:	468b      	mov	fp, r1
 8007832:	f7f9 f949 	bl	8000ac8 <__aeabi_dcmpeq>
 8007836:	2800      	cmp	r0, #0
 8007838:	f47f ae11 	bne.w	800745e <_strtod_l+0x56e>
 800783c:	e73f      	b.n	80076be <_strtod_l+0x7ce>
 800783e:	4641      	mov	r1, r8
 8007840:	4620      	mov	r0, r4
 8007842:	f001 ff58 	bl	80096f6 <__ratio>
 8007846:	ec57 6b10 	vmov	r6, r7, d0
 800784a:	2200      	movs	r2, #0
 800784c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007850:	ee10 0a10 	vmov	r0, s0
 8007854:	4639      	mov	r1, r7
 8007856:	f7f9 f94b 	bl	8000af0 <__aeabi_dcmple>
 800785a:	2800      	cmp	r0, #0
 800785c:	d077      	beq.n	800794e <_strtod_l+0xa5e>
 800785e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007860:	2b00      	cmp	r3, #0
 8007862:	d04a      	beq.n	80078fa <_strtod_l+0xa0a>
 8007864:	4b68      	ldr	r3, [pc, #416]	; (8007a08 <_strtod_l+0xb18>)
 8007866:	2200      	movs	r2, #0
 8007868:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800786c:	4f66      	ldr	r7, [pc, #408]	; (8007a08 <_strtod_l+0xb18>)
 800786e:	2600      	movs	r6, #0
 8007870:	4b62      	ldr	r3, [pc, #392]	; (80079fc <_strtod_l+0xb0c>)
 8007872:	402b      	ands	r3, r5
 8007874:	930f      	str	r3, [sp, #60]	; 0x3c
 8007876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007878:	4b64      	ldr	r3, [pc, #400]	; (8007a0c <_strtod_l+0xb1c>)
 800787a:	429a      	cmp	r2, r3
 800787c:	f040 80ce 	bne.w	8007a1c <_strtod_l+0xb2c>
 8007880:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007888:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800788c:	ec4b ab10 	vmov	d0, sl, fp
 8007890:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007894:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007898:	f001 fe68 	bl	800956c <__ulp>
 800789c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078a0:	ec53 2b10 	vmov	r2, r3, d0
 80078a4:	f7f8 fea8 	bl	80005f8 <__aeabi_dmul>
 80078a8:	4652      	mov	r2, sl
 80078aa:	465b      	mov	r3, fp
 80078ac:	f7f8 fcee 	bl	800028c <__adddf3>
 80078b0:	460b      	mov	r3, r1
 80078b2:	4952      	ldr	r1, [pc, #328]	; (80079fc <_strtod_l+0xb0c>)
 80078b4:	4a56      	ldr	r2, [pc, #344]	; (8007a10 <_strtod_l+0xb20>)
 80078b6:	4019      	ands	r1, r3
 80078b8:	4291      	cmp	r1, r2
 80078ba:	4682      	mov	sl, r0
 80078bc:	d95b      	bls.n	8007976 <_strtod_l+0xa86>
 80078be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d103      	bne.n	80078d0 <_strtod_l+0x9e0>
 80078c8:	9b08      	ldr	r3, [sp, #32]
 80078ca:	3301      	adds	r3, #1
 80078cc:	f43f ad2e 	beq.w	800732c <_strtod_l+0x43c>
 80078d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007a00 <_strtod_l+0xb10>
 80078d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80078d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078da:	4648      	mov	r0, r9
 80078dc:	f001 fbaf 	bl	800903e <_Bfree>
 80078e0:	9905      	ldr	r1, [sp, #20]
 80078e2:	4648      	mov	r0, r9
 80078e4:	f001 fbab 	bl	800903e <_Bfree>
 80078e8:	4641      	mov	r1, r8
 80078ea:	4648      	mov	r0, r9
 80078ec:	f001 fba7 	bl	800903e <_Bfree>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4648      	mov	r0, r9
 80078f4:	f001 fba3 	bl	800903e <_Bfree>
 80078f8:	e619      	b.n	800752e <_strtod_l+0x63e>
 80078fa:	f1ba 0f00 	cmp.w	sl, #0
 80078fe:	d11a      	bne.n	8007936 <_strtod_l+0xa46>
 8007900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007904:	b9eb      	cbnz	r3, 8007942 <_strtod_l+0xa52>
 8007906:	2200      	movs	r2, #0
 8007908:	4b3f      	ldr	r3, [pc, #252]	; (8007a08 <_strtod_l+0xb18>)
 800790a:	4630      	mov	r0, r6
 800790c:	4639      	mov	r1, r7
 800790e:	f7f9 f8e5 	bl	8000adc <__aeabi_dcmplt>
 8007912:	b9c8      	cbnz	r0, 8007948 <_strtod_l+0xa58>
 8007914:	4630      	mov	r0, r6
 8007916:	4639      	mov	r1, r7
 8007918:	2200      	movs	r2, #0
 800791a:	4b3e      	ldr	r3, [pc, #248]	; (8007a14 <_strtod_l+0xb24>)
 800791c:	f7f8 fe6c 	bl	80005f8 <__aeabi_dmul>
 8007920:	4606      	mov	r6, r0
 8007922:	460f      	mov	r7, r1
 8007924:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007928:	9618      	str	r6, [sp, #96]	; 0x60
 800792a:	9319      	str	r3, [sp, #100]	; 0x64
 800792c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007930:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007934:	e79c      	b.n	8007870 <_strtod_l+0x980>
 8007936:	f1ba 0f01 	cmp.w	sl, #1
 800793a:	d102      	bne.n	8007942 <_strtod_l+0xa52>
 800793c:	2d00      	cmp	r5, #0
 800793e:	f43f ad8e 	beq.w	800745e <_strtod_l+0x56e>
 8007942:	2200      	movs	r2, #0
 8007944:	4b34      	ldr	r3, [pc, #208]	; (8007a18 <_strtod_l+0xb28>)
 8007946:	e78f      	b.n	8007868 <_strtod_l+0x978>
 8007948:	2600      	movs	r6, #0
 800794a:	4f32      	ldr	r7, [pc, #200]	; (8007a14 <_strtod_l+0xb24>)
 800794c:	e7ea      	b.n	8007924 <_strtod_l+0xa34>
 800794e:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <_strtod_l+0xb24>)
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	2200      	movs	r2, #0
 8007956:	f7f8 fe4f 	bl	80005f8 <__aeabi_dmul>
 800795a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800795c:	4606      	mov	r6, r0
 800795e:	460f      	mov	r7, r1
 8007960:	b933      	cbnz	r3, 8007970 <_strtod_l+0xa80>
 8007962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007966:	9010      	str	r0, [sp, #64]	; 0x40
 8007968:	9311      	str	r3, [sp, #68]	; 0x44
 800796a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800796e:	e7df      	b.n	8007930 <_strtod_l+0xa40>
 8007970:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007974:	e7f9      	b.n	800796a <_strtod_l+0xa7a>
 8007976:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800797a:	9b04      	ldr	r3, [sp, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1ab      	bne.n	80078d8 <_strtod_l+0x9e8>
 8007980:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007984:	0d1b      	lsrs	r3, r3, #20
 8007986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007988:	051b      	lsls	r3, r3, #20
 800798a:	429a      	cmp	r2, r3
 800798c:	465d      	mov	r5, fp
 800798e:	d1a3      	bne.n	80078d8 <_strtod_l+0x9e8>
 8007990:	4639      	mov	r1, r7
 8007992:	4630      	mov	r0, r6
 8007994:	f7f9 f8e0 	bl	8000b58 <__aeabi_d2iz>
 8007998:	f7f8 fdc4 	bl	8000524 <__aeabi_i2d>
 800799c:	460b      	mov	r3, r1
 800799e:	4602      	mov	r2, r0
 80079a0:	4639      	mov	r1, r7
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7f8 fc70 	bl	8000288 <__aeabi_dsub>
 80079a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079aa:	4606      	mov	r6, r0
 80079ac:	460f      	mov	r7, r1
 80079ae:	b933      	cbnz	r3, 80079be <_strtod_l+0xace>
 80079b0:	f1ba 0f00 	cmp.w	sl, #0
 80079b4:	d103      	bne.n	80079be <_strtod_l+0xace>
 80079b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	d06d      	beq.n	8007a9a <_strtod_l+0xbaa>
 80079be:	a30a      	add	r3, pc, #40	; (adr r3, 80079e8 <_strtod_l+0xaf8>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f9 f888 	bl	8000adc <__aeabi_dcmplt>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f47f acb8 	bne.w	8007342 <_strtod_l+0x452>
 80079d2:	a307      	add	r3, pc, #28	; (adr r3, 80079f0 <_strtod_l+0xb00>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f9 f89c 	bl	8000b18 <__aeabi_dcmpgt>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f43f af79 	beq.w	80078d8 <_strtod_l+0x9e8>
 80079e6:	e4ac      	b.n	8007342 <_strtod_l+0x452>
 80079e8:	94a03595 	.word	0x94a03595
 80079ec:	3fdfffff 	.word	0x3fdfffff
 80079f0:	35afe535 	.word	0x35afe535
 80079f4:	3fe00000 	.word	0x3fe00000
 80079f8:	000fffff 	.word	0x000fffff
 80079fc:	7ff00000 	.word	0x7ff00000
 8007a00:	7fefffff 	.word	0x7fefffff
 8007a04:	39500000 	.word	0x39500000
 8007a08:	3ff00000 	.word	0x3ff00000
 8007a0c:	7fe00000 	.word	0x7fe00000
 8007a10:	7c9fffff 	.word	0x7c9fffff
 8007a14:	3fe00000 	.word	0x3fe00000
 8007a18:	bff00000 	.word	0xbff00000
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	b333      	cbz	r3, 8007a6e <_strtod_l+0xb7e>
 8007a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a26:	d822      	bhi.n	8007a6e <_strtod_l+0xb7e>
 8007a28:	a327      	add	r3, pc, #156	; (adr r3, 8007ac8 <_strtod_l+0xbd8>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	4630      	mov	r0, r6
 8007a30:	4639      	mov	r1, r7
 8007a32:	f7f9 f85d 	bl	8000af0 <__aeabi_dcmple>
 8007a36:	b1a0      	cbz	r0, 8007a62 <_strtod_l+0xb72>
 8007a38:	4639      	mov	r1, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7f9 f8b4 	bl	8000ba8 <__aeabi_d2uiz>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	bf08      	it	eq
 8007a44:	2001      	moveq	r0, #1
 8007a46:	f7f8 fd5d 	bl	8000504 <__aeabi_ui2d>
 8007a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	460f      	mov	r7, r1
 8007a50:	bb03      	cbnz	r3, 8007a94 <_strtod_l+0xba4>
 8007a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a56:	9012      	str	r0, [sp, #72]	; 0x48
 8007a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007a5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a66:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a6a:	1a9b      	subs	r3, r3, r2
 8007a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a6e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007a72:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007a76:	f001 fd79 	bl	800956c <__ulp>
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	ec53 2b10 	vmov	r2, r3, d0
 8007a80:	4659      	mov	r1, fp
 8007a82:	f7f8 fdb9 	bl	80005f8 <__aeabi_dmul>
 8007a86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a8a:	f7f8 fbff 	bl	800028c <__adddf3>
 8007a8e:	4682      	mov	sl, r0
 8007a90:	468b      	mov	fp, r1
 8007a92:	e772      	b.n	800797a <_strtod_l+0xa8a>
 8007a94:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007a98:	e7df      	b.n	8007a5a <_strtod_l+0xb6a>
 8007a9a:	a30d      	add	r3, pc, #52	; (adr r3, 8007ad0 <_strtod_l+0xbe0>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7f9 f81c 	bl	8000adc <__aeabi_dcmplt>
 8007aa4:	e79c      	b.n	80079e0 <_strtod_l+0xaf0>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	930d      	str	r3, [sp, #52]	; 0x34
 8007aaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007aac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	f7ff ba61 	b.w	8006f76 <_strtod_l+0x86>
 8007ab4:	2b65      	cmp	r3, #101	; 0x65
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	f43f ab4e 	beq.w	800715a <_strtod_l+0x26a>
 8007abe:	2101      	movs	r1, #1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	9104      	str	r1, [sp, #16]
 8007ac4:	f7ff bacb 	b.w	800705e <_strtod_l+0x16e>
 8007ac8:	ffc00000 	.word	0xffc00000
 8007acc:	41dfffff 	.word	0x41dfffff
 8007ad0:	94a03595 	.word	0x94a03595
 8007ad4:	3fcfffff 	.word	0x3fcfffff

08007ad8 <_strtod_r>:
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <_strtod_r+0x18>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	b410      	push	{r4}
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	4c04      	ldr	r4, [pc, #16]	; (8007af4 <_strtod_r+0x1c>)
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf08      	it	eq
 8007ae6:	4623      	moveq	r3, r4
 8007ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aec:	f7ff ba00 	b.w	8006ef0 <_strtod_l>
 8007af0:	2000001c 	.word	0x2000001c
 8007af4:	20000080 	.word	0x20000080

08007af8 <_strtol_l.isra.0>:
 8007af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	4692      	mov	sl, r2
 8007b02:	461e      	mov	r6, r3
 8007b04:	460f      	mov	r7, r1
 8007b06:	463d      	mov	r5, r7
 8007b08:	9808      	ldr	r0, [sp, #32]
 8007b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b0e:	f001 fa29 	bl	8008f64 <__locale_ctype_ptr_l>
 8007b12:	4420      	add	r0, r4
 8007b14:	7843      	ldrb	r3, [r0, #1]
 8007b16:	f013 0308 	ands.w	r3, r3, #8
 8007b1a:	d132      	bne.n	8007b82 <_strtol_l.isra.0+0x8a>
 8007b1c:	2c2d      	cmp	r4, #45	; 0x2d
 8007b1e:	d132      	bne.n	8007b86 <_strtol_l.isra.0+0x8e>
 8007b20:	787c      	ldrb	r4, [r7, #1]
 8007b22:	1cbd      	adds	r5, r7, #2
 8007b24:	2201      	movs	r2, #1
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d05d      	beq.n	8007be6 <_strtol_l.isra.0+0xee>
 8007b2a:	2e10      	cmp	r6, #16
 8007b2c:	d109      	bne.n	8007b42 <_strtol_l.isra.0+0x4a>
 8007b2e:	2c30      	cmp	r4, #48	; 0x30
 8007b30:	d107      	bne.n	8007b42 <_strtol_l.isra.0+0x4a>
 8007b32:	782b      	ldrb	r3, [r5, #0]
 8007b34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b38:	2b58      	cmp	r3, #88	; 0x58
 8007b3a:	d14f      	bne.n	8007bdc <_strtol_l.isra.0+0xe4>
 8007b3c:	786c      	ldrb	r4, [r5, #1]
 8007b3e:	2610      	movs	r6, #16
 8007b40:	3502      	adds	r5, #2
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	bf14      	ite	ne
 8007b46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007b4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007b4e:	2700      	movs	r7, #0
 8007b50:	fbb1 fcf6 	udiv	ip, r1, r6
 8007b54:	4638      	mov	r0, r7
 8007b56:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007b5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d817      	bhi.n	8007b92 <_strtol_l.isra.0+0x9a>
 8007b62:	461c      	mov	r4, r3
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	dd23      	ble.n	8007bb0 <_strtol_l.isra.0+0xb8>
 8007b68:	1c7b      	adds	r3, r7, #1
 8007b6a:	d007      	beq.n	8007b7c <_strtol_l.isra.0+0x84>
 8007b6c:	4584      	cmp	ip, r0
 8007b6e:	d31c      	bcc.n	8007baa <_strtol_l.isra.0+0xb2>
 8007b70:	d101      	bne.n	8007b76 <_strtol_l.isra.0+0x7e>
 8007b72:	45a6      	cmp	lr, r4
 8007b74:	db19      	blt.n	8007baa <_strtol_l.isra.0+0xb2>
 8007b76:	fb00 4006 	mla	r0, r0, r6, r4
 8007b7a:	2701      	movs	r7, #1
 8007b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b80:	e7eb      	b.n	8007b5a <_strtol_l.isra.0+0x62>
 8007b82:	462f      	mov	r7, r5
 8007b84:	e7bf      	b.n	8007b06 <_strtol_l.isra.0+0xe>
 8007b86:	2c2b      	cmp	r4, #43	; 0x2b
 8007b88:	bf04      	itt	eq
 8007b8a:	1cbd      	addeq	r5, r7, #2
 8007b8c:	787c      	ldrbeq	r4, [r7, #1]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	e7c9      	b.n	8007b26 <_strtol_l.isra.0+0x2e>
 8007b92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007b96:	2b19      	cmp	r3, #25
 8007b98:	d801      	bhi.n	8007b9e <_strtol_l.isra.0+0xa6>
 8007b9a:	3c37      	subs	r4, #55	; 0x37
 8007b9c:	e7e2      	b.n	8007b64 <_strtol_l.isra.0+0x6c>
 8007b9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007ba2:	2b19      	cmp	r3, #25
 8007ba4:	d804      	bhi.n	8007bb0 <_strtol_l.isra.0+0xb8>
 8007ba6:	3c57      	subs	r4, #87	; 0x57
 8007ba8:	e7dc      	b.n	8007b64 <_strtol_l.isra.0+0x6c>
 8007baa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007bae:	e7e5      	b.n	8007b7c <_strtol_l.isra.0+0x84>
 8007bb0:	1c7b      	adds	r3, r7, #1
 8007bb2:	d108      	bne.n	8007bc6 <_strtol_l.isra.0+0xce>
 8007bb4:	2322      	movs	r3, #34	; 0x22
 8007bb6:	f8c8 3000 	str.w	r3, [r8]
 8007bba:	4608      	mov	r0, r1
 8007bbc:	f1ba 0f00 	cmp.w	sl, #0
 8007bc0:	d107      	bne.n	8007bd2 <_strtol_l.isra.0+0xda>
 8007bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc6:	b102      	cbz	r2, 8007bca <_strtol_l.isra.0+0xd2>
 8007bc8:	4240      	negs	r0, r0
 8007bca:	f1ba 0f00 	cmp.w	sl, #0
 8007bce:	d0f8      	beq.n	8007bc2 <_strtol_l.isra.0+0xca>
 8007bd0:	b10f      	cbz	r7, 8007bd6 <_strtol_l.isra.0+0xde>
 8007bd2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007bd6:	f8ca 9000 	str.w	r9, [sl]
 8007bda:	e7f2      	b.n	8007bc2 <_strtol_l.isra.0+0xca>
 8007bdc:	2430      	movs	r4, #48	; 0x30
 8007bde:	2e00      	cmp	r6, #0
 8007be0:	d1af      	bne.n	8007b42 <_strtol_l.isra.0+0x4a>
 8007be2:	2608      	movs	r6, #8
 8007be4:	e7ad      	b.n	8007b42 <_strtol_l.isra.0+0x4a>
 8007be6:	2c30      	cmp	r4, #48	; 0x30
 8007be8:	d0a3      	beq.n	8007b32 <_strtol_l.isra.0+0x3a>
 8007bea:	260a      	movs	r6, #10
 8007bec:	e7a9      	b.n	8007b42 <_strtol_l.isra.0+0x4a>
	...

08007bf0 <_strtol_r>:
 8007bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bf2:	4c06      	ldr	r4, [pc, #24]	; (8007c0c <_strtol_r+0x1c>)
 8007bf4:	4d06      	ldr	r5, [pc, #24]	; (8007c10 <_strtol_r+0x20>)
 8007bf6:	6824      	ldr	r4, [r4, #0]
 8007bf8:	6a24      	ldr	r4, [r4, #32]
 8007bfa:	2c00      	cmp	r4, #0
 8007bfc:	bf08      	it	eq
 8007bfe:	462c      	moveq	r4, r5
 8007c00:	9400      	str	r4, [sp, #0]
 8007c02:	f7ff ff79 	bl	8007af8 <_strtol_l.isra.0>
 8007c06:	b003      	add	sp, #12
 8007c08:	bd30      	pop	{r4, r5, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000001c 	.word	0x2000001c
 8007c10:	20000080 	.word	0x20000080

08007c14 <__utoa>:
 8007c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c16:	4b1d      	ldr	r3, [pc, #116]	; (8007c8c <__utoa+0x78>)
 8007c18:	b08b      	sub	sp, #44	; 0x2c
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	466e      	mov	r6, sp
 8007c20:	f103 0c20 	add.w	ip, r3, #32
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	6859      	ldr	r1, [r3, #4]
 8007c28:	4637      	mov	r7, r6
 8007c2a:	c703      	stmia	r7!, {r0, r1}
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	4563      	cmp	r3, ip
 8007c30:	463e      	mov	r6, r7
 8007c32:	d1f7      	bne.n	8007c24 <__utoa+0x10>
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	791b      	ldrb	r3, [r3, #4]
 8007c38:	713b      	strb	r3, [r7, #4]
 8007c3a:	1e93      	subs	r3, r2, #2
 8007c3c:	2b22      	cmp	r3, #34	; 0x22
 8007c3e:	6038      	str	r0, [r7, #0]
 8007c40:	f04f 0300 	mov.w	r3, #0
 8007c44:	d904      	bls.n	8007c50 <__utoa+0x3c>
 8007c46:	7023      	strb	r3, [r4, #0]
 8007c48:	461c      	mov	r4, r3
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	b00b      	add	sp, #44	; 0x2c
 8007c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c50:	1e66      	subs	r6, r4, #1
 8007c52:	fbb5 f0f2 	udiv	r0, r5, r2
 8007c56:	af0a      	add	r7, sp, #40	; 0x28
 8007c58:	fb02 5510 	mls	r5, r2, r0, r5
 8007c5c:	443d      	add	r5, r7
 8007c5e:	1c59      	adds	r1, r3, #1
 8007c60:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007c64:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007c68:	4605      	mov	r5, r0
 8007c6a:	b968      	cbnz	r0, 8007c88 <__utoa+0x74>
 8007c6c:	5460      	strb	r0, [r4, r1]
 8007c6e:	4423      	add	r3, r4
 8007c70:	4622      	mov	r2, r4
 8007c72:	1b19      	subs	r1, r3, r4
 8007c74:	1b10      	subs	r0, r2, r4
 8007c76:	4281      	cmp	r1, r0
 8007c78:	dde7      	ble.n	8007c4a <__utoa+0x36>
 8007c7a:	7811      	ldrb	r1, [r2, #0]
 8007c7c:	7818      	ldrb	r0, [r3, #0]
 8007c7e:	f802 0b01 	strb.w	r0, [r2], #1
 8007c82:	f803 1901 	strb.w	r1, [r3], #-1
 8007c86:	e7f4      	b.n	8007c72 <__utoa+0x5e>
 8007c88:	460b      	mov	r3, r1
 8007c8a:	e7e2      	b.n	8007c52 <__utoa+0x3e>
 8007c8c:	0800a898 	.word	0x0800a898

08007c90 <quorem>:
 8007c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	6903      	ldr	r3, [r0, #16]
 8007c96:	690c      	ldr	r4, [r1, #16]
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	f2c0 8082 	blt.w	8007da4 <quorem+0x114>
 8007ca0:	3c01      	subs	r4, #1
 8007ca2:	f101 0714 	add.w	r7, r1, #20
 8007ca6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007caa:	f100 0614 	add.w	r6, r0, #20
 8007cae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cb2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cb6:	eb06 030c 	add.w	r3, r6, ip
 8007cba:	3501      	adds	r5, #1
 8007cbc:	eb07 090c 	add.w	r9, r7, ip
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	fbb0 f5f5 	udiv	r5, r0, r5
 8007cc6:	b395      	cbz	r5, 8007d2e <quorem+0x9e>
 8007cc8:	f04f 0a00 	mov.w	sl, #0
 8007ccc:	4638      	mov	r0, r7
 8007cce:	46b6      	mov	lr, r6
 8007cd0:	46d3      	mov	fp, sl
 8007cd2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cd6:	b293      	uxth	r3, r2
 8007cd8:	fb05 a303 	mla	r3, r5, r3, sl
 8007cdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	ebab 0303 	sub.w	r3, fp, r3
 8007ce6:	0c12      	lsrs	r2, r2, #16
 8007ce8:	f8de b000 	ldr.w	fp, [lr]
 8007cec:	fb05 a202 	mla	r2, r5, r2, sl
 8007cf0:	fa13 f38b 	uxtah	r3, r3, fp
 8007cf4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007cf8:	fa1f fb82 	uxth.w	fp, r2
 8007cfc:	f8de 2000 	ldr.w	r2, [lr]
 8007d00:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d0e:	4581      	cmp	r9, r0
 8007d10:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d14:	f84e 3b04 	str.w	r3, [lr], #4
 8007d18:	d2db      	bcs.n	8007cd2 <quorem+0x42>
 8007d1a:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d1e:	b933      	cbnz	r3, 8007d2e <quorem+0x9e>
 8007d20:	9b01      	ldr	r3, [sp, #4]
 8007d22:	3b04      	subs	r3, #4
 8007d24:	429e      	cmp	r6, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	d330      	bcc.n	8007d8c <quorem+0xfc>
 8007d2a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f001 fba4 	bl	800947c <__mcmp>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	db25      	blt.n	8007d84 <quorem+0xf4>
 8007d38:	3501      	adds	r5, #1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f04f 0c00 	mov.w	ip, #0
 8007d40:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d44:	f8d0 e000 	ldr.w	lr, [r0]
 8007d48:	b293      	uxth	r3, r2
 8007d4a:	ebac 0303 	sub.w	r3, ip, r3
 8007d4e:	0c12      	lsrs	r2, r2, #16
 8007d50:	fa13 f38e 	uxtah	r3, r3, lr
 8007d54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d62:	45b9      	cmp	r9, r7
 8007d64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d68:	f840 3b04 	str.w	r3, [r0], #4
 8007d6c:	d2e8      	bcs.n	8007d40 <quorem+0xb0>
 8007d6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d76:	b92a      	cbnz	r2, 8007d84 <quorem+0xf4>
 8007d78:	3b04      	subs	r3, #4
 8007d7a:	429e      	cmp	r6, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	d30b      	bcc.n	8007d98 <quorem+0x108>
 8007d80:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d84:	4628      	mov	r0, r5
 8007d86:	b003      	add	sp, #12
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	6812      	ldr	r2, [r2, #0]
 8007d8e:	3b04      	subs	r3, #4
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d1ca      	bne.n	8007d2a <quorem+0x9a>
 8007d94:	3c01      	subs	r4, #1
 8007d96:	e7c5      	b.n	8007d24 <quorem+0x94>
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	3b04      	subs	r3, #4
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d1ef      	bne.n	8007d80 <quorem+0xf0>
 8007da0:	3c01      	subs	r4, #1
 8007da2:	e7ea      	b.n	8007d7a <quorem+0xea>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7ee      	b.n	8007d86 <quorem+0xf6>

08007da8 <_dtoa_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	ec57 6b10 	vmov	r6, r7, d0
 8007db0:	b097      	sub	sp, #92	; 0x5c
 8007db2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007db4:	9106      	str	r1, [sp, #24]
 8007db6:	4604      	mov	r4, r0
 8007db8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dba:	9312      	str	r3, [sp, #72]	; 0x48
 8007dbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007dc0:	e9cd 6700 	strd	r6, r7, [sp]
 8007dc4:	b93d      	cbnz	r5, 8007dd6 <_dtoa_r+0x2e>
 8007dc6:	2010      	movs	r0, #16
 8007dc8:	f001 f8e0 	bl	8008f8c <malloc>
 8007dcc:	6260      	str	r0, [r4, #36]	; 0x24
 8007dce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dd2:	6005      	str	r5, [r0, #0]
 8007dd4:	60c5      	str	r5, [r0, #12]
 8007dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd8:	6819      	ldr	r1, [r3, #0]
 8007dda:	b151      	cbz	r1, 8007df2 <_dtoa_r+0x4a>
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	604a      	str	r2, [r1, #4]
 8007de0:	2301      	movs	r3, #1
 8007de2:	4093      	lsls	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
 8007de6:	4620      	mov	r0, r4
 8007de8:	f001 f929 	bl	800903e <_Bfree>
 8007dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	1e3b      	subs	r3, r7, #0
 8007df4:	bfbb      	ittet	lt
 8007df6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dfa:	9301      	strlt	r3, [sp, #4]
 8007dfc:	2300      	movge	r3, #0
 8007dfe:	2201      	movlt	r2, #1
 8007e00:	bfac      	ite	ge
 8007e02:	f8c8 3000 	strge.w	r3, [r8]
 8007e06:	f8c8 2000 	strlt.w	r2, [r8]
 8007e0a:	4baf      	ldr	r3, [pc, #700]	; (80080c8 <_dtoa_r+0x320>)
 8007e0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e10:	ea33 0308 	bics.w	r3, r3, r8
 8007e14:	d114      	bne.n	8007e40 <_dtoa_r+0x98>
 8007e16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e18:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	9b00      	ldr	r3, [sp, #0]
 8007e20:	b923      	cbnz	r3, 8007e2c <_dtoa_r+0x84>
 8007e22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e26:	2800      	cmp	r0, #0
 8007e28:	f000 8542 	beq.w	80088b0 <_dtoa_r+0xb08>
 8007e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80080dc <_dtoa_r+0x334>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 8544 	beq.w	80088c0 <_dtoa_r+0xb18>
 8007e38:	f10b 0303 	add.w	r3, fp, #3
 8007e3c:	f000 bd3e 	b.w	80088bc <_dtoa_r+0xb14>
 8007e40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	4630      	mov	r0, r6
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	f7f8 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e50:	4681      	mov	r9, r0
 8007e52:	b168      	cbz	r0, 8007e70 <_dtoa_r+0xc8>
 8007e54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e56:	2301      	movs	r3, #1
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 8524 	beq.w	80088aa <_dtoa_r+0xb02>
 8007e62:	4b9a      	ldr	r3, [pc, #616]	; (80080cc <_dtoa_r+0x324>)
 8007e64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e66:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	f000 bd28 	b.w	80088c0 <_dtoa_r+0xb18>
 8007e70:	aa14      	add	r2, sp, #80	; 0x50
 8007e72:	a915      	add	r1, sp, #84	; 0x54
 8007e74:	ec47 6b10 	vmov	d0, r6, r7
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f001 fbed 	bl	8009658 <__d2b>
 8007e7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e82:	9004      	str	r0, [sp, #16]
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	d07c      	beq.n	8007f82 <_dtoa_r+0x1da>
 8007e88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007e90:	46b2      	mov	sl, r6
 8007e92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4b8b      	ldr	r3, [pc, #556]	; (80080d0 <_dtoa_r+0x328>)
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	f7f8 f9ef 	bl	8000288 <__aeabi_dsub>
 8007eaa:	a381      	add	r3, pc, #516	; (adr r3, 80080b0 <_dtoa_r+0x308>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	a380      	add	r3, pc, #512	; (adr r3, 80080b8 <_dtoa_r+0x310>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 f9e7 	bl	800028c <__adddf3>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	460f      	mov	r7, r1
 8007ec4:	f7f8 fb2e 	bl	8000524 <__aeabi_i2d>
 8007ec8:	a37d      	add	r3, pc, #500	; (adr r3, 80080c0 <_dtoa_r+0x318>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7f8 f9d7 	bl	800028c <__adddf3>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	f7f8 fe39 	bl	8000b58 <__aeabi_d2iz>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4682      	mov	sl, r0
 8007eea:	2300      	movs	r3, #0
 8007eec:	4630      	mov	r0, r6
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 fdf4 	bl	8000adc <__aeabi_dcmplt>
 8007ef4:	b148      	cbz	r0, 8007f0a <_dtoa_r+0x162>
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	f7f8 fb14 	bl	8000524 <__aeabi_i2d>
 8007efc:	4632      	mov	r2, r6
 8007efe:	463b      	mov	r3, r7
 8007f00:	f7f8 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f04:	b908      	cbnz	r0, 8007f0a <_dtoa_r+0x162>
 8007f06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f0a:	f1ba 0f16 	cmp.w	sl, #22
 8007f0e:	d859      	bhi.n	8007fc4 <_dtoa_r+0x21c>
 8007f10:	4970      	ldr	r1, [pc, #448]	; (80080d4 <_dtoa_r+0x32c>)
 8007f12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f1e:	f7f8 fdfb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d050      	beq.n	8007fc8 <_dtoa_r+0x220>
 8007f26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f30:	1b5d      	subs	r5, r3, r5
 8007f32:	f1b5 0801 	subs.w	r8, r5, #1
 8007f36:	bf49      	itett	mi
 8007f38:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f3c:	2300      	movpl	r3, #0
 8007f3e:	9305      	strmi	r3, [sp, #20]
 8007f40:	f04f 0800 	movmi.w	r8, #0
 8007f44:	bf58      	it	pl
 8007f46:	9305      	strpl	r3, [sp, #20]
 8007f48:	f1ba 0f00 	cmp.w	sl, #0
 8007f4c:	db3e      	blt.n	8007fcc <_dtoa_r+0x224>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	44d0      	add	r8, sl
 8007f52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	9b06      	ldr	r3, [sp, #24]
 8007f5a:	2b09      	cmp	r3, #9
 8007f5c:	f200 8090 	bhi.w	8008080 <_dtoa_r+0x2d8>
 8007f60:	2b05      	cmp	r3, #5
 8007f62:	bfc4      	itt	gt
 8007f64:	3b04      	subgt	r3, #4
 8007f66:	9306      	strgt	r3, [sp, #24]
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f6e:	bfcc      	ite	gt
 8007f70:	2500      	movgt	r5, #0
 8007f72:	2501      	movle	r5, #1
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	f200 808f 	bhi.w	8008098 <_dtoa_r+0x2f0>
 8007f7a:	e8df f003 	tbb	[pc, r3]
 8007f7e:	7f7d      	.short	0x7f7d
 8007f80:	7131      	.short	0x7131
 8007f82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007f86:	441d      	add	r5, r3
 8007f88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007f8c:	2820      	cmp	r0, #32
 8007f8e:	dd13      	ble.n	8007fb8 <_dtoa_r+0x210>
 8007f90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	fa08 f800 	lsl.w	r8, r8, r0
 8007f9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007f9e:	fa23 f000 	lsr.w	r0, r3, r0
 8007fa2:	ea48 0000 	orr.w	r0, r8, r0
 8007fa6:	f7f8 faad 	bl	8000504 <__aeabi_ui2d>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4682      	mov	sl, r0
 8007fae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007fb2:	3d01      	subs	r5, #1
 8007fb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fb6:	e772      	b.n	8007e9e <_dtoa_r+0xf6>
 8007fb8:	9b00      	ldr	r3, [sp, #0]
 8007fba:	f1c0 0020 	rsb	r0, r0, #32
 8007fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8007fc2:	e7f0      	b.n	8007fa6 <_dtoa_r+0x1fe>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e7b1      	b.n	8007f2c <_dtoa_r+0x184>
 8007fc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fca:	e7b0      	b.n	8007f2e <_dtoa_r+0x186>
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	eba3 030a 	sub.w	r3, r3, sl
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	f1ca 0300 	rsb	r3, sl, #0
 8007fd8:	9307      	str	r3, [sp, #28]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8007fde:	e7bb      	b.n	8007f58 <_dtoa_r+0x1b0>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd59      	ble.n	800809e <_dtoa_r+0x2f6>
 8007fea:	9302      	str	r3, [sp, #8]
 8007fec:	4699      	mov	r9, r3
 8007fee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	6072      	str	r2, [r6, #4]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	f102 0014 	add.w	r0, r2, #20
 8007ffa:	4298      	cmp	r0, r3
 8007ffc:	6871      	ldr	r1, [r6, #4]
 8007ffe:	d953      	bls.n	80080a8 <_dtoa_r+0x300>
 8008000:	4620      	mov	r0, r4
 8008002:	f000 ffe8 	bl	8008fd6 <_Balloc>
 8008006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008008:	6030      	str	r0, [r6, #0]
 800800a:	f1b9 0f0e 	cmp.w	r9, #14
 800800e:	f8d3 b000 	ldr.w	fp, [r3]
 8008012:	f200 80e6 	bhi.w	80081e2 <_dtoa_r+0x43a>
 8008016:	2d00      	cmp	r5, #0
 8008018:	f000 80e3 	beq.w	80081e2 <_dtoa_r+0x43a>
 800801c:	ed9d 7b00 	vldr	d7, [sp]
 8008020:	f1ba 0f00 	cmp.w	sl, #0
 8008024:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008028:	dd74      	ble.n	8008114 <_dtoa_r+0x36c>
 800802a:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <_dtoa_r+0x32c>)
 800802c:	f00a 030f 	and.w	r3, sl, #15
 8008030:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008034:	ed93 7b00 	vldr	d7, [r3]
 8008038:	ea4f 162a 	mov.w	r6, sl, asr #4
 800803c:	06f0      	lsls	r0, r6, #27
 800803e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008042:	d565      	bpl.n	8008110 <_dtoa_r+0x368>
 8008044:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <_dtoa_r+0x330>)
 8008046:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800804a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800804e:	f7f8 fbfd 	bl	800084c <__aeabi_ddiv>
 8008052:	e9cd 0100 	strd	r0, r1, [sp]
 8008056:	f006 060f 	and.w	r6, r6, #15
 800805a:	2503      	movs	r5, #3
 800805c:	4f1e      	ldr	r7, [pc, #120]	; (80080d8 <_dtoa_r+0x330>)
 800805e:	e04c      	b.n	80080fa <_dtoa_r+0x352>
 8008060:	2301      	movs	r3, #1
 8008062:	930a      	str	r3, [sp, #40]	; 0x28
 8008064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008066:	4453      	add	r3, sl
 8008068:	f103 0901 	add.w	r9, r3, #1
 800806c:	9302      	str	r3, [sp, #8]
 800806e:	464b      	mov	r3, r9
 8008070:	2b01      	cmp	r3, #1
 8008072:	bfb8      	it	lt
 8008074:	2301      	movlt	r3, #1
 8008076:	e7ba      	b.n	8007fee <_dtoa_r+0x246>
 8008078:	2300      	movs	r3, #0
 800807a:	e7b2      	b.n	8007fe2 <_dtoa_r+0x23a>
 800807c:	2300      	movs	r3, #0
 800807e:	e7f0      	b.n	8008062 <_dtoa_r+0x2ba>
 8008080:	2501      	movs	r5, #1
 8008082:	2300      	movs	r3, #0
 8008084:	9306      	str	r3, [sp, #24]
 8008086:	950a      	str	r5, [sp, #40]	; 0x28
 8008088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800808c:	9302      	str	r3, [sp, #8]
 800808e:	4699      	mov	r9, r3
 8008090:	2200      	movs	r2, #0
 8008092:	2312      	movs	r3, #18
 8008094:	920b      	str	r2, [sp, #44]	; 0x2c
 8008096:	e7aa      	b.n	8007fee <_dtoa_r+0x246>
 8008098:	2301      	movs	r3, #1
 800809a:	930a      	str	r3, [sp, #40]	; 0x28
 800809c:	e7f4      	b.n	8008088 <_dtoa_r+0x2e0>
 800809e:	2301      	movs	r3, #1
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	4699      	mov	r9, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	e7f5      	b.n	8008094 <_dtoa_r+0x2ec>
 80080a8:	3101      	adds	r1, #1
 80080aa:	6071      	str	r1, [r6, #4]
 80080ac:	0052      	lsls	r2, r2, #1
 80080ae:	e7a2      	b.n	8007ff6 <_dtoa_r+0x24e>
 80080b0:	636f4361 	.word	0x636f4361
 80080b4:	3fd287a7 	.word	0x3fd287a7
 80080b8:	8b60c8b3 	.word	0x8b60c8b3
 80080bc:	3fc68a28 	.word	0x3fc68a28
 80080c0:	509f79fb 	.word	0x509f79fb
 80080c4:	3fd34413 	.word	0x3fd34413
 80080c8:	7ff00000 	.word	0x7ff00000
 80080cc:	0800a81d 	.word	0x0800a81d
 80080d0:	3ff80000 	.word	0x3ff80000
 80080d4:	0800a900 	.word	0x0800a900
 80080d8:	0800a8d8 	.word	0x0800a8d8
 80080dc:	0800a8c6 	.word	0x0800a8c6
 80080e0:	07f1      	lsls	r1, r6, #31
 80080e2:	d508      	bpl.n	80080f6 <_dtoa_r+0x34e>
 80080e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ec:	f7f8 fa84 	bl	80005f8 <__aeabi_dmul>
 80080f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080f4:	3501      	adds	r5, #1
 80080f6:	1076      	asrs	r6, r6, #1
 80080f8:	3708      	adds	r7, #8
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d1f0      	bne.n	80080e0 <_dtoa_r+0x338>
 80080fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008102:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008106:	f7f8 fba1 	bl	800084c <__aeabi_ddiv>
 800810a:	e9cd 0100 	strd	r0, r1, [sp]
 800810e:	e01a      	b.n	8008146 <_dtoa_r+0x39e>
 8008110:	2502      	movs	r5, #2
 8008112:	e7a3      	b.n	800805c <_dtoa_r+0x2b4>
 8008114:	f000 80a0 	beq.w	8008258 <_dtoa_r+0x4b0>
 8008118:	f1ca 0600 	rsb	r6, sl, #0
 800811c:	4b9f      	ldr	r3, [pc, #636]	; (800839c <_dtoa_r+0x5f4>)
 800811e:	4fa0      	ldr	r7, [pc, #640]	; (80083a0 <_dtoa_r+0x5f8>)
 8008120:	f006 020f 	and.w	r2, r6, #15
 8008124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	e9cd 0100 	strd	r0, r1, [sp]
 8008138:	1136      	asrs	r6, r6, #4
 800813a:	2300      	movs	r3, #0
 800813c:	2502      	movs	r5, #2
 800813e:	2e00      	cmp	r6, #0
 8008140:	d17f      	bne.n	8008242 <_dtoa_r+0x49a>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e1      	bne.n	800810a <_dtoa_r+0x362>
 8008146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8087 	beq.w	800825c <_dtoa_r+0x4b4>
 800814e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008152:	2200      	movs	r2, #0
 8008154:	4b93      	ldr	r3, [pc, #588]	; (80083a4 <_dtoa_r+0x5fc>)
 8008156:	4630      	mov	r0, r6
 8008158:	4639      	mov	r1, r7
 800815a:	f7f8 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800815e:	2800      	cmp	r0, #0
 8008160:	d07c      	beq.n	800825c <_dtoa_r+0x4b4>
 8008162:	f1b9 0f00 	cmp.w	r9, #0
 8008166:	d079      	beq.n	800825c <_dtoa_r+0x4b4>
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dd35      	ble.n	80081da <_dtoa_r+0x432>
 800816e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	4639      	mov	r1, r7
 8008176:	2200      	movs	r2, #0
 8008178:	4b8b      	ldr	r3, [pc, #556]	; (80083a8 <_dtoa_r+0x600>)
 800817a:	4630      	mov	r0, r6
 800817c:	f7f8 fa3c 	bl	80005f8 <__aeabi_dmul>
 8008180:	e9cd 0100 	strd	r0, r1, [sp]
 8008184:	9f02      	ldr	r7, [sp, #8]
 8008186:	3501      	adds	r5, #1
 8008188:	4628      	mov	r0, r5
 800818a:	f7f8 f9cb 	bl	8000524 <__aeabi_i2d>
 800818e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008192:	f7f8 fa31 	bl	80005f8 <__aeabi_dmul>
 8008196:	2200      	movs	r2, #0
 8008198:	4b84      	ldr	r3, [pc, #528]	; (80083ac <_dtoa_r+0x604>)
 800819a:	f7f8 f877 	bl	800028c <__adddf3>
 800819e:	4605      	mov	r5, r0
 80081a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081a4:	2f00      	cmp	r7, #0
 80081a6:	d15d      	bne.n	8008264 <_dtoa_r+0x4bc>
 80081a8:	2200      	movs	r2, #0
 80081aa:	4b81      	ldr	r3, [pc, #516]	; (80083b0 <_dtoa_r+0x608>)
 80081ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b0:	f7f8 f86a 	bl	8000288 <__aeabi_dsub>
 80081b4:	462a      	mov	r2, r5
 80081b6:	4633      	mov	r3, r6
 80081b8:	e9cd 0100 	strd	r0, r1, [sp]
 80081bc:	f7f8 fcac 	bl	8000b18 <__aeabi_dcmpgt>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f040 8288 	bne.w	80086d6 <_dtoa_r+0x92e>
 80081c6:	462a      	mov	r2, r5
 80081c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d0:	f7f8 fc84 	bl	8000adc <__aeabi_dcmplt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f040 827c 	bne.w	80086d2 <_dtoa_r+0x92a>
 80081da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081de:	e9cd 2300 	strd	r2, r3, [sp]
 80081e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f2c0 8150 	blt.w	800848a <_dtoa_r+0x6e2>
 80081ea:	f1ba 0f0e 	cmp.w	sl, #14
 80081ee:	f300 814c 	bgt.w	800848a <_dtoa_r+0x6e2>
 80081f2:	4b6a      	ldr	r3, [pc, #424]	; (800839c <_dtoa_r+0x5f4>)
 80081f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081f8:	ed93 7b00 	vldr	d7, [r3]
 80081fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008204:	f280 80d8 	bge.w	80083b8 <_dtoa_r+0x610>
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	f300 80d4 	bgt.w	80083b8 <_dtoa_r+0x610>
 8008210:	f040 825e 	bne.w	80086d0 <_dtoa_r+0x928>
 8008214:	2200      	movs	r2, #0
 8008216:	4b66      	ldr	r3, [pc, #408]	; (80083b0 <_dtoa_r+0x608>)
 8008218:	ec51 0b17 	vmov	r0, r1, d7
 800821c:	f7f8 f9ec 	bl	80005f8 <__aeabi_dmul>
 8008220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008224:	f7f8 fc6e 	bl	8000b04 <__aeabi_dcmpge>
 8008228:	464f      	mov	r7, r9
 800822a:	464e      	mov	r6, r9
 800822c:	2800      	cmp	r0, #0
 800822e:	f040 8234 	bne.w	800869a <_dtoa_r+0x8f2>
 8008232:	2331      	movs	r3, #49	; 0x31
 8008234:	f10b 0501 	add.w	r5, fp, #1
 8008238:	f88b 3000 	strb.w	r3, [fp]
 800823c:	f10a 0a01 	add.w	sl, sl, #1
 8008240:	e22f      	b.n	80086a2 <_dtoa_r+0x8fa>
 8008242:	07f2      	lsls	r2, r6, #31
 8008244:	d505      	bpl.n	8008252 <_dtoa_r+0x4aa>
 8008246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800824a:	f7f8 f9d5 	bl	80005f8 <__aeabi_dmul>
 800824e:	3501      	adds	r5, #1
 8008250:	2301      	movs	r3, #1
 8008252:	1076      	asrs	r6, r6, #1
 8008254:	3708      	adds	r7, #8
 8008256:	e772      	b.n	800813e <_dtoa_r+0x396>
 8008258:	2502      	movs	r5, #2
 800825a:	e774      	b.n	8008146 <_dtoa_r+0x39e>
 800825c:	f8cd a020 	str.w	sl, [sp, #32]
 8008260:	464f      	mov	r7, r9
 8008262:	e791      	b.n	8008188 <_dtoa_r+0x3e0>
 8008264:	4b4d      	ldr	r3, [pc, #308]	; (800839c <_dtoa_r+0x5f4>)
 8008266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800826a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800826e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008270:	2b00      	cmp	r3, #0
 8008272:	d047      	beq.n	8008304 <_dtoa_r+0x55c>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	2000      	movs	r0, #0
 800827a:	494e      	ldr	r1, [pc, #312]	; (80083b4 <_dtoa_r+0x60c>)
 800827c:	f7f8 fae6 	bl	800084c <__aeabi_ddiv>
 8008280:	462a      	mov	r2, r5
 8008282:	4633      	mov	r3, r6
 8008284:	f7f8 f800 	bl	8000288 <__aeabi_dsub>
 8008288:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800828c:	465d      	mov	r5, fp
 800828e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008292:	f7f8 fc61 	bl	8000b58 <__aeabi_d2iz>
 8008296:	4606      	mov	r6, r0
 8008298:	f7f8 f944 	bl	8000524 <__aeabi_i2d>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082a4:	f7f7 fff0 	bl	8000288 <__aeabi_dsub>
 80082a8:	3630      	adds	r6, #48	; 0x30
 80082aa:	f805 6b01 	strb.w	r6, [r5], #1
 80082ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082b2:	e9cd 0100 	strd	r0, r1, [sp]
 80082b6:	f7f8 fc11 	bl	8000adc <__aeabi_dcmplt>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d163      	bne.n	8008386 <_dtoa_r+0x5de>
 80082be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082c2:	2000      	movs	r0, #0
 80082c4:	4937      	ldr	r1, [pc, #220]	; (80083a4 <_dtoa_r+0x5fc>)
 80082c6:	f7f7 ffdf 	bl	8000288 <__aeabi_dsub>
 80082ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082ce:	f7f8 fc05 	bl	8000adc <__aeabi_dcmplt>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f040 80b7 	bne.w	8008446 <_dtoa_r+0x69e>
 80082d8:	eba5 030b 	sub.w	r3, r5, fp
 80082dc:	429f      	cmp	r7, r3
 80082de:	f77f af7c 	ble.w	80081da <_dtoa_r+0x432>
 80082e2:	2200      	movs	r2, #0
 80082e4:	4b30      	ldr	r3, [pc, #192]	; (80083a8 <_dtoa_r+0x600>)
 80082e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082ea:	f7f8 f985 	bl	80005f8 <__aeabi_dmul>
 80082ee:	2200      	movs	r2, #0
 80082f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082f4:	4b2c      	ldr	r3, [pc, #176]	; (80083a8 <_dtoa_r+0x600>)
 80082f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082fa:	f7f8 f97d 	bl	80005f8 <__aeabi_dmul>
 80082fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008302:	e7c4      	b.n	800828e <_dtoa_r+0x4e6>
 8008304:	462a      	mov	r2, r5
 8008306:	4633      	mov	r3, r6
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008310:	eb0b 0507 	add.w	r5, fp, r7
 8008314:	465e      	mov	r6, fp
 8008316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831a:	f7f8 fc1d 	bl	8000b58 <__aeabi_d2iz>
 800831e:	4607      	mov	r7, r0
 8008320:	f7f8 f900 	bl	8000524 <__aeabi_i2d>
 8008324:	3730      	adds	r7, #48	; 0x30
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800832e:	f7f7 ffab 	bl	8000288 <__aeabi_dsub>
 8008332:	f806 7b01 	strb.w	r7, [r6], #1
 8008336:	42ae      	cmp	r6, r5
 8008338:	e9cd 0100 	strd	r0, r1, [sp]
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	d126      	bne.n	8008390 <_dtoa_r+0x5e8>
 8008342:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <_dtoa_r+0x60c>)
 8008344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008348:	f7f7 ffa0 	bl	800028c <__adddf3>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008354:	f7f8 fbe0 	bl	8000b18 <__aeabi_dcmpgt>
 8008358:	2800      	cmp	r0, #0
 800835a:	d174      	bne.n	8008446 <_dtoa_r+0x69e>
 800835c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008360:	2000      	movs	r0, #0
 8008362:	4914      	ldr	r1, [pc, #80]	; (80083b4 <_dtoa_r+0x60c>)
 8008364:	f7f7 ff90 	bl	8000288 <__aeabi_dsub>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008370:	f7f8 fbb4 	bl	8000adc <__aeabi_dcmplt>
 8008374:	2800      	cmp	r0, #0
 8008376:	f43f af30 	beq.w	80081da <_dtoa_r+0x432>
 800837a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008384:	d002      	beq.n	800838c <_dtoa_r+0x5e4>
 8008386:	f8dd a020 	ldr.w	sl, [sp, #32]
 800838a:	e04a      	b.n	8008422 <_dtoa_r+0x67a>
 800838c:	4615      	mov	r5, r2
 800838e:	e7f4      	b.n	800837a <_dtoa_r+0x5d2>
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <_dtoa_r+0x600>)
 8008392:	f7f8 f931 	bl	80005f8 <__aeabi_dmul>
 8008396:	e9cd 0100 	strd	r0, r1, [sp]
 800839a:	e7bc      	b.n	8008316 <_dtoa_r+0x56e>
 800839c:	0800a900 	.word	0x0800a900
 80083a0:	0800a8d8 	.word	0x0800a8d8
 80083a4:	3ff00000 	.word	0x3ff00000
 80083a8:	40240000 	.word	0x40240000
 80083ac:	401c0000 	.word	0x401c0000
 80083b0:	40140000 	.word	0x40140000
 80083b4:	3fe00000 	.word	0x3fe00000
 80083b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083bc:	465d      	mov	r5, fp
 80083be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c2:	4630      	mov	r0, r6
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f8 fa41 	bl	800084c <__aeabi_ddiv>
 80083ca:	f7f8 fbc5 	bl	8000b58 <__aeabi_d2iz>
 80083ce:	4680      	mov	r8, r0
 80083d0:	f7f8 f8a8 	bl	8000524 <__aeabi_i2d>
 80083d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083d8:	f7f8 f90e 	bl	80005f8 <__aeabi_dmul>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80083e8:	f7f7 ff4e 	bl	8000288 <__aeabi_dsub>
 80083ec:	f805 6b01 	strb.w	r6, [r5], #1
 80083f0:	eba5 060b 	sub.w	r6, r5, fp
 80083f4:	45b1      	cmp	r9, r6
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	d139      	bne.n	8008470 <_dtoa_r+0x6c8>
 80083fc:	f7f7 ff46 	bl	800028c <__adddf3>
 8008400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	f7f8 fb86 	bl	8000b18 <__aeabi_dcmpgt>
 800840c:	b9c8      	cbnz	r0, 8008442 <_dtoa_r+0x69a>
 800840e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008412:	4630      	mov	r0, r6
 8008414:	4639      	mov	r1, r7
 8008416:	f7f8 fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800841a:	b110      	cbz	r0, 8008422 <_dtoa_r+0x67a>
 800841c:	f018 0f01 	tst.w	r8, #1
 8008420:	d10f      	bne.n	8008442 <_dtoa_r+0x69a>
 8008422:	9904      	ldr	r1, [sp, #16]
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fe0a 	bl	800903e <_Bfree>
 800842a:	2300      	movs	r3, #0
 800842c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800842e:	702b      	strb	r3, [r5, #0]
 8008430:	f10a 0301 	add.w	r3, sl, #1
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8241 	beq.w	80088c0 <_dtoa_r+0xb18>
 800843e:	601d      	str	r5, [r3, #0]
 8008440:	e23e      	b.n	80088c0 <_dtoa_r+0xb18>
 8008442:	f8cd a020 	str.w	sl, [sp, #32]
 8008446:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800844a:	2a39      	cmp	r2, #57	; 0x39
 800844c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008450:	d108      	bne.n	8008464 <_dtoa_r+0x6bc>
 8008452:	459b      	cmp	fp, r3
 8008454:	d10a      	bne.n	800846c <_dtoa_r+0x6c4>
 8008456:	9b08      	ldr	r3, [sp, #32]
 8008458:	3301      	adds	r3, #1
 800845a:	9308      	str	r3, [sp, #32]
 800845c:	2330      	movs	r3, #48	; 0x30
 800845e:	f88b 3000 	strb.w	r3, [fp]
 8008462:	465b      	mov	r3, fp
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	3201      	adds	r2, #1
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e78c      	b.n	8008386 <_dtoa_r+0x5de>
 800846c:	461d      	mov	r5, r3
 800846e:	e7ea      	b.n	8008446 <_dtoa_r+0x69e>
 8008470:	2200      	movs	r2, #0
 8008472:	4b9b      	ldr	r3, [pc, #620]	; (80086e0 <_dtoa_r+0x938>)
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f7f8 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008484:	2800      	cmp	r0, #0
 8008486:	d09a      	beq.n	80083be <_dtoa_r+0x616>
 8008488:	e7cb      	b.n	8008422 <_dtoa_r+0x67a>
 800848a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800848c:	2a00      	cmp	r2, #0
 800848e:	f000 808b 	beq.w	80085a8 <_dtoa_r+0x800>
 8008492:	9a06      	ldr	r2, [sp, #24]
 8008494:	2a01      	cmp	r2, #1
 8008496:	dc6e      	bgt.n	8008576 <_dtoa_r+0x7ce>
 8008498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800849a:	2a00      	cmp	r2, #0
 800849c:	d067      	beq.n	800856e <_dtoa_r+0x7c6>
 800849e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084a2:	9f07      	ldr	r7, [sp, #28]
 80084a4:	9d05      	ldr	r5, [sp, #20]
 80084a6:	9a05      	ldr	r2, [sp, #20]
 80084a8:	2101      	movs	r1, #1
 80084aa:	441a      	add	r2, r3
 80084ac:	4620      	mov	r0, r4
 80084ae:	9205      	str	r2, [sp, #20]
 80084b0:	4498      	add	r8, r3
 80084b2:	f000 fea2 	bl	80091fa <__i2b>
 80084b6:	4606      	mov	r6, r0
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	dd0c      	ble.n	80084d6 <_dtoa_r+0x72e>
 80084bc:	f1b8 0f00 	cmp.w	r8, #0
 80084c0:	dd09      	ble.n	80084d6 <_dtoa_r+0x72e>
 80084c2:	4545      	cmp	r5, r8
 80084c4:	9a05      	ldr	r2, [sp, #20]
 80084c6:	462b      	mov	r3, r5
 80084c8:	bfa8      	it	ge
 80084ca:	4643      	movge	r3, r8
 80084cc:	1ad2      	subs	r2, r2, r3
 80084ce:	9205      	str	r2, [sp, #20]
 80084d0:	1aed      	subs	r5, r5, r3
 80084d2:	eba8 0803 	sub.w	r8, r8, r3
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	b1eb      	cbz	r3, 8008516 <_dtoa_r+0x76e>
 80084da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d067      	beq.n	80085b0 <_dtoa_r+0x808>
 80084e0:	b18f      	cbz	r7, 8008506 <_dtoa_r+0x75e>
 80084e2:	4631      	mov	r1, r6
 80084e4:	463a      	mov	r2, r7
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 ff26 	bl	8009338 <__pow5mult>
 80084ec:	9a04      	ldr	r2, [sp, #16]
 80084ee:	4601      	mov	r1, r0
 80084f0:	4606      	mov	r6, r0
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 fe8a 	bl	800920c <__multiply>
 80084f8:	9904      	ldr	r1, [sp, #16]
 80084fa:	9008      	str	r0, [sp, #32]
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fd9e 	bl	800903e <_Bfree>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	1bda      	subs	r2, r3, r7
 800850a:	d004      	beq.n	8008516 <_dtoa_r+0x76e>
 800850c:	9904      	ldr	r1, [sp, #16]
 800850e:	4620      	mov	r0, r4
 8008510:	f000 ff12 	bl	8009338 <__pow5mult>
 8008514:	9004      	str	r0, [sp, #16]
 8008516:	2101      	movs	r1, #1
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fe6e 	bl	80091fa <__i2b>
 800851e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008520:	4607      	mov	r7, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 81d0 	beq.w	80088c8 <_dtoa_r+0xb20>
 8008528:	461a      	mov	r2, r3
 800852a:	4601      	mov	r1, r0
 800852c:	4620      	mov	r0, r4
 800852e:	f000 ff03 	bl	8009338 <__pow5mult>
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	2b01      	cmp	r3, #1
 8008536:	4607      	mov	r7, r0
 8008538:	dc40      	bgt.n	80085bc <_dtoa_r+0x814>
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d139      	bne.n	80085b4 <_dtoa_r+0x80c>
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008546:	2b00      	cmp	r3, #0
 8008548:	d136      	bne.n	80085b8 <_dtoa_r+0x810>
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008550:	0d1b      	lsrs	r3, r3, #20
 8008552:	051b      	lsls	r3, r3, #20
 8008554:	b12b      	cbz	r3, 8008562 <_dtoa_r+0x7ba>
 8008556:	9b05      	ldr	r3, [sp, #20]
 8008558:	3301      	adds	r3, #1
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	f108 0801 	add.w	r8, r8, #1
 8008560:	2301      	movs	r3, #1
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d12a      	bne.n	80085c0 <_dtoa_r+0x818>
 800856a:	2001      	movs	r0, #1
 800856c:	e030      	b.n	80085d0 <_dtoa_r+0x828>
 800856e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008570:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008574:	e795      	b.n	80084a2 <_dtoa_r+0x6fa>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800857c:	42bb      	cmp	r3, r7
 800857e:	bfbf      	itttt	lt
 8008580:	9b07      	ldrlt	r3, [sp, #28]
 8008582:	9707      	strlt	r7, [sp, #28]
 8008584:	1afa      	sublt	r2, r7, r3
 8008586:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008588:	bfbb      	ittet	lt
 800858a:	189b      	addlt	r3, r3, r2
 800858c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800858e:	1bdf      	subge	r7, r3, r7
 8008590:	2700      	movlt	r7, #0
 8008592:	f1b9 0f00 	cmp.w	r9, #0
 8008596:	bfb5      	itete	lt
 8008598:	9b05      	ldrlt	r3, [sp, #20]
 800859a:	9d05      	ldrge	r5, [sp, #20]
 800859c:	eba3 0509 	sublt.w	r5, r3, r9
 80085a0:	464b      	movge	r3, r9
 80085a2:	bfb8      	it	lt
 80085a4:	2300      	movlt	r3, #0
 80085a6:	e77e      	b.n	80084a6 <_dtoa_r+0x6fe>
 80085a8:	9f07      	ldr	r7, [sp, #28]
 80085aa:	9d05      	ldr	r5, [sp, #20]
 80085ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80085ae:	e783      	b.n	80084b8 <_dtoa_r+0x710>
 80085b0:	9a07      	ldr	r2, [sp, #28]
 80085b2:	e7ab      	b.n	800850c <_dtoa_r+0x764>
 80085b4:	2300      	movs	r3, #0
 80085b6:	e7d4      	b.n	8008562 <_dtoa_r+0x7ba>
 80085b8:	9b00      	ldr	r3, [sp, #0]
 80085ba:	e7d2      	b.n	8008562 <_dtoa_r+0x7ba>
 80085bc:	2300      	movs	r3, #0
 80085be:	9307      	str	r3, [sp, #28]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085c6:	6918      	ldr	r0, [r3, #16]
 80085c8:	f000 fdc9 	bl	800915e <__hi0bits>
 80085cc:	f1c0 0020 	rsb	r0, r0, #32
 80085d0:	4440      	add	r0, r8
 80085d2:	f010 001f 	ands.w	r0, r0, #31
 80085d6:	d047      	beq.n	8008668 <_dtoa_r+0x8c0>
 80085d8:	f1c0 0320 	rsb	r3, r0, #32
 80085dc:	2b04      	cmp	r3, #4
 80085de:	dd3b      	ble.n	8008658 <_dtoa_r+0x8b0>
 80085e0:	9b05      	ldr	r3, [sp, #20]
 80085e2:	f1c0 001c 	rsb	r0, r0, #28
 80085e6:	4403      	add	r3, r0
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	4405      	add	r5, r0
 80085ec:	4480      	add	r8, r0
 80085ee:	9b05      	ldr	r3, [sp, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd05      	ble.n	8008600 <_dtoa_r+0x858>
 80085f4:	461a      	mov	r2, r3
 80085f6:	9904      	ldr	r1, [sp, #16]
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 feeb 	bl	80093d4 <__lshift>
 80085fe:	9004      	str	r0, [sp, #16]
 8008600:	f1b8 0f00 	cmp.w	r8, #0
 8008604:	dd05      	ble.n	8008612 <_dtoa_r+0x86a>
 8008606:	4639      	mov	r1, r7
 8008608:	4642      	mov	r2, r8
 800860a:	4620      	mov	r0, r4
 800860c:	f000 fee2 	bl	80093d4 <__lshift>
 8008610:	4607      	mov	r7, r0
 8008612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008614:	b353      	cbz	r3, 800866c <_dtoa_r+0x8c4>
 8008616:	4639      	mov	r1, r7
 8008618:	9804      	ldr	r0, [sp, #16]
 800861a:	f000 ff2f 	bl	800947c <__mcmp>
 800861e:	2800      	cmp	r0, #0
 8008620:	da24      	bge.n	800866c <_dtoa_r+0x8c4>
 8008622:	2300      	movs	r3, #0
 8008624:	220a      	movs	r2, #10
 8008626:	9904      	ldr	r1, [sp, #16]
 8008628:	4620      	mov	r0, r4
 800862a:	f000 fd1f 	bl	800906c <__multadd>
 800862e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008630:	9004      	str	r0, [sp, #16]
 8008632:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 814d 	beq.w	80088d6 <_dtoa_r+0xb2e>
 800863c:	2300      	movs	r3, #0
 800863e:	4631      	mov	r1, r6
 8008640:	220a      	movs	r2, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fd12 	bl	800906c <__multadd>
 8008648:	9b02      	ldr	r3, [sp, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	4606      	mov	r6, r0
 800864e:	dc4f      	bgt.n	80086f0 <_dtoa_r+0x948>
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	2b02      	cmp	r3, #2
 8008654:	dd4c      	ble.n	80086f0 <_dtoa_r+0x948>
 8008656:	e011      	b.n	800867c <_dtoa_r+0x8d4>
 8008658:	d0c9      	beq.n	80085ee <_dtoa_r+0x846>
 800865a:	9a05      	ldr	r2, [sp, #20]
 800865c:	331c      	adds	r3, #28
 800865e:	441a      	add	r2, r3
 8008660:	9205      	str	r2, [sp, #20]
 8008662:	441d      	add	r5, r3
 8008664:	4498      	add	r8, r3
 8008666:	e7c2      	b.n	80085ee <_dtoa_r+0x846>
 8008668:	4603      	mov	r3, r0
 800866a:	e7f6      	b.n	800865a <_dtoa_r+0x8b2>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	dc38      	bgt.n	80086e4 <_dtoa_r+0x93c>
 8008672:	9b06      	ldr	r3, [sp, #24]
 8008674:	2b02      	cmp	r3, #2
 8008676:	dd35      	ble.n	80086e4 <_dtoa_r+0x93c>
 8008678:	f8cd 9008 	str.w	r9, [sp, #8]
 800867c:	9b02      	ldr	r3, [sp, #8]
 800867e:	b963      	cbnz	r3, 800869a <_dtoa_r+0x8f2>
 8008680:	4639      	mov	r1, r7
 8008682:	2205      	movs	r2, #5
 8008684:	4620      	mov	r0, r4
 8008686:	f000 fcf1 	bl	800906c <__multadd>
 800868a:	4601      	mov	r1, r0
 800868c:	4607      	mov	r7, r0
 800868e:	9804      	ldr	r0, [sp, #16]
 8008690:	f000 fef4 	bl	800947c <__mcmp>
 8008694:	2800      	cmp	r0, #0
 8008696:	f73f adcc 	bgt.w	8008232 <_dtoa_r+0x48a>
 800869a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869c:	465d      	mov	r5, fp
 800869e:	ea6f 0a03 	mvn.w	sl, r3
 80086a2:	f04f 0900 	mov.w	r9, #0
 80086a6:	4639      	mov	r1, r7
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fcc8 	bl	800903e <_Bfree>
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	f43f aeb7 	beq.w	8008422 <_dtoa_r+0x67a>
 80086b4:	f1b9 0f00 	cmp.w	r9, #0
 80086b8:	d005      	beq.n	80086c6 <_dtoa_r+0x91e>
 80086ba:	45b1      	cmp	r9, r6
 80086bc:	d003      	beq.n	80086c6 <_dtoa_r+0x91e>
 80086be:	4649      	mov	r1, r9
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 fcbc 	bl	800903e <_Bfree>
 80086c6:	4631      	mov	r1, r6
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fcb8 	bl	800903e <_Bfree>
 80086ce:	e6a8      	b.n	8008422 <_dtoa_r+0x67a>
 80086d0:	2700      	movs	r7, #0
 80086d2:	463e      	mov	r6, r7
 80086d4:	e7e1      	b.n	800869a <_dtoa_r+0x8f2>
 80086d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086da:	463e      	mov	r6, r7
 80086dc:	e5a9      	b.n	8008232 <_dtoa_r+0x48a>
 80086de:	bf00      	nop
 80086e0:	40240000 	.word	0x40240000
 80086e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80fa 	beq.w	80088e4 <_dtoa_r+0xb3c>
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	dd05      	ble.n	8008700 <_dtoa_r+0x958>
 80086f4:	4631      	mov	r1, r6
 80086f6:	462a      	mov	r2, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 fe6b 	bl	80093d4 <__lshift>
 80086fe:	4606      	mov	r6, r0
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d04c      	beq.n	80087a0 <_dtoa_r+0x9f8>
 8008706:	6871      	ldr	r1, [r6, #4]
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fc64 	bl	8008fd6 <_Balloc>
 800870e:	6932      	ldr	r2, [r6, #16]
 8008710:	3202      	adds	r2, #2
 8008712:	4605      	mov	r5, r0
 8008714:	0092      	lsls	r2, r2, #2
 8008716:	f106 010c 	add.w	r1, r6, #12
 800871a:	300c      	adds	r0, #12
 800871c:	f000 fc50 	bl	8008fc0 <memcpy>
 8008720:	2201      	movs	r2, #1
 8008722:	4629      	mov	r1, r5
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fe55 	bl	80093d4 <__lshift>
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	f8cd b014 	str.w	fp, [sp, #20]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	46b1      	mov	r9, r6
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	4606      	mov	r6, r0
 800873a:	4639      	mov	r1, r7
 800873c:	9804      	ldr	r0, [sp, #16]
 800873e:	f7ff faa7 	bl	8007c90 <quorem>
 8008742:	4649      	mov	r1, r9
 8008744:	4605      	mov	r5, r0
 8008746:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800874a:	9804      	ldr	r0, [sp, #16]
 800874c:	f000 fe96 	bl	800947c <__mcmp>
 8008750:	4632      	mov	r2, r6
 8008752:	9000      	str	r0, [sp, #0]
 8008754:	4639      	mov	r1, r7
 8008756:	4620      	mov	r0, r4
 8008758:	f000 feaa 	bl	80094b0 <__mdiff>
 800875c:	68c3      	ldr	r3, [r0, #12]
 800875e:	4602      	mov	r2, r0
 8008760:	bb03      	cbnz	r3, 80087a4 <_dtoa_r+0x9fc>
 8008762:	4601      	mov	r1, r0
 8008764:	9008      	str	r0, [sp, #32]
 8008766:	9804      	ldr	r0, [sp, #16]
 8008768:	f000 fe88 	bl	800947c <__mcmp>
 800876c:	9a08      	ldr	r2, [sp, #32]
 800876e:	4603      	mov	r3, r0
 8008770:	4611      	mov	r1, r2
 8008772:	4620      	mov	r0, r4
 8008774:	9308      	str	r3, [sp, #32]
 8008776:	f000 fc62 	bl	800903e <_Bfree>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	b9a3      	cbnz	r3, 80087a8 <_dtoa_r+0xa00>
 800877e:	9a06      	ldr	r2, [sp, #24]
 8008780:	b992      	cbnz	r2, 80087a8 <_dtoa_r+0xa00>
 8008782:	9a07      	ldr	r2, [sp, #28]
 8008784:	b982      	cbnz	r2, 80087a8 <_dtoa_r+0xa00>
 8008786:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800878a:	d029      	beq.n	80087e0 <_dtoa_r+0xa38>
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	dd01      	ble.n	8008796 <_dtoa_r+0x9ee>
 8008792:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008796:	9b05      	ldr	r3, [sp, #20]
 8008798:	1c5d      	adds	r5, r3, #1
 800879a:	f883 8000 	strb.w	r8, [r3]
 800879e:	e782      	b.n	80086a6 <_dtoa_r+0x8fe>
 80087a0:	4630      	mov	r0, r6
 80087a2:	e7c2      	b.n	800872a <_dtoa_r+0x982>
 80087a4:	2301      	movs	r3, #1
 80087a6:	e7e3      	b.n	8008770 <_dtoa_r+0x9c8>
 80087a8:	9a00      	ldr	r2, [sp, #0]
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	db04      	blt.n	80087b8 <_dtoa_r+0xa10>
 80087ae:	d125      	bne.n	80087fc <_dtoa_r+0xa54>
 80087b0:	9a06      	ldr	r2, [sp, #24]
 80087b2:	bb1a      	cbnz	r2, 80087fc <_dtoa_r+0xa54>
 80087b4:	9a07      	ldr	r2, [sp, #28]
 80087b6:	bb0a      	cbnz	r2, 80087fc <_dtoa_r+0xa54>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	ddec      	ble.n	8008796 <_dtoa_r+0x9ee>
 80087bc:	2201      	movs	r2, #1
 80087be:	9904      	ldr	r1, [sp, #16]
 80087c0:	4620      	mov	r0, r4
 80087c2:	f000 fe07 	bl	80093d4 <__lshift>
 80087c6:	4639      	mov	r1, r7
 80087c8:	9004      	str	r0, [sp, #16]
 80087ca:	f000 fe57 	bl	800947c <__mcmp>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	dc03      	bgt.n	80087da <_dtoa_r+0xa32>
 80087d2:	d1e0      	bne.n	8008796 <_dtoa_r+0x9ee>
 80087d4:	f018 0f01 	tst.w	r8, #1
 80087d8:	d0dd      	beq.n	8008796 <_dtoa_r+0x9ee>
 80087da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087de:	d1d8      	bne.n	8008792 <_dtoa_r+0x9ea>
 80087e0:	9b05      	ldr	r3, [sp, #20]
 80087e2:	9a05      	ldr	r2, [sp, #20]
 80087e4:	1c5d      	adds	r5, r3, #1
 80087e6:	2339      	movs	r3, #57	; 0x39
 80087e8:	7013      	strb	r3, [r2, #0]
 80087ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087ee:	2b39      	cmp	r3, #57	; 0x39
 80087f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80087f4:	d04f      	beq.n	8008896 <_dtoa_r+0xaee>
 80087f6:	3301      	adds	r3, #1
 80087f8:	7013      	strb	r3, [r2, #0]
 80087fa:	e754      	b.n	80086a6 <_dtoa_r+0x8fe>
 80087fc:	9a05      	ldr	r2, [sp, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f102 0501 	add.w	r5, r2, #1
 8008804:	dd06      	ble.n	8008814 <_dtoa_r+0xa6c>
 8008806:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800880a:	d0e9      	beq.n	80087e0 <_dtoa_r+0xa38>
 800880c:	f108 0801 	add.w	r8, r8, #1
 8008810:	9b05      	ldr	r3, [sp, #20]
 8008812:	e7c2      	b.n	800879a <_dtoa_r+0x9f2>
 8008814:	9a02      	ldr	r2, [sp, #8]
 8008816:	f805 8c01 	strb.w	r8, [r5, #-1]
 800881a:	eba5 030b 	sub.w	r3, r5, fp
 800881e:	4293      	cmp	r3, r2
 8008820:	d021      	beq.n	8008866 <_dtoa_r+0xabe>
 8008822:	2300      	movs	r3, #0
 8008824:	220a      	movs	r2, #10
 8008826:	9904      	ldr	r1, [sp, #16]
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fc1f 	bl	800906c <__multadd>
 800882e:	45b1      	cmp	r9, r6
 8008830:	9004      	str	r0, [sp, #16]
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	f04f 020a 	mov.w	r2, #10
 800883a:	4649      	mov	r1, r9
 800883c:	4620      	mov	r0, r4
 800883e:	d105      	bne.n	800884c <_dtoa_r+0xaa4>
 8008840:	f000 fc14 	bl	800906c <__multadd>
 8008844:	4681      	mov	r9, r0
 8008846:	4606      	mov	r6, r0
 8008848:	9505      	str	r5, [sp, #20]
 800884a:	e776      	b.n	800873a <_dtoa_r+0x992>
 800884c:	f000 fc0e 	bl	800906c <__multadd>
 8008850:	4631      	mov	r1, r6
 8008852:	4681      	mov	r9, r0
 8008854:	2300      	movs	r3, #0
 8008856:	220a      	movs	r2, #10
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fc07 	bl	800906c <__multadd>
 800885e:	4606      	mov	r6, r0
 8008860:	e7f2      	b.n	8008848 <_dtoa_r+0xaa0>
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	2201      	movs	r2, #1
 8008868:	9904      	ldr	r1, [sp, #16]
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fdb2 	bl	80093d4 <__lshift>
 8008870:	4639      	mov	r1, r7
 8008872:	9004      	str	r0, [sp, #16]
 8008874:	f000 fe02 	bl	800947c <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	dcb6      	bgt.n	80087ea <_dtoa_r+0xa42>
 800887c:	d102      	bne.n	8008884 <_dtoa_r+0xadc>
 800887e:	f018 0f01 	tst.w	r8, #1
 8008882:	d1b2      	bne.n	80087ea <_dtoa_r+0xa42>
 8008884:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008888:	2b30      	cmp	r3, #48	; 0x30
 800888a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800888e:	f47f af0a 	bne.w	80086a6 <_dtoa_r+0x8fe>
 8008892:	4615      	mov	r5, r2
 8008894:	e7f6      	b.n	8008884 <_dtoa_r+0xadc>
 8008896:	4593      	cmp	fp, r2
 8008898:	d105      	bne.n	80088a6 <_dtoa_r+0xafe>
 800889a:	2331      	movs	r3, #49	; 0x31
 800889c:	f10a 0a01 	add.w	sl, sl, #1
 80088a0:	f88b 3000 	strb.w	r3, [fp]
 80088a4:	e6ff      	b.n	80086a6 <_dtoa_r+0x8fe>
 80088a6:	4615      	mov	r5, r2
 80088a8:	e79f      	b.n	80087ea <_dtoa_r+0xa42>
 80088aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008910 <_dtoa_r+0xb68>
 80088ae:	e007      	b.n	80088c0 <_dtoa_r+0xb18>
 80088b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008914 <_dtoa_r+0xb6c>
 80088b6:	b11b      	cbz	r3, 80088c0 <_dtoa_r+0xb18>
 80088b8:	f10b 0308 	add.w	r3, fp, #8
 80088bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	4658      	mov	r0, fp
 80088c2:	b017      	add	sp, #92	; 0x5c
 80088c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c8:	9b06      	ldr	r3, [sp, #24]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	f77f ae35 	ble.w	800853a <_dtoa_r+0x792>
 80088d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	e649      	b.n	800856a <_dtoa_r+0x7c2>
 80088d6:	9b02      	ldr	r3, [sp, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dc03      	bgt.n	80088e4 <_dtoa_r+0xb3c>
 80088dc:	9b06      	ldr	r3, [sp, #24]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	f73f aecc 	bgt.w	800867c <_dtoa_r+0x8d4>
 80088e4:	465d      	mov	r5, fp
 80088e6:	4639      	mov	r1, r7
 80088e8:	9804      	ldr	r0, [sp, #16]
 80088ea:	f7ff f9d1 	bl	8007c90 <quorem>
 80088ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088f2:	f805 8b01 	strb.w	r8, [r5], #1
 80088f6:	9a02      	ldr	r2, [sp, #8]
 80088f8:	eba5 030b 	sub.w	r3, r5, fp
 80088fc:	429a      	cmp	r2, r3
 80088fe:	ddb0      	ble.n	8008862 <_dtoa_r+0xaba>
 8008900:	2300      	movs	r3, #0
 8008902:	220a      	movs	r2, #10
 8008904:	9904      	ldr	r1, [sp, #16]
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fbb0 	bl	800906c <__multadd>
 800890c:	9004      	str	r0, [sp, #16]
 800890e:	e7ea      	b.n	80088e6 <_dtoa_r+0xb3e>
 8008910:	0800a81c 	.word	0x0800a81c
 8008914:	0800a8bd 	.word	0x0800a8bd

08008918 <rshift>:
 8008918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800891a:	6906      	ldr	r6, [r0, #16]
 800891c:	114b      	asrs	r3, r1, #5
 800891e:	429e      	cmp	r6, r3
 8008920:	f100 0414 	add.w	r4, r0, #20
 8008924:	dd30      	ble.n	8008988 <rshift+0x70>
 8008926:	f011 011f 	ands.w	r1, r1, #31
 800892a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800892e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008932:	d108      	bne.n	8008946 <rshift+0x2e>
 8008934:	4621      	mov	r1, r4
 8008936:	42b2      	cmp	r2, r6
 8008938:	460b      	mov	r3, r1
 800893a:	d211      	bcs.n	8008960 <rshift+0x48>
 800893c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008940:	f841 3b04 	str.w	r3, [r1], #4
 8008944:	e7f7      	b.n	8008936 <rshift+0x1e>
 8008946:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800894a:	f1c1 0c20 	rsb	ip, r1, #32
 800894e:	40cd      	lsrs	r5, r1
 8008950:	3204      	adds	r2, #4
 8008952:	4623      	mov	r3, r4
 8008954:	42b2      	cmp	r2, r6
 8008956:	4617      	mov	r7, r2
 8008958:	d30c      	bcc.n	8008974 <rshift+0x5c>
 800895a:	601d      	str	r5, [r3, #0]
 800895c:	b105      	cbz	r5, 8008960 <rshift+0x48>
 800895e:	3304      	adds	r3, #4
 8008960:	1b1a      	subs	r2, r3, r4
 8008962:	42a3      	cmp	r3, r4
 8008964:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008968:	bf08      	it	eq
 800896a:	2300      	moveq	r3, #0
 800896c:	6102      	str	r2, [r0, #16]
 800896e:	bf08      	it	eq
 8008970:	6143      	streq	r3, [r0, #20]
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008974:	683f      	ldr	r7, [r7, #0]
 8008976:	fa07 f70c 	lsl.w	r7, r7, ip
 800897a:	433d      	orrs	r5, r7
 800897c:	f843 5b04 	str.w	r5, [r3], #4
 8008980:	f852 5b04 	ldr.w	r5, [r2], #4
 8008984:	40cd      	lsrs	r5, r1
 8008986:	e7e5      	b.n	8008954 <rshift+0x3c>
 8008988:	4623      	mov	r3, r4
 800898a:	e7e9      	b.n	8008960 <rshift+0x48>

0800898c <__hexdig_fun>:
 800898c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008990:	2b09      	cmp	r3, #9
 8008992:	d802      	bhi.n	800899a <__hexdig_fun+0xe>
 8008994:	3820      	subs	r0, #32
 8008996:	b2c0      	uxtb	r0, r0
 8008998:	4770      	bx	lr
 800899a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800899e:	2b05      	cmp	r3, #5
 80089a0:	d801      	bhi.n	80089a6 <__hexdig_fun+0x1a>
 80089a2:	3847      	subs	r0, #71	; 0x47
 80089a4:	e7f7      	b.n	8008996 <__hexdig_fun+0xa>
 80089a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d801      	bhi.n	80089b2 <__hexdig_fun+0x26>
 80089ae:	3827      	subs	r0, #39	; 0x27
 80089b0:	e7f1      	b.n	8008996 <__hexdig_fun+0xa>
 80089b2:	2000      	movs	r0, #0
 80089b4:	4770      	bx	lr

080089b6 <__gethex>:
 80089b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	b08b      	sub	sp, #44	; 0x2c
 80089bc:	468a      	mov	sl, r1
 80089be:	9002      	str	r0, [sp, #8]
 80089c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	4690      	mov	r8, r2
 80089c6:	f000 fad0 	bl	8008f6a <__localeconv_l>
 80089ca:	6803      	ldr	r3, [r0, #0]
 80089cc:	9303      	str	r3, [sp, #12]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f7 fbfe 	bl	80001d0 <strlen>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	9001      	str	r0, [sp, #4]
 80089d8:	4403      	add	r3, r0
 80089da:	f04f 0b00 	mov.w	fp, #0
 80089de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089e2:	9307      	str	r3, [sp, #28]
 80089e4:	f8da 3000 	ldr.w	r3, [sl]
 80089e8:	3302      	adds	r3, #2
 80089ea:	461f      	mov	r7, r3
 80089ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089f0:	2830      	cmp	r0, #48	; 0x30
 80089f2:	d06c      	beq.n	8008ace <__gethex+0x118>
 80089f4:	f7ff ffca 	bl	800898c <__hexdig_fun>
 80089f8:	4604      	mov	r4, r0
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d16a      	bne.n	8008ad4 <__gethex+0x11e>
 80089fe:	9a01      	ldr	r2, [sp, #4]
 8008a00:	9903      	ldr	r1, [sp, #12]
 8008a02:	4638      	mov	r0, r7
 8008a04:	f001 f8fe 	bl	8009c04 <strncmp>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d166      	bne.n	8008ada <__gethex+0x124>
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	5cf8      	ldrb	r0, [r7, r3]
 8008a10:	18fe      	adds	r6, r7, r3
 8008a12:	f7ff ffbb 	bl	800898c <__hexdig_fun>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d062      	beq.n	8008ae0 <__gethex+0x12a>
 8008a1a:	4633      	mov	r3, r6
 8008a1c:	7818      	ldrb	r0, [r3, #0]
 8008a1e:	2830      	cmp	r0, #48	; 0x30
 8008a20:	461f      	mov	r7, r3
 8008a22:	f103 0301 	add.w	r3, r3, #1
 8008a26:	d0f9      	beq.n	8008a1c <__gethex+0x66>
 8008a28:	f7ff ffb0 	bl	800898c <__hexdig_fun>
 8008a2c:	fab0 f580 	clz	r5, r0
 8008a30:	096d      	lsrs	r5, r5, #5
 8008a32:	4634      	mov	r4, r6
 8008a34:	f04f 0b01 	mov.w	fp, #1
 8008a38:	463a      	mov	r2, r7
 8008a3a:	4616      	mov	r6, r2
 8008a3c:	3201      	adds	r2, #1
 8008a3e:	7830      	ldrb	r0, [r6, #0]
 8008a40:	f7ff ffa4 	bl	800898c <__hexdig_fun>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d1f8      	bne.n	8008a3a <__gethex+0x84>
 8008a48:	9a01      	ldr	r2, [sp, #4]
 8008a4a:	9903      	ldr	r1, [sp, #12]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f001 f8d9 	bl	8009c04 <strncmp>
 8008a52:	b950      	cbnz	r0, 8008a6a <__gethex+0xb4>
 8008a54:	b954      	cbnz	r4, 8008a6c <__gethex+0xb6>
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	18f4      	adds	r4, r6, r3
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	4616      	mov	r6, r2
 8008a5e:	3201      	adds	r2, #1
 8008a60:	7830      	ldrb	r0, [r6, #0]
 8008a62:	f7ff ff93 	bl	800898c <__hexdig_fun>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d1f8      	bne.n	8008a5c <__gethex+0xa6>
 8008a6a:	b10c      	cbz	r4, 8008a70 <__gethex+0xba>
 8008a6c:	1ba4      	subs	r4, r4, r6
 8008a6e:	00a4      	lsls	r4, r4, #2
 8008a70:	7833      	ldrb	r3, [r6, #0]
 8008a72:	2b50      	cmp	r3, #80	; 0x50
 8008a74:	d001      	beq.n	8008a7a <__gethex+0xc4>
 8008a76:	2b70      	cmp	r3, #112	; 0x70
 8008a78:	d140      	bne.n	8008afc <__gethex+0x146>
 8008a7a:	7873      	ldrb	r3, [r6, #1]
 8008a7c:	2b2b      	cmp	r3, #43	; 0x2b
 8008a7e:	d031      	beq.n	8008ae4 <__gethex+0x12e>
 8008a80:	2b2d      	cmp	r3, #45	; 0x2d
 8008a82:	d033      	beq.n	8008aec <__gethex+0x136>
 8008a84:	1c71      	adds	r1, r6, #1
 8008a86:	f04f 0900 	mov.w	r9, #0
 8008a8a:	7808      	ldrb	r0, [r1, #0]
 8008a8c:	f7ff ff7e 	bl	800898c <__hexdig_fun>
 8008a90:	1e43      	subs	r3, r0, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b18      	cmp	r3, #24
 8008a96:	d831      	bhi.n	8008afc <__gethex+0x146>
 8008a98:	f1a0 0210 	sub.w	r2, r0, #16
 8008a9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008aa0:	f7ff ff74 	bl	800898c <__hexdig_fun>
 8008aa4:	1e43      	subs	r3, r0, #1
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b18      	cmp	r3, #24
 8008aaa:	d922      	bls.n	8008af2 <__gethex+0x13c>
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	d000      	beq.n	8008ab4 <__gethex+0xfe>
 8008ab2:	4252      	negs	r2, r2
 8008ab4:	4414      	add	r4, r2
 8008ab6:	f8ca 1000 	str.w	r1, [sl]
 8008aba:	b30d      	cbz	r5, 8008b00 <__gethex+0x14a>
 8008abc:	f1bb 0f00 	cmp.w	fp, #0
 8008ac0:	bf0c      	ite	eq
 8008ac2:	2706      	moveq	r7, #6
 8008ac4:	2700      	movne	r7, #0
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	b00b      	add	sp, #44	; 0x2c
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	f10b 0b01 	add.w	fp, fp, #1
 8008ad2:	e78a      	b.n	80089ea <__gethex+0x34>
 8008ad4:	2500      	movs	r5, #0
 8008ad6:	462c      	mov	r4, r5
 8008ad8:	e7ae      	b.n	8008a38 <__gethex+0x82>
 8008ada:	463e      	mov	r6, r7
 8008adc:	2501      	movs	r5, #1
 8008ade:	e7c7      	b.n	8008a70 <__gethex+0xba>
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	e7fb      	b.n	8008adc <__gethex+0x126>
 8008ae4:	f04f 0900 	mov.w	r9, #0
 8008ae8:	1cb1      	adds	r1, r6, #2
 8008aea:	e7ce      	b.n	8008a8a <__gethex+0xd4>
 8008aec:	f04f 0901 	mov.w	r9, #1
 8008af0:	e7fa      	b.n	8008ae8 <__gethex+0x132>
 8008af2:	230a      	movs	r3, #10
 8008af4:	fb03 0202 	mla	r2, r3, r2, r0
 8008af8:	3a10      	subs	r2, #16
 8008afa:	e7cf      	b.n	8008a9c <__gethex+0xe6>
 8008afc:	4631      	mov	r1, r6
 8008afe:	e7da      	b.n	8008ab6 <__gethex+0x100>
 8008b00:	1bf3      	subs	r3, r6, r7
 8008b02:	3b01      	subs	r3, #1
 8008b04:	4629      	mov	r1, r5
 8008b06:	2b07      	cmp	r3, #7
 8008b08:	dc49      	bgt.n	8008b9e <__gethex+0x1e8>
 8008b0a:	9802      	ldr	r0, [sp, #8]
 8008b0c:	f000 fa63 	bl	8008fd6 <_Balloc>
 8008b10:	9b01      	ldr	r3, [sp, #4]
 8008b12:	f100 0914 	add.w	r9, r0, #20
 8008b16:	f04f 0b00 	mov.w	fp, #0
 8008b1a:	f1c3 0301 	rsb	r3, r3, #1
 8008b1e:	4605      	mov	r5, r0
 8008b20:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b24:	46da      	mov	sl, fp
 8008b26:	9308      	str	r3, [sp, #32]
 8008b28:	42b7      	cmp	r7, r6
 8008b2a:	d33b      	bcc.n	8008ba4 <__gethex+0x1ee>
 8008b2c:	9804      	ldr	r0, [sp, #16]
 8008b2e:	f840 ab04 	str.w	sl, [r0], #4
 8008b32:	eba0 0009 	sub.w	r0, r0, r9
 8008b36:	1080      	asrs	r0, r0, #2
 8008b38:	6128      	str	r0, [r5, #16]
 8008b3a:	0147      	lsls	r7, r0, #5
 8008b3c:	4650      	mov	r0, sl
 8008b3e:	f000 fb0e 	bl	800915e <__hi0bits>
 8008b42:	f8d8 6000 	ldr.w	r6, [r8]
 8008b46:	1a3f      	subs	r7, r7, r0
 8008b48:	42b7      	cmp	r7, r6
 8008b4a:	dd64      	ble.n	8008c16 <__gethex+0x260>
 8008b4c:	1bbf      	subs	r7, r7, r6
 8008b4e:	4639      	mov	r1, r7
 8008b50:	4628      	mov	r0, r5
 8008b52:	f000 fe1d 	bl	8009790 <__any_on>
 8008b56:	4682      	mov	sl, r0
 8008b58:	b178      	cbz	r0, 8008b7a <__gethex+0x1c4>
 8008b5a:	1e7b      	subs	r3, r7, #1
 8008b5c:	1159      	asrs	r1, r3, #5
 8008b5e:	f003 021f 	and.w	r2, r3, #31
 8008b62:	f04f 0a01 	mov.w	sl, #1
 8008b66:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b6a:	fa0a f202 	lsl.w	r2, sl, r2
 8008b6e:	420a      	tst	r2, r1
 8008b70:	d003      	beq.n	8008b7a <__gethex+0x1c4>
 8008b72:	4553      	cmp	r3, sl
 8008b74:	dc46      	bgt.n	8008c04 <__gethex+0x24e>
 8008b76:	f04f 0a02 	mov.w	sl, #2
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7ff fecb 	bl	8008918 <rshift>
 8008b82:	443c      	add	r4, r7
 8008b84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	da52      	bge.n	8008c32 <__gethex+0x27c>
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	9802      	ldr	r0, [sp, #8]
 8008b90:	f000 fa55 	bl	800903e <_Bfree>
 8008b94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b96:	2300      	movs	r3, #0
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	27a3      	movs	r7, #163	; 0xa3
 8008b9c:	e793      	b.n	8008ac6 <__gethex+0x110>
 8008b9e:	3101      	adds	r1, #1
 8008ba0:	105b      	asrs	r3, r3, #1
 8008ba2:	e7b0      	b.n	8008b06 <__gethex+0x150>
 8008ba4:	1e73      	subs	r3, r6, #1
 8008ba6:	9305      	str	r3, [sp, #20]
 8008ba8:	9a07      	ldr	r2, [sp, #28]
 8008baa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d018      	beq.n	8008be4 <__gethex+0x22e>
 8008bb2:	f1bb 0f20 	cmp.w	fp, #32
 8008bb6:	d107      	bne.n	8008bc8 <__gethex+0x212>
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	f8c3 a000 	str.w	sl, [r3]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	f04f 0a00 	mov.w	sl, #0
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	46d3      	mov	fp, sl
 8008bc8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008bcc:	f7ff fede 	bl	800898c <__hexdig_fun>
 8008bd0:	f000 000f 	and.w	r0, r0, #15
 8008bd4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008bdc:	f10b 0b04 	add.w	fp, fp, #4
 8008be0:	9b05      	ldr	r3, [sp, #20]
 8008be2:	e00d      	b.n	8008c00 <__gethex+0x24a>
 8008be4:	9b05      	ldr	r3, [sp, #20]
 8008be6:	9a08      	ldr	r2, [sp, #32]
 8008be8:	4413      	add	r3, r2
 8008bea:	42bb      	cmp	r3, r7
 8008bec:	d3e1      	bcc.n	8008bb2 <__gethex+0x1fc>
 8008bee:	4618      	mov	r0, r3
 8008bf0:	9a01      	ldr	r2, [sp, #4]
 8008bf2:	9903      	ldr	r1, [sp, #12]
 8008bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf6:	f001 f805 	bl	8009c04 <strncmp>
 8008bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d1d8      	bne.n	8008bb2 <__gethex+0x1fc>
 8008c00:	461e      	mov	r6, r3
 8008c02:	e791      	b.n	8008b28 <__gethex+0x172>
 8008c04:	1eb9      	subs	r1, r7, #2
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 fdc2 	bl	8009790 <__any_on>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d0b2      	beq.n	8008b76 <__gethex+0x1c0>
 8008c10:	f04f 0a03 	mov.w	sl, #3
 8008c14:	e7b1      	b.n	8008b7a <__gethex+0x1c4>
 8008c16:	da09      	bge.n	8008c2c <__gethex+0x276>
 8008c18:	1bf7      	subs	r7, r6, r7
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	463a      	mov	r2, r7
 8008c1e:	9802      	ldr	r0, [sp, #8]
 8008c20:	f000 fbd8 	bl	80093d4 <__lshift>
 8008c24:	1be4      	subs	r4, r4, r7
 8008c26:	4605      	mov	r5, r0
 8008c28:	f100 0914 	add.w	r9, r0, #20
 8008c2c:	f04f 0a00 	mov.w	sl, #0
 8008c30:	e7a8      	b.n	8008b84 <__gethex+0x1ce>
 8008c32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c36:	42a0      	cmp	r0, r4
 8008c38:	dd6a      	ble.n	8008d10 <__gethex+0x35a>
 8008c3a:	1b04      	subs	r4, r0, r4
 8008c3c:	42a6      	cmp	r6, r4
 8008c3e:	dc2e      	bgt.n	8008c9e <__gethex+0x2e8>
 8008c40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d022      	beq.n	8008c8e <__gethex+0x2d8>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d024      	beq.n	8008c96 <__gethex+0x2e0>
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d115      	bne.n	8008c7c <__gethex+0x2c6>
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	d113      	bne.n	8008c7c <__gethex+0x2c6>
 8008c54:	2e01      	cmp	r6, #1
 8008c56:	dc0b      	bgt.n	8008c70 <__gethex+0x2ba>
 8008c58:	9a06      	ldr	r2, [sp, #24]
 8008c5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	2301      	movs	r3, #1
 8008c62:	612b      	str	r3, [r5, #16]
 8008c64:	f8c9 3000 	str.w	r3, [r9]
 8008c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c6a:	2762      	movs	r7, #98	; 0x62
 8008c6c:	601d      	str	r5, [r3, #0]
 8008c6e:	e72a      	b.n	8008ac6 <__gethex+0x110>
 8008c70:	1e71      	subs	r1, r6, #1
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 fd8c 	bl	8009790 <__any_on>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d1ed      	bne.n	8008c58 <__gethex+0x2a2>
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	9802      	ldr	r0, [sp, #8]
 8008c80:	f000 f9dd 	bl	800903e <_Bfree>
 8008c84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c86:	2300      	movs	r3, #0
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	2750      	movs	r7, #80	; 0x50
 8008c8c:	e71b      	b.n	8008ac6 <__gethex+0x110>
 8008c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0e1      	beq.n	8008c58 <__gethex+0x2a2>
 8008c94:	e7f2      	b.n	8008c7c <__gethex+0x2c6>
 8008c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1dd      	bne.n	8008c58 <__gethex+0x2a2>
 8008c9c:	e7ee      	b.n	8008c7c <__gethex+0x2c6>
 8008c9e:	1e67      	subs	r7, r4, #1
 8008ca0:	f1ba 0f00 	cmp.w	sl, #0
 8008ca4:	d131      	bne.n	8008d0a <__gethex+0x354>
 8008ca6:	b127      	cbz	r7, 8008cb2 <__gethex+0x2fc>
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 fd70 	bl	8009790 <__any_on>
 8008cb0:	4682      	mov	sl, r0
 8008cb2:	117a      	asrs	r2, r7, #5
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f007 071f 	and.w	r7, r7, #31
 8008cba:	fa03 f707 	lsl.w	r7, r3, r7
 8008cbe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	421f      	tst	r7, r3
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	bf18      	it	ne
 8008cca:	f04a 0a02 	orrne.w	sl, sl, #2
 8008cce:	1b36      	subs	r6, r6, r4
 8008cd0:	f7ff fe22 	bl	8008918 <rshift>
 8008cd4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008cd8:	2702      	movs	r7, #2
 8008cda:	f1ba 0f00 	cmp.w	sl, #0
 8008cde:	d048      	beq.n	8008d72 <__gethex+0x3bc>
 8008ce0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d015      	beq.n	8008d14 <__gethex+0x35e>
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d017      	beq.n	8008d1c <__gethex+0x366>
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d109      	bne.n	8008d04 <__gethex+0x34e>
 8008cf0:	f01a 0f02 	tst.w	sl, #2
 8008cf4:	d006      	beq.n	8008d04 <__gethex+0x34e>
 8008cf6:	f8d9 3000 	ldr.w	r3, [r9]
 8008cfa:	ea4a 0a03 	orr.w	sl, sl, r3
 8008cfe:	f01a 0f01 	tst.w	sl, #1
 8008d02:	d10e      	bne.n	8008d22 <__gethex+0x36c>
 8008d04:	f047 0710 	orr.w	r7, r7, #16
 8008d08:	e033      	b.n	8008d72 <__gethex+0x3bc>
 8008d0a:	f04f 0a01 	mov.w	sl, #1
 8008d0e:	e7d0      	b.n	8008cb2 <__gethex+0x2fc>
 8008d10:	2701      	movs	r7, #1
 8008d12:	e7e2      	b.n	8008cda <__gethex+0x324>
 8008d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d16:	f1c3 0301 	rsb	r3, r3, #1
 8008d1a:	9315      	str	r3, [sp, #84]	; 0x54
 8008d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0f0      	beq.n	8008d04 <__gethex+0x34e>
 8008d22:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008d26:	f105 0314 	add.w	r3, r5, #20
 8008d2a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008d2e:	eb03 010a 	add.w	r1, r3, sl
 8008d32:	f04f 0c00 	mov.w	ip, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008d40:	d01c      	beq.n	8008d7c <__gethex+0x3c6>
 8008d42:	3201      	adds	r2, #1
 8008d44:	6002      	str	r2, [r0, #0]
 8008d46:	2f02      	cmp	r7, #2
 8008d48:	f105 0314 	add.w	r3, r5, #20
 8008d4c:	d138      	bne.n	8008dc0 <__gethex+0x40a>
 8008d4e:	f8d8 2000 	ldr.w	r2, [r8]
 8008d52:	3a01      	subs	r2, #1
 8008d54:	42b2      	cmp	r2, r6
 8008d56:	d10a      	bne.n	8008d6e <__gethex+0x3b8>
 8008d58:	1171      	asrs	r1, r6, #5
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f006 061f 	and.w	r6, r6, #31
 8008d60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d64:	fa02 f606 	lsl.w	r6, r2, r6
 8008d68:	421e      	tst	r6, r3
 8008d6a:	bf18      	it	ne
 8008d6c:	4617      	movne	r7, r2
 8008d6e:	f047 0720 	orr.w	r7, r7, #32
 8008d72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d74:	601d      	str	r5, [r3, #0]
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	601c      	str	r4, [r3, #0]
 8008d7a:	e6a4      	b.n	8008ac6 <__gethex+0x110>
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d82:	d8d8      	bhi.n	8008d36 <__gethex+0x380>
 8008d84:	68ab      	ldr	r3, [r5, #8]
 8008d86:	4599      	cmp	r9, r3
 8008d88:	db12      	blt.n	8008db0 <__gethex+0x3fa>
 8008d8a:	6869      	ldr	r1, [r5, #4]
 8008d8c:	9802      	ldr	r0, [sp, #8]
 8008d8e:	3101      	adds	r1, #1
 8008d90:	f000 f921 	bl	8008fd6 <_Balloc>
 8008d94:	692a      	ldr	r2, [r5, #16]
 8008d96:	3202      	adds	r2, #2
 8008d98:	f105 010c 	add.w	r1, r5, #12
 8008d9c:	4683      	mov	fp, r0
 8008d9e:	0092      	lsls	r2, r2, #2
 8008da0:	300c      	adds	r0, #12
 8008da2:	f000 f90d 	bl	8008fc0 <memcpy>
 8008da6:	4629      	mov	r1, r5
 8008da8:	9802      	ldr	r0, [sp, #8]
 8008daa:	f000 f948 	bl	800903e <_Bfree>
 8008dae:	465d      	mov	r5, fp
 8008db0:	692b      	ldr	r3, [r5, #16]
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008db8:	612a      	str	r2, [r5, #16]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	615a      	str	r2, [r3, #20]
 8008dbe:	e7c2      	b.n	8008d46 <__gethex+0x390>
 8008dc0:	692a      	ldr	r2, [r5, #16]
 8008dc2:	454a      	cmp	r2, r9
 8008dc4:	dd0b      	ble.n	8008dde <__gethex+0x428>
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f7ff fda5 	bl	8008918 <rshift>
 8008dce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dd2:	3401      	adds	r4, #1
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	f6ff aed9 	blt.w	8008b8c <__gethex+0x1d6>
 8008dda:	2701      	movs	r7, #1
 8008ddc:	e7c7      	b.n	8008d6e <__gethex+0x3b8>
 8008dde:	f016 061f 	ands.w	r6, r6, #31
 8008de2:	d0fa      	beq.n	8008dda <__gethex+0x424>
 8008de4:	449a      	add	sl, r3
 8008de6:	f1c6 0620 	rsb	r6, r6, #32
 8008dea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008dee:	f000 f9b6 	bl	800915e <__hi0bits>
 8008df2:	42b0      	cmp	r0, r6
 8008df4:	dbe7      	blt.n	8008dc6 <__gethex+0x410>
 8008df6:	e7f0      	b.n	8008dda <__gethex+0x424>

08008df8 <L_shift>:
 8008df8:	f1c2 0208 	rsb	r2, r2, #8
 8008dfc:	0092      	lsls	r2, r2, #2
 8008dfe:	b570      	push	{r4, r5, r6, lr}
 8008e00:	f1c2 0620 	rsb	r6, r2, #32
 8008e04:	6843      	ldr	r3, [r0, #4]
 8008e06:	6804      	ldr	r4, [r0, #0]
 8008e08:	fa03 f506 	lsl.w	r5, r3, r6
 8008e0c:	432c      	orrs	r4, r5
 8008e0e:	40d3      	lsrs	r3, r2
 8008e10:	6004      	str	r4, [r0, #0]
 8008e12:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e16:	4288      	cmp	r0, r1
 8008e18:	d3f4      	bcc.n	8008e04 <L_shift+0xc>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}

08008e1c <__match>:
 8008e1c:	b530      	push	{r4, r5, lr}
 8008e1e:	6803      	ldr	r3, [r0, #0]
 8008e20:	3301      	adds	r3, #1
 8008e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e26:	b914      	cbnz	r4, 8008e2e <__match+0x12>
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	bd30      	pop	{r4, r5, pc}
 8008e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e36:	2d19      	cmp	r5, #25
 8008e38:	bf98      	it	ls
 8008e3a:	3220      	addls	r2, #32
 8008e3c:	42a2      	cmp	r2, r4
 8008e3e:	d0f0      	beq.n	8008e22 <__match+0x6>
 8008e40:	2000      	movs	r0, #0
 8008e42:	e7f3      	b.n	8008e2c <__match+0x10>

08008e44 <__hexnan>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	680b      	ldr	r3, [r1, #0]
 8008e4a:	6801      	ldr	r1, [r0, #0]
 8008e4c:	115f      	asrs	r7, r3, #5
 8008e4e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008e52:	f013 031f 	ands.w	r3, r3, #31
 8008e56:	b087      	sub	sp, #28
 8008e58:	bf18      	it	ne
 8008e5a:	3704      	addne	r7, #4
 8008e5c:	2500      	movs	r5, #0
 8008e5e:	1f3e      	subs	r6, r7, #4
 8008e60:	4682      	mov	sl, r0
 8008e62:	4690      	mov	r8, r2
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	f847 5c04 	str.w	r5, [r7, #-4]
 8008e6a:	46b1      	mov	r9, r6
 8008e6c:	4634      	mov	r4, r6
 8008e6e:	9502      	str	r5, [sp, #8]
 8008e70:	46ab      	mov	fp, r5
 8008e72:	784a      	ldrb	r2, [r1, #1]
 8008e74:	1c4b      	adds	r3, r1, #1
 8008e76:	9303      	str	r3, [sp, #12]
 8008e78:	b342      	cbz	r2, 8008ecc <__hexnan+0x88>
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	9105      	str	r1, [sp, #20]
 8008e7e:	9204      	str	r2, [sp, #16]
 8008e80:	f7ff fd84 	bl	800898c <__hexdig_fun>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d143      	bne.n	8008f10 <__hexnan+0xcc>
 8008e88:	9a04      	ldr	r2, [sp, #16]
 8008e8a:	9905      	ldr	r1, [sp, #20]
 8008e8c:	2a20      	cmp	r2, #32
 8008e8e:	d818      	bhi.n	8008ec2 <__hexnan+0x7e>
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	459b      	cmp	fp, r3
 8008e94:	dd13      	ble.n	8008ebe <__hexnan+0x7a>
 8008e96:	454c      	cmp	r4, r9
 8008e98:	d206      	bcs.n	8008ea8 <__hexnan+0x64>
 8008e9a:	2d07      	cmp	r5, #7
 8008e9c:	dc04      	bgt.n	8008ea8 <__hexnan+0x64>
 8008e9e:	462a      	mov	r2, r5
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7ff ffa8 	bl	8008df8 <L_shift>
 8008ea8:	4544      	cmp	r4, r8
 8008eaa:	d944      	bls.n	8008f36 <__hexnan+0xf2>
 8008eac:	2300      	movs	r3, #0
 8008eae:	f1a4 0904 	sub.w	r9, r4, #4
 8008eb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008eb6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eba:	464c      	mov	r4, r9
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	9903      	ldr	r1, [sp, #12]
 8008ec0:	e7d7      	b.n	8008e72 <__hexnan+0x2e>
 8008ec2:	2a29      	cmp	r2, #41	; 0x29
 8008ec4:	d14a      	bne.n	8008f5c <__hexnan+0x118>
 8008ec6:	3102      	adds	r1, #2
 8008ec8:	f8ca 1000 	str.w	r1, [sl]
 8008ecc:	f1bb 0f00 	cmp.w	fp, #0
 8008ed0:	d044      	beq.n	8008f5c <__hexnan+0x118>
 8008ed2:	454c      	cmp	r4, r9
 8008ed4:	d206      	bcs.n	8008ee4 <__hexnan+0xa0>
 8008ed6:	2d07      	cmp	r5, #7
 8008ed8:	dc04      	bgt.n	8008ee4 <__hexnan+0xa0>
 8008eda:	462a      	mov	r2, r5
 8008edc:	4649      	mov	r1, r9
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f7ff ff8a 	bl	8008df8 <L_shift>
 8008ee4:	4544      	cmp	r4, r8
 8008ee6:	d928      	bls.n	8008f3a <__hexnan+0xf6>
 8008ee8:	4643      	mov	r3, r8
 8008eea:	f854 2b04 	ldr.w	r2, [r4], #4
 8008eee:	f843 2b04 	str.w	r2, [r3], #4
 8008ef2:	42a6      	cmp	r6, r4
 8008ef4:	d2f9      	bcs.n	8008eea <__hexnan+0xa6>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f843 2b04 	str.w	r2, [r3], #4
 8008efc:	429e      	cmp	r6, r3
 8008efe:	d2fb      	bcs.n	8008ef8 <__hexnan+0xb4>
 8008f00:	6833      	ldr	r3, [r6, #0]
 8008f02:	b91b      	cbnz	r3, 8008f0c <__hexnan+0xc8>
 8008f04:	4546      	cmp	r6, r8
 8008f06:	d127      	bne.n	8008f58 <__hexnan+0x114>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	6033      	str	r3, [r6, #0]
 8008f0c:	2005      	movs	r0, #5
 8008f0e:	e026      	b.n	8008f5e <__hexnan+0x11a>
 8008f10:	3501      	adds	r5, #1
 8008f12:	2d08      	cmp	r5, #8
 8008f14:	f10b 0b01 	add.w	fp, fp, #1
 8008f18:	dd06      	ble.n	8008f28 <__hexnan+0xe4>
 8008f1a:	4544      	cmp	r4, r8
 8008f1c:	d9cf      	bls.n	8008ebe <__hexnan+0x7a>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f24:	2501      	movs	r5, #1
 8008f26:	3c04      	subs	r4, #4
 8008f28:	6822      	ldr	r2, [r4, #0]
 8008f2a:	f000 000f 	and.w	r0, r0, #15
 8008f2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f32:	6020      	str	r0, [r4, #0]
 8008f34:	e7c3      	b.n	8008ebe <__hexnan+0x7a>
 8008f36:	2508      	movs	r5, #8
 8008f38:	e7c1      	b.n	8008ebe <__hexnan+0x7a>
 8008f3a:	9b01      	ldr	r3, [sp, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0df      	beq.n	8008f00 <__hexnan+0xbc>
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f44:	f1c3 0320 	rsb	r3, r3, #32
 8008f48:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008f50:	401a      	ands	r2, r3
 8008f52:	f847 2c04 	str.w	r2, [r7, #-4]
 8008f56:	e7d3      	b.n	8008f00 <__hexnan+0xbc>
 8008f58:	3e04      	subs	r6, #4
 8008f5a:	e7d1      	b.n	8008f00 <__hexnan+0xbc>
 8008f5c:	2004      	movs	r0, #4
 8008f5e:	b007      	add	sp, #28
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f64 <__locale_ctype_ptr_l>:
 8008f64:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008f68:	4770      	bx	lr

08008f6a <__localeconv_l>:
 8008f6a:	30f0      	adds	r0, #240	; 0xf0
 8008f6c:	4770      	bx	lr
	...

08008f70 <_localeconv_r>:
 8008f70:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <_localeconv_r+0x14>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a18      	ldr	r0, [r3, #32]
 8008f76:	4b04      	ldr	r3, [pc, #16]	; (8008f88 <_localeconv_r+0x18>)
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	bf08      	it	eq
 8008f7c:	4618      	moveq	r0, r3
 8008f7e:	30f0      	adds	r0, #240	; 0xf0
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	2000001c 	.word	0x2000001c
 8008f88:	20000080 	.word	0x20000080

08008f8c <malloc>:
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <malloc+0xc>)
 8008f8e:	4601      	mov	r1, r0
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f000 bc7b 	b.w	800988c <_malloc_r>
 8008f96:	bf00      	nop
 8008f98:	2000001c 	.word	0x2000001c

08008f9c <__ascii_mbtowc>:
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	b901      	cbnz	r1, 8008fa2 <__ascii_mbtowc+0x6>
 8008fa0:	a901      	add	r1, sp, #4
 8008fa2:	b142      	cbz	r2, 8008fb6 <__ascii_mbtowc+0x1a>
 8008fa4:	b14b      	cbz	r3, 8008fba <__ascii_mbtowc+0x1e>
 8008fa6:	7813      	ldrb	r3, [r2, #0]
 8008fa8:	600b      	str	r3, [r1, #0]
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	1c10      	adds	r0, r2, #0
 8008fae:	bf18      	it	ne
 8008fb0:	2001      	movne	r0, #1
 8008fb2:	b002      	add	sp, #8
 8008fb4:	4770      	bx	lr
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	e7fb      	b.n	8008fb2 <__ascii_mbtowc+0x16>
 8008fba:	f06f 0001 	mvn.w	r0, #1
 8008fbe:	e7f8      	b.n	8008fb2 <__ascii_mbtowc+0x16>

08008fc0 <memcpy>:
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	1e43      	subs	r3, r0, #1
 8008fc4:	440a      	add	r2, r1
 8008fc6:	4291      	cmp	r1, r2
 8008fc8:	d100      	bne.n	8008fcc <memcpy+0xc>
 8008fca:	bd10      	pop	{r4, pc}
 8008fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fd4:	e7f7      	b.n	8008fc6 <memcpy+0x6>

08008fd6 <_Balloc>:
 8008fd6:	b570      	push	{r4, r5, r6, lr}
 8008fd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fda:	4604      	mov	r4, r0
 8008fdc:	460e      	mov	r6, r1
 8008fde:	b93d      	cbnz	r5, 8008ff0 <_Balloc+0x1a>
 8008fe0:	2010      	movs	r0, #16
 8008fe2:	f7ff ffd3 	bl	8008f8c <malloc>
 8008fe6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fec:	6005      	str	r5, [r0, #0]
 8008fee:	60c5      	str	r5, [r0, #12]
 8008ff0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ff2:	68eb      	ldr	r3, [r5, #12]
 8008ff4:	b183      	cbz	r3, 8009018 <_Balloc+0x42>
 8008ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008ffe:	b9b8      	cbnz	r0, 8009030 <_Balloc+0x5a>
 8009000:	2101      	movs	r1, #1
 8009002:	fa01 f506 	lsl.w	r5, r1, r6
 8009006:	1d6a      	adds	r2, r5, #5
 8009008:	0092      	lsls	r2, r2, #2
 800900a:	4620      	mov	r0, r4
 800900c:	f000 fbe1 	bl	80097d2 <_calloc_r>
 8009010:	b160      	cbz	r0, 800902c <_Balloc+0x56>
 8009012:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009016:	e00e      	b.n	8009036 <_Balloc+0x60>
 8009018:	2221      	movs	r2, #33	; 0x21
 800901a:	2104      	movs	r1, #4
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fbd8 	bl	80097d2 <_calloc_r>
 8009022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009024:	60e8      	str	r0, [r5, #12]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e4      	bne.n	8008ff6 <_Balloc+0x20>
 800902c:	2000      	movs	r0, #0
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	6802      	ldr	r2, [r0, #0]
 8009032:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009036:	2300      	movs	r3, #0
 8009038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800903c:	e7f7      	b.n	800902e <_Balloc+0x58>

0800903e <_Bfree>:
 800903e:	b570      	push	{r4, r5, r6, lr}
 8009040:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009042:	4606      	mov	r6, r0
 8009044:	460d      	mov	r5, r1
 8009046:	b93c      	cbnz	r4, 8009058 <_Bfree+0x1a>
 8009048:	2010      	movs	r0, #16
 800904a:	f7ff ff9f 	bl	8008f8c <malloc>
 800904e:	6270      	str	r0, [r6, #36]	; 0x24
 8009050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009054:	6004      	str	r4, [r0, #0]
 8009056:	60c4      	str	r4, [r0, #12]
 8009058:	b13d      	cbz	r5, 800906a <_Bfree+0x2c>
 800905a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800905c:	686a      	ldr	r2, [r5, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009064:	6029      	str	r1, [r5, #0]
 8009066:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800906a:	bd70      	pop	{r4, r5, r6, pc}

0800906c <__multadd>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	690d      	ldr	r5, [r1, #16]
 8009072:	461f      	mov	r7, r3
 8009074:	4606      	mov	r6, r0
 8009076:	460c      	mov	r4, r1
 8009078:	f101 0c14 	add.w	ip, r1, #20
 800907c:	2300      	movs	r3, #0
 800907e:	f8dc 0000 	ldr.w	r0, [ip]
 8009082:	b281      	uxth	r1, r0
 8009084:	fb02 7101 	mla	r1, r2, r1, r7
 8009088:	0c0f      	lsrs	r7, r1, #16
 800908a:	0c00      	lsrs	r0, r0, #16
 800908c:	fb02 7000 	mla	r0, r2, r0, r7
 8009090:	b289      	uxth	r1, r1
 8009092:	3301      	adds	r3, #1
 8009094:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009098:	429d      	cmp	r5, r3
 800909a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800909e:	f84c 1b04 	str.w	r1, [ip], #4
 80090a2:	dcec      	bgt.n	800907e <__multadd+0x12>
 80090a4:	b1d7      	cbz	r7, 80090dc <__multadd+0x70>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc12      	bgt.n	80090d2 <__multadd+0x66>
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4630      	mov	r0, r6
 80090b0:	3101      	adds	r1, #1
 80090b2:	f7ff ff90 	bl	8008fd6 <_Balloc>
 80090b6:	6922      	ldr	r2, [r4, #16]
 80090b8:	3202      	adds	r2, #2
 80090ba:	f104 010c 	add.w	r1, r4, #12
 80090be:	4680      	mov	r8, r0
 80090c0:	0092      	lsls	r2, r2, #2
 80090c2:	300c      	adds	r0, #12
 80090c4:	f7ff ff7c 	bl	8008fc0 <memcpy>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff ffb7 	bl	800903e <_Bfree>
 80090d0:	4644      	mov	r4, r8
 80090d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090d6:	3501      	adds	r5, #1
 80090d8:	615f      	str	r7, [r3, #20]
 80090da:	6125      	str	r5, [r4, #16]
 80090dc:	4620      	mov	r0, r4
 80090de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090e2 <__s2b>:
 80090e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e6:	460c      	mov	r4, r1
 80090e8:	4615      	mov	r5, r2
 80090ea:	461f      	mov	r7, r3
 80090ec:	2209      	movs	r2, #9
 80090ee:	3308      	adds	r3, #8
 80090f0:	4606      	mov	r6, r0
 80090f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80090f6:	2100      	movs	r1, #0
 80090f8:	2201      	movs	r2, #1
 80090fa:	429a      	cmp	r2, r3
 80090fc:	db20      	blt.n	8009140 <__s2b+0x5e>
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff69 	bl	8008fd6 <_Balloc>
 8009104:	9b08      	ldr	r3, [sp, #32]
 8009106:	6143      	str	r3, [r0, #20]
 8009108:	2d09      	cmp	r5, #9
 800910a:	f04f 0301 	mov.w	r3, #1
 800910e:	6103      	str	r3, [r0, #16]
 8009110:	dd19      	ble.n	8009146 <__s2b+0x64>
 8009112:	f104 0809 	add.w	r8, r4, #9
 8009116:	46c1      	mov	r9, r8
 8009118:	442c      	add	r4, r5
 800911a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800911e:	4601      	mov	r1, r0
 8009120:	3b30      	subs	r3, #48	; 0x30
 8009122:	220a      	movs	r2, #10
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff ffa1 	bl	800906c <__multadd>
 800912a:	45a1      	cmp	r9, r4
 800912c:	d1f5      	bne.n	800911a <__s2b+0x38>
 800912e:	eb08 0405 	add.w	r4, r8, r5
 8009132:	3c08      	subs	r4, #8
 8009134:	1b2d      	subs	r5, r5, r4
 8009136:	1963      	adds	r3, r4, r5
 8009138:	42bb      	cmp	r3, r7
 800913a:	db07      	blt.n	800914c <__s2b+0x6a>
 800913c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009140:	0052      	lsls	r2, r2, #1
 8009142:	3101      	adds	r1, #1
 8009144:	e7d9      	b.n	80090fa <__s2b+0x18>
 8009146:	340a      	adds	r4, #10
 8009148:	2509      	movs	r5, #9
 800914a:	e7f3      	b.n	8009134 <__s2b+0x52>
 800914c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009150:	4601      	mov	r1, r0
 8009152:	3b30      	subs	r3, #48	; 0x30
 8009154:	220a      	movs	r2, #10
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ff88 	bl	800906c <__multadd>
 800915c:	e7eb      	b.n	8009136 <__s2b+0x54>

0800915e <__hi0bits>:
 800915e:	0c02      	lsrs	r2, r0, #16
 8009160:	0412      	lsls	r2, r2, #16
 8009162:	4603      	mov	r3, r0
 8009164:	b9b2      	cbnz	r2, 8009194 <__hi0bits+0x36>
 8009166:	0403      	lsls	r3, r0, #16
 8009168:	2010      	movs	r0, #16
 800916a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800916e:	bf04      	itt	eq
 8009170:	021b      	lsleq	r3, r3, #8
 8009172:	3008      	addeq	r0, #8
 8009174:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009178:	bf04      	itt	eq
 800917a:	011b      	lsleq	r3, r3, #4
 800917c:	3004      	addeq	r0, #4
 800917e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009182:	bf04      	itt	eq
 8009184:	009b      	lsleq	r3, r3, #2
 8009186:	3002      	addeq	r0, #2
 8009188:	2b00      	cmp	r3, #0
 800918a:	db06      	blt.n	800919a <__hi0bits+0x3c>
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	d503      	bpl.n	8009198 <__hi0bits+0x3a>
 8009190:	3001      	adds	r0, #1
 8009192:	4770      	bx	lr
 8009194:	2000      	movs	r0, #0
 8009196:	e7e8      	b.n	800916a <__hi0bits+0xc>
 8009198:	2020      	movs	r0, #32
 800919a:	4770      	bx	lr

0800919c <__lo0bits>:
 800919c:	6803      	ldr	r3, [r0, #0]
 800919e:	f013 0207 	ands.w	r2, r3, #7
 80091a2:	4601      	mov	r1, r0
 80091a4:	d00b      	beq.n	80091be <__lo0bits+0x22>
 80091a6:	07da      	lsls	r2, r3, #31
 80091a8:	d423      	bmi.n	80091f2 <__lo0bits+0x56>
 80091aa:	0798      	lsls	r0, r3, #30
 80091ac:	bf49      	itett	mi
 80091ae:	085b      	lsrmi	r3, r3, #1
 80091b0:	089b      	lsrpl	r3, r3, #2
 80091b2:	2001      	movmi	r0, #1
 80091b4:	600b      	strmi	r3, [r1, #0]
 80091b6:	bf5c      	itt	pl
 80091b8:	600b      	strpl	r3, [r1, #0]
 80091ba:	2002      	movpl	r0, #2
 80091bc:	4770      	bx	lr
 80091be:	b298      	uxth	r0, r3
 80091c0:	b9a8      	cbnz	r0, 80091ee <__lo0bits+0x52>
 80091c2:	0c1b      	lsrs	r3, r3, #16
 80091c4:	2010      	movs	r0, #16
 80091c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091ca:	bf04      	itt	eq
 80091cc:	0a1b      	lsreq	r3, r3, #8
 80091ce:	3008      	addeq	r0, #8
 80091d0:	071a      	lsls	r2, r3, #28
 80091d2:	bf04      	itt	eq
 80091d4:	091b      	lsreq	r3, r3, #4
 80091d6:	3004      	addeq	r0, #4
 80091d8:	079a      	lsls	r2, r3, #30
 80091da:	bf04      	itt	eq
 80091dc:	089b      	lsreq	r3, r3, #2
 80091de:	3002      	addeq	r0, #2
 80091e0:	07da      	lsls	r2, r3, #31
 80091e2:	d402      	bmi.n	80091ea <__lo0bits+0x4e>
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	d006      	beq.n	80091f6 <__lo0bits+0x5a>
 80091e8:	3001      	adds	r0, #1
 80091ea:	600b      	str	r3, [r1, #0]
 80091ec:	4770      	bx	lr
 80091ee:	4610      	mov	r0, r2
 80091f0:	e7e9      	b.n	80091c6 <__lo0bits+0x2a>
 80091f2:	2000      	movs	r0, #0
 80091f4:	4770      	bx	lr
 80091f6:	2020      	movs	r0, #32
 80091f8:	4770      	bx	lr

080091fa <__i2b>:
 80091fa:	b510      	push	{r4, lr}
 80091fc:	460c      	mov	r4, r1
 80091fe:	2101      	movs	r1, #1
 8009200:	f7ff fee9 	bl	8008fd6 <_Balloc>
 8009204:	2201      	movs	r2, #1
 8009206:	6144      	str	r4, [r0, #20]
 8009208:	6102      	str	r2, [r0, #16]
 800920a:	bd10      	pop	{r4, pc}

0800920c <__multiply>:
 800920c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	4614      	mov	r4, r2
 8009212:	690a      	ldr	r2, [r1, #16]
 8009214:	6923      	ldr	r3, [r4, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	bfb8      	it	lt
 800921a:	460b      	movlt	r3, r1
 800921c:	4688      	mov	r8, r1
 800921e:	bfbc      	itt	lt
 8009220:	46a0      	movlt	r8, r4
 8009222:	461c      	movlt	r4, r3
 8009224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009228:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800922c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009234:	eb07 0609 	add.w	r6, r7, r9
 8009238:	42b3      	cmp	r3, r6
 800923a:	bfb8      	it	lt
 800923c:	3101      	addlt	r1, #1
 800923e:	f7ff feca 	bl	8008fd6 <_Balloc>
 8009242:	f100 0514 	add.w	r5, r0, #20
 8009246:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800924a:	462b      	mov	r3, r5
 800924c:	2200      	movs	r2, #0
 800924e:	4573      	cmp	r3, lr
 8009250:	d316      	bcc.n	8009280 <__multiply+0x74>
 8009252:	f104 0214 	add.w	r2, r4, #20
 8009256:	f108 0114 	add.w	r1, r8, #20
 800925a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800925e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	9201      	str	r2, [sp, #4]
 8009268:	4293      	cmp	r3, r2
 800926a:	d80c      	bhi.n	8009286 <__multiply+0x7a>
 800926c:	2e00      	cmp	r6, #0
 800926e:	dd03      	ble.n	8009278 <__multiply+0x6c>
 8009270:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009274:	2b00      	cmp	r3, #0
 8009276:	d05d      	beq.n	8009334 <__multiply+0x128>
 8009278:	6106      	str	r6, [r0, #16]
 800927a:	b003      	add	sp, #12
 800927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009280:	f843 2b04 	str.w	r2, [r3], #4
 8009284:	e7e3      	b.n	800924e <__multiply+0x42>
 8009286:	f8b2 b000 	ldrh.w	fp, [r2]
 800928a:	f1bb 0f00 	cmp.w	fp, #0
 800928e:	d023      	beq.n	80092d8 <__multiply+0xcc>
 8009290:	4689      	mov	r9, r1
 8009292:	46ac      	mov	ip, r5
 8009294:	f04f 0800 	mov.w	r8, #0
 8009298:	f859 4b04 	ldr.w	r4, [r9], #4
 800929c:	f8dc a000 	ldr.w	sl, [ip]
 80092a0:	b2a3      	uxth	r3, r4
 80092a2:	fa1f fa8a 	uxth.w	sl, sl
 80092a6:	fb0b a303 	mla	r3, fp, r3, sl
 80092aa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092ae:	f8dc 4000 	ldr.w	r4, [ip]
 80092b2:	4443      	add	r3, r8
 80092b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092b8:	fb0b 840a 	mla	r4, fp, sl, r8
 80092bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80092c0:	46e2      	mov	sl, ip
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092c8:	454f      	cmp	r7, r9
 80092ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092ce:	f84a 3b04 	str.w	r3, [sl], #4
 80092d2:	d82b      	bhi.n	800932c <__multiply+0x120>
 80092d4:	f8cc 8004 	str.w	r8, [ip, #4]
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80092de:	3204      	adds	r2, #4
 80092e0:	f1ba 0f00 	cmp.w	sl, #0
 80092e4:	d020      	beq.n	8009328 <__multiply+0x11c>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	4689      	mov	r9, r1
 80092ea:	46a8      	mov	r8, r5
 80092ec:	f04f 0b00 	mov.w	fp, #0
 80092f0:	f8b9 c000 	ldrh.w	ip, [r9]
 80092f4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80092f8:	fb0a 440c 	mla	r4, sl, ip, r4
 80092fc:	445c      	add	r4, fp
 80092fe:	46c4      	mov	ip, r8
 8009300:	b29b      	uxth	r3, r3
 8009302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009306:	f84c 3b04 	str.w	r3, [ip], #4
 800930a:	f859 3b04 	ldr.w	r3, [r9], #4
 800930e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009312:	0c1b      	lsrs	r3, r3, #16
 8009314:	fb0a b303 	mla	r3, sl, r3, fp
 8009318:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800931c:	454f      	cmp	r7, r9
 800931e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009322:	d805      	bhi.n	8009330 <__multiply+0x124>
 8009324:	f8c8 3004 	str.w	r3, [r8, #4]
 8009328:	3504      	adds	r5, #4
 800932a:	e79b      	b.n	8009264 <__multiply+0x58>
 800932c:	46d4      	mov	ip, sl
 800932e:	e7b3      	b.n	8009298 <__multiply+0x8c>
 8009330:	46e0      	mov	r8, ip
 8009332:	e7dd      	b.n	80092f0 <__multiply+0xe4>
 8009334:	3e01      	subs	r6, #1
 8009336:	e799      	b.n	800926c <__multiply+0x60>

08009338 <__pow5mult>:
 8009338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800933c:	4615      	mov	r5, r2
 800933e:	f012 0203 	ands.w	r2, r2, #3
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	d007      	beq.n	8009358 <__pow5mult+0x20>
 8009348:	3a01      	subs	r2, #1
 800934a:	4c21      	ldr	r4, [pc, #132]	; (80093d0 <__pow5mult+0x98>)
 800934c:	2300      	movs	r3, #0
 800934e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009352:	f7ff fe8b 	bl	800906c <__multadd>
 8009356:	4607      	mov	r7, r0
 8009358:	10ad      	asrs	r5, r5, #2
 800935a:	d035      	beq.n	80093c8 <__pow5mult+0x90>
 800935c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800935e:	b93c      	cbnz	r4, 8009370 <__pow5mult+0x38>
 8009360:	2010      	movs	r0, #16
 8009362:	f7ff fe13 	bl	8008f8c <malloc>
 8009366:	6270      	str	r0, [r6, #36]	; 0x24
 8009368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800936c:	6004      	str	r4, [r0, #0]
 800936e:	60c4      	str	r4, [r0, #12]
 8009370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009378:	b94c      	cbnz	r4, 800938e <__pow5mult+0x56>
 800937a:	f240 2171 	movw	r1, #625	; 0x271
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff ff3b 	bl	80091fa <__i2b>
 8009384:	2300      	movs	r3, #0
 8009386:	f8c8 0008 	str.w	r0, [r8, #8]
 800938a:	4604      	mov	r4, r0
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	07eb      	lsls	r3, r5, #31
 8009394:	d50a      	bpl.n	80093ac <__pow5mult+0x74>
 8009396:	4639      	mov	r1, r7
 8009398:	4622      	mov	r2, r4
 800939a:	4630      	mov	r0, r6
 800939c:	f7ff ff36 	bl	800920c <__multiply>
 80093a0:	4639      	mov	r1, r7
 80093a2:	4681      	mov	r9, r0
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff fe4a 	bl	800903e <_Bfree>
 80093aa:	464f      	mov	r7, r9
 80093ac:	106d      	asrs	r5, r5, #1
 80093ae:	d00b      	beq.n	80093c8 <__pow5mult+0x90>
 80093b0:	6820      	ldr	r0, [r4, #0]
 80093b2:	b938      	cbnz	r0, 80093c4 <__pow5mult+0x8c>
 80093b4:	4622      	mov	r2, r4
 80093b6:	4621      	mov	r1, r4
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7ff ff27 	bl	800920c <__multiply>
 80093be:	6020      	str	r0, [r4, #0]
 80093c0:	f8c0 8000 	str.w	r8, [r0]
 80093c4:	4604      	mov	r4, r0
 80093c6:	e7e4      	b.n	8009392 <__pow5mult+0x5a>
 80093c8:	4638      	mov	r0, r7
 80093ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ce:	bf00      	nop
 80093d0:	0800a9c8 	.word	0x0800a9c8

080093d4 <__lshift>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	460c      	mov	r4, r1
 80093da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6849      	ldr	r1, [r1, #4]
 80093e2:	eb0a 0903 	add.w	r9, sl, r3
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	4607      	mov	r7, r0
 80093ea:	4616      	mov	r6, r2
 80093ec:	f109 0501 	add.w	r5, r9, #1
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	db32      	blt.n	800945a <__lshift+0x86>
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff fdee 	bl	8008fd6 <_Balloc>
 80093fa:	2300      	movs	r3, #0
 80093fc:	4680      	mov	r8, r0
 80093fe:	f100 0114 	add.w	r1, r0, #20
 8009402:	461a      	mov	r2, r3
 8009404:	4553      	cmp	r3, sl
 8009406:	db2b      	blt.n	8009460 <__lshift+0x8c>
 8009408:	6920      	ldr	r0, [r4, #16]
 800940a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800940e:	f104 0314 	add.w	r3, r4, #20
 8009412:	f016 021f 	ands.w	r2, r6, #31
 8009416:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800941a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800941e:	d025      	beq.n	800946c <__lshift+0x98>
 8009420:	f1c2 0e20 	rsb	lr, r2, #32
 8009424:	2000      	movs	r0, #0
 8009426:	681e      	ldr	r6, [r3, #0]
 8009428:	468a      	mov	sl, r1
 800942a:	4096      	lsls	r6, r2
 800942c:	4330      	orrs	r0, r6
 800942e:	f84a 0b04 	str.w	r0, [sl], #4
 8009432:	f853 0b04 	ldr.w	r0, [r3], #4
 8009436:	459c      	cmp	ip, r3
 8009438:	fa20 f00e 	lsr.w	r0, r0, lr
 800943c:	d814      	bhi.n	8009468 <__lshift+0x94>
 800943e:	6048      	str	r0, [r1, #4]
 8009440:	b108      	cbz	r0, 8009446 <__lshift+0x72>
 8009442:	f109 0502 	add.w	r5, r9, #2
 8009446:	3d01      	subs	r5, #1
 8009448:	4638      	mov	r0, r7
 800944a:	f8c8 5010 	str.w	r5, [r8, #16]
 800944e:	4621      	mov	r1, r4
 8009450:	f7ff fdf5 	bl	800903e <_Bfree>
 8009454:	4640      	mov	r0, r8
 8009456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945a:	3101      	adds	r1, #1
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	e7c7      	b.n	80093f0 <__lshift+0x1c>
 8009460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009464:	3301      	adds	r3, #1
 8009466:	e7cd      	b.n	8009404 <__lshift+0x30>
 8009468:	4651      	mov	r1, sl
 800946a:	e7dc      	b.n	8009426 <__lshift+0x52>
 800946c:	3904      	subs	r1, #4
 800946e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009472:	f841 2f04 	str.w	r2, [r1, #4]!
 8009476:	459c      	cmp	ip, r3
 8009478:	d8f9      	bhi.n	800946e <__lshift+0x9a>
 800947a:	e7e4      	b.n	8009446 <__lshift+0x72>

0800947c <__mcmp>:
 800947c:	6903      	ldr	r3, [r0, #16]
 800947e:	690a      	ldr	r2, [r1, #16]
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	b530      	push	{r4, r5, lr}
 8009484:	d10c      	bne.n	80094a0 <__mcmp+0x24>
 8009486:	0092      	lsls	r2, r2, #2
 8009488:	3014      	adds	r0, #20
 800948a:	3114      	adds	r1, #20
 800948c:	1884      	adds	r4, r0, r2
 800948e:	4411      	add	r1, r2
 8009490:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009498:	4295      	cmp	r5, r2
 800949a:	d003      	beq.n	80094a4 <__mcmp+0x28>
 800949c:	d305      	bcc.n	80094aa <__mcmp+0x2e>
 800949e:	2301      	movs	r3, #1
 80094a0:	4618      	mov	r0, r3
 80094a2:	bd30      	pop	{r4, r5, pc}
 80094a4:	42a0      	cmp	r0, r4
 80094a6:	d3f3      	bcc.n	8009490 <__mcmp+0x14>
 80094a8:	e7fa      	b.n	80094a0 <__mcmp+0x24>
 80094aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ae:	e7f7      	b.n	80094a0 <__mcmp+0x24>

080094b0 <__mdiff>:
 80094b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	460d      	mov	r5, r1
 80094b6:	4607      	mov	r7, r0
 80094b8:	4611      	mov	r1, r2
 80094ba:	4628      	mov	r0, r5
 80094bc:	4614      	mov	r4, r2
 80094be:	f7ff ffdd 	bl	800947c <__mcmp>
 80094c2:	1e06      	subs	r6, r0, #0
 80094c4:	d108      	bne.n	80094d8 <__mdiff+0x28>
 80094c6:	4631      	mov	r1, r6
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7ff fd84 	bl	8008fd6 <_Balloc>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80094d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d8:	bfa4      	itt	ge
 80094da:	4623      	movge	r3, r4
 80094dc:	462c      	movge	r4, r5
 80094de:	4638      	mov	r0, r7
 80094e0:	6861      	ldr	r1, [r4, #4]
 80094e2:	bfa6      	itte	ge
 80094e4:	461d      	movge	r5, r3
 80094e6:	2600      	movge	r6, #0
 80094e8:	2601      	movlt	r6, #1
 80094ea:	f7ff fd74 	bl	8008fd6 <_Balloc>
 80094ee:	692b      	ldr	r3, [r5, #16]
 80094f0:	60c6      	str	r6, [r0, #12]
 80094f2:	6926      	ldr	r6, [r4, #16]
 80094f4:	f105 0914 	add.w	r9, r5, #20
 80094f8:	f104 0214 	add.w	r2, r4, #20
 80094fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009500:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009504:	f100 0514 	add.w	r5, r0, #20
 8009508:	f04f 0e00 	mov.w	lr, #0
 800950c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009510:	f859 4b04 	ldr.w	r4, [r9], #4
 8009514:	fa1e f18a 	uxtah	r1, lr, sl
 8009518:	b2a3      	uxth	r3, r4
 800951a:	1ac9      	subs	r1, r1, r3
 800951c:	0c23      	lsrs	r3, r4, #16
 800951e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009522:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009526:	b289      	uxth	r1, r1
 8009528:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800952c:	45c8      	cmp	r8, r9
 800952e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009532:	4694      	mov	ip, r2
 8009534:	f845 3b04 	str.w	r3, [r5], #4
 8009538:	d8e8      	bhi.n	800950c <__mdiff+0x5c>
 800953a:	45bc      	cmp	ip, r7
 800953c:	d304      	bcc.n	8009548 <__mdiff+0x98>
 800953e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009542:	b183      	cbz	r3, 8009566 <__mdiff+0xb6>
 8009544:	6106      	str	r6, [r0, #16]
 8009546:	e7c5      	b.n	80094d4 <__mdiff+0x24>
 8009548:	f85c 1b04 	ldr.w	r1, [ip], #4
 800954c:	fa1e f381 	uxtah	r3, lr, r1
 8009550:	141a      	asrs	r2, r3, #16
 8009552:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009556:	b29b      	uxth	r3, r3
 8009558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800955c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009560:	f845 3b04 	str.w	r3, [r5], #4
 8009564:	e7e9      	b.n	800953a <__mdiff+0x8a>
 8009566:	3e01      	subs	r6, #1
 8009568:	e7e9      	b.n	800953e <__mdiff+0x8e>
	...

0800956c <__ulp>:
 800956c:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <__ulp+0x4c>)
 800956e:	ee10 2a90 	vmov	r2, s1
 8009572:	401a      	ands	r2, r3
 8009574:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009578:	2b00      	cmp	r3, #0
 800957a:	dd04      	ble.n	8009586 <__ulp+0x1a>
 800957c:	2000      	movs	r0, #0
 800957e:	4619      	mov	r1, r3
 8009580:	ec41 0b10 	vmov	d0, r0, r1
 8009584:	4770      	bx	lr
 8009586:	425b      	negs	r3, r3
 8009588:	151b      	asrs	r3, r3, #20
 800958a:	2b13      	cmp	r3, #19
 800958c:	f04f 0000 	mov.w	r0, #0
 8009590:	f04f 0100 	mov.w	r1, #0
 8009594:	dc04      	bgt.n	80095a0 <__ulp+0x34>
 8009596:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800959a:	fa42 f103 	asr.w	r1, r2, r3
 800959e:	e7ef      	b.n	8009580 <__ulp+0x14>
 80095a0:	3b14      	subs	r3, #20
 80095a2:	2b1e      	cmp	r3, #30
 80095a4:	f04f 0201 	mov.w	r2, #1
 80095a8:	bfda      	itte	le
 80095aa:	f1c3 031f 	rsble	r3, r3, #31
 80095ae:	fa02 f303 	lslle.w	r3, r2, r3
 80095b2:	4613      	movgt	r3, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	e7e3      	b.n	8009580 <__ulp+0x14>
 80095b8:	7ff00000 	.word	0x7ff00000

080095bc <__b2d>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	6905      	ldr	r5, [r0, #16]
 80095c0:	f100 0714 	add.w	r7, r0, #20
 80095c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80095c8:	1f2e      	subs	r6, r5, #4
 80095ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff fdc5 	bl	800915e <__hi0bits>
 80095d4:	f1c0 0320 	rsb	r3, r0, #32
 80095d8:	280a      	cmp	r0, #10
 80095da:	600b      	str	r3, [r1, #0]
 80095dc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009654 <__b2d+0x98>
 80095e0:	dc14      	bgt.n	800960c <__b2d+0x50>
 80095e2:	f1c0 0e0b 	rsb	lr, r0, #11
 80095e6:	fa24 f10e 	lsr.w	r1, r4, lr
 80095ea:	42b7      	cmp	r7, r6
 80095ec:	ea41 030c 	orr.w	r3, r1, ip
 80095f0:	bf34      	ite	cc
 80095f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095f6:	2100      	movcs	r1, #0
 80095f8:	3015      	adds	r0, #21
 80095fa:	fa04 f000 	lsl.w	r0, r4, r0
 80095fe:	fa21 f10e 	lsr.w	r1, r1, lr
 8009602:	ea40 0201 	orr.w	r2, r0, r1
 8009606:	ec43 2b10 	vmov	d0, r2, r3
 800960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960c:	42b7      	cmp	r7, r6
 800960e:	bf3a      	itte	cc
 8009610:	f1a5 0608 	subcc.w	r6, r5, #8
 8009614:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009618:	2100      	movcs	r1, #0
 800961a:	380b      	subs	r0, #11
 800961c:	d015      	beq.n	800964a <__b2d+0x8e>
 800961e:	4084      	lsls	r4, r0
 8009620:	f1c0 0520 	rsb	r5, r0, #32
 8009624:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009628:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800962c:	42be      	cmp	r6, r7
 800962e:	fa21 fc05 	lsr.w	ip, r1, r5
 8009632:	ea44 030c 	orr.w	r3, r4, ip
 8009636:	bf8c      	ite	hi
 8009638:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800963c:	2400      	movls	r4, #0
 800963e:	fa01 f000 	lsl.w	r0, r1, r0
 8009642:	40ec      	lsrs	r4, r5
 8009644:	ea40 0204 	orr.w	r2, r0, r4
 8009648:	e7dd      	b.n	8009606 <__b2d+0x4a>
 800964a:	ea44 030c 	orr.w	r3, r4, ip
 800964e:	460a      	mov	r2, r1
 8009650:	e7d9      	b.n	8009606 <__b2d+0x4a>
 8009652:	bf00      	nop
 8009654:	3ff00000 	.word	0x3ff00000

08009658 <__d2b>:
 8009658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800965c:	460e      	mov	r6, r1
 800965e:	2101      	movs	r1, #1
 8009660:	ec59 8b10 	vmov	r8, r9, d0
 8009664:	4615      	mov	r5, r2
 8009666:	f7ff fcb6 	bl	8008fd6 <_Balloc>
 800966a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800966e:	4607      	mov	r7, r0
 8009670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009674:	bb34      	cbnz	r4, 80096c4 <__d2b+0x6c>
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	f1b8 0300 	subs.w	r3, r8, #0
 800967c:	d027      	beq.n	80096ce <__d2b+0x76>
 800967e:	a802      	add	r0, sp, #8
 8009680:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009684:	f7ff fd8a 	bl	800919c <__lo0bits>
 8009688:	9900      	ldr	r1, [sp, #0]
 800968a:	b1f0      	cbz	r0, 80096ca <__d2b+0x72>
 800968c:	9a01      	ldr	r2, [sp, #4]
 800968e:	f1c0 0320 	rsb	r3, r0, #32
 8009692:	fa02 f303 	lsl.w	r3, r2, r3
 8009696:	430b      	orrs	r3, r1
 8009698:	40c2      	lsrs	r2, r0
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	9201      	str	r2, [sp, #4]
 800969e:	9b01      	ldr	r3, [sp, #4]
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bf14      	ite	ne
 80096a6:	2102      	movne	r1, #2
 80096a8:	2101      	moveq	r1, #1
 80096aa:	6139      	str	r1, [r7, #16]
 80096ac:	b1c4      	cbz	r4, 80096e0 <__d2b+0x88>
 80096ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80096b2:	4404      	add	r4, r0
 80096b4:	6034      	str	r4, [r6, #0]
 80096b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096ba:	6028      	str	r0, [r5, #0]
 80096bc:	4638      	mov	r0, r7
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096c8:	e7d5      	b.n	8009676 <__d2b+0x1e>
 80096ca:	6179      	str	r1, [r7, #20]
 80096cc:	e7e7      	b.n	800969e <__d2b+0x46>
 80096ce:	a801      	add	r0, sp, #4
 80096d0:	f7ff fd64 	bl	800919c <__lo0bits>
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	2101      	movs	r1, #1
 80096da:	6139      	str	r1, [r7, #16]
 80096dc:	3020      	adds	r0, #32
 80096de:	e7e5      	b.n	80096ac <__d2b+0x54>
 80096e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80096e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096e8:	6030      	str	r0, [r6, #0]
 80096ea:	6918      	ldr	r0, [r3, #16]
 80096ec:	f7ff fd37 	bl	800915e <__hi0bits>
 80096f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80096f4:	e7e1      	b.n	80096ba <__d2b+0x62>

080096f6 <__ratio>:
 80096f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	4688      	mov	r8, r1
 80096fc:	4669      	mov	r1, sp
 80096fe:	4681      	mov	r9, r0
 8009700:	f7ff ff5c 	bl	80095bc <__b2d>
 8009704:	a901      	add	r1, sp, #4
 8009706:	4640      	mov	r0, r8
 8009708:	ec57 6b10 	vmov	r6, r7, d0
 800970c:	f7ff ff56 	bl	80095bc <__b2d>
 8009710:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009714:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009718:	eba3 0c02 	sub.w	ip, r3, r2
 800971c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009720:	1a9b      	subs	r3, r3, r2
 8009722:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009726:	ec5b ab10 	vmov	sl, fp, d0
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfce      	itee	gt
 800972e:	463a      	movgt	r2, r7
 8009730:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009734:	465a      	movle	r2, fp
 8009736:	4659      	mov	r1, fp
 8009738:	463d      	mov	r5, r7
 800973a:	bfd4      	ite	le
 800973c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009740:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009744:	4630      	mov	r0, r6
 8009746:	ee10 2a10 	vmov	r2, s0
 800974a:	460b      	mov	r3, r1
 800974c:	4629      	mov	r1, r5
 800974e:	f7f7 f87d 	bl	800084c <__aeabi_ddiv>
 8009752:	ec41 0b10 	vmov	d0, r0, r1
 8009756:	b003      	add	sp, #12
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800975c <__copybits>:
 800975c:	3901      	subs	r1, #1
 800975e:	b510      	push	{r4, lr}
 8009760:	1149      	asrs	r1, r1, #5
 8009762:	6914      	ldr	r4, [r2, #16]
 8009764:	3101      	adds	r1, #1
 8009766:	f102 0314 	add.w	r3, r2, #20
 800976a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800976e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009772:	42a3      	cmp	r3, r4
 8009774:	4602      	mov	r2, r0
 8009776:	d303      	bcc.n	8009780 <__copybits+0x24>
 8009778:	2300      	movs	r3, #0
 800977a:	428a      	cmp	r2, r1
 800977c:	d305      	bcc.n	800978a <__copybits+0x2e>
 800977e:	bd10      	pop	{r4, pc}
 8009780:	f853 2b04 	ldr.w	r2, [r3], #4
 8009784:	f840 2b04 	str.w	r2, [r0], #4
 8009788:	e7f3      	b.n	8009772 <__copybits+0x16>
 800978a:	f842 3b04 	str.w	r3, [r2], #4
 800978e:	e7f4      	b.n	800977a <__copybits+0x1e>

08009790 <__any_on>:
 8009790:	f100 0214 	add.w	r2, r0, #20
 8009794:	6900      	ldr	r0, [r0, #16]
 8009796:	114b      	asrs	r3, r1, #5
 8009798:	4298      	cmp	r0, r3
 800979a:	b510      	push	{r4, lr}
 800979c:	db11      	blt.n	80097c2 <__any_on+0x32>
 800979e:	dd0a      	ble.n	80097b6 <__any_on+0x26>
 80097a0:	f011 011f 	ands.w	r1, r1, #31
 80097a4:	d007      	beq.n	80097b6 <__any_on+0x26>
 80097a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097aa:	fa24 f001 	lsr.w	r0, r4, r1
 80097ae:	fa00 f101 	lsl.w	r1, r0, r1
 80097b2:	428c      	cmp	r4, r1
 80097b4:	d10b      	bne.n	80097ce <__any_on+0x3e>
 80097b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d803      	bhi.n	80097c6 <__any_on+0x36>
 80097be:	2000      	movs	r0, #0
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	4603      	mov	r3, r0
 80097c4:	e7f7      	b.n	80097b6 <__any_on+0x26>
 80097c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097ca:	2900      	cmp	r1, #0
 80097cc:	d0f5      	beq.n	80097ba <__any_on+0x2a>
 80097ce:	2001      	movs	r0, #1
 80097d0:	e7f6      	b.n	80097c0 <__any_on+0x30>

080097d2 <_calloc_r>:
 80097d2:	b538      	push	{r3, r4, r5, lr}
 80097d4:	fb02 f401 	mul.w	r4, r2, r1
 80097d8:	4621      	mov	r1, r4
 80097da:	f000 f857 	bl	800988c <_malloc_r>
 80097de:	4605      	mov	r5, r0
 80097e0:	b118      	cbz	r0, 80097ea <_calloc_r+0x18>
 80097e2:	4622      	mov	r2, r4
 80097e4:	2100      	movs	r1, #0
 80097e6:	f7fc fcfb 	bl	80061e0 <memset>
 80097ea:	4628      	mov	r0, r5
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080097f0 <_free_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4605      	mov	r5, r0
 80097f4:	2900      	cmp	r1, #0
 80097f6:	d045      	beq.n	8009884 <_free_r+0x94>
 80097f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fc:	1f0c      	subs	r4, r1, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bfb8      	it	lt
 8009802:	18e4      	addlt	r4, r4, r3
 8009804:	f000 fa36 	bl	8009c74 <__malloc_lock>
 8009808:	4a1f      	ldr	r2, [pc, #124]	; (8009888 <_free_r+0x98>)
 800980a:	6813      	ldr	r3, [r2, #0]
 800980c:	4610      	mov	r0, r2
 800980e:	b933      	cbnz	r3, 800981e <_free_r+0x2e>
 8009810:	6063      	str	r3, [r4, #4]
 8009812:	6014      	str	r4, [r2, #0]
 8009814:	4628      	mov	r0, r5
 8009816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800981a:	f000 ba2c 	b.w	8009c76 <__malloc_unlock>
 800981e:	42a3      	cmp	r3, r4
 8009820:	d90c      	bls.n	800983c <_free_r+0x4c>
 8009822:	6821      	ldr	r1, [r4, #0]
 8009824:	1862      	adds	r2, r4, r1
 8009826:	4293      	cmp	r3, r2
 8009828:	bf04      	itt	eq
 800982a:	681a      	ldreq	r2, [r3, #0]
 800982c:	685b      	ldreq	r3, [r3, #4]
 800982e:	6063      	str	r3, [r4, #4]
 8009830:	bf04      	itt	eq
 8009832:	1852      	addeq	r2, r2, r1
 8009834:	6022      	streq	r2, [r4, #0]
 8009836:	6004      	str	r4, [r0, #0]
 8009838:	e7ec      	b.n	8009814 <_free_r+0x24>
 800983a:	4613      	mov	r3, r2
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	b10a      	cbz	r2, 8009844 <_free_r+0x54>
 8009840:	42a2      	cmp	r2, r4
 8009842:	d9fa      	bls.n	800983a <_free_r+0x4a>
 8009844:	6819      	ldr	r1, [r3, #0]
 8009846:	1858      	adds	r0, r3, r1
 8009848:	42a0      	cmp	r0, r4
 800984a:	d10b      	bne.n	8009864 <_free_r+0x74>
 800984c:	6820      	ldr	r0, [r4, #0]
 800984e:	4401      	add	r1, r0
 8009850:	1858      	adds	r0, r3, r1
 8009852:	4282      	cmp	r2, r0
 8009854:	6019      	str	r1, [r3, #0]
 8009856:	d1dd      	bne.n	8009814 <_free_r+0x24>
 8009858:	6810      	ldr	r0, [r2, #0]
 800985a:	6852      	ldr	r2, [r2, #4]
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	4401      	add	r1, r0
 8009860:	6019      	str	r1, [r3, #0]
 8009862:	e7d7      	b.n	8009814 <_free_r+0x24>
 8009864:	d902      	bls.n	800986c <_free_r+0x7c>
 8009866:	230c      	movs	r3, #12
 8009868:	602b      	str	r3, [r5, #0]
 800986a:	e7d3      	b.n	8009814 <_free_r+0x24>
 800986c:	6820      	ldr	r0, [r4, #0]
 800986e:	1821      	adds	r1, r4, r0
 8009870:	428a      	cmp	r2, r1
 8009872:	bf04      	itt	eq
 8009874:	6811      	ldreq	r1, [r2, #0]
 8009876:	6852      	ldreq	r2, [r2, #4]
 8009878:	6062      	str	r2, [r4, #4]
 800987a:	bf04      	itt	eq
 800987c:	1809      	addeq	r1, r1, r0
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	605c      	str	r4, [r3, #4]
 8009882:	e7c7      	b.n	8009814 <_free_r+0x24>
 8009884:	bd38      	pop	{r3, r4, r5, pc}
 8009886:	bf00      	nop
 8009888:	2000026c 	.word	0x2000026c

0800988c <_malloc_r>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	1ccd      	adds	r5, r1, #3
 8009890:	f025 0503 	bic.w	r5, r5, #3
 8009894:	3508      	adds	r5, #8
 8009896:	2d0c      	cmp	r5, #12
 8009898:	bf38      	it	cc
 800989a:	250c      	movcc	r5, #12
 800989c:	2d00      	cmp	r5, #0
 800989e:	4606      	mov	r6, r0
 80098a0:	db01      	blt.n	80098a6 <_malloc_r+0x1a>
 80098a2:	42a9      	cmp	r1, r5
 80098a4:	d903      	bls.n	80098ae <_malloc_r+0x22>
 80098a6:	230c      	movs	r3, #12
 80098a8:	6033      	str	r3, [r6, #0]
 80098aa:	2000      	movs	r0, #0
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
 80098ae:	f000 f9e1 	bl	8009c74 <__malloc_lock>
 80098b2:	4a21      	ldr	r2, [pc, #132]	; (8009938 <_malloc_r+0xac>)
 80098b4:	6814      	ldr	r4, [r2, #0]
 80098b6:	4621      	mov	r1, r4
 80098b8:	b991      	cbnz	r1, 80098e0 <_malloc_r+0x54>
 80098ba:	4c20      	ldr	r4, [pc, #128]	; (800993c <_malloc_r+0xb0>)
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	b91b      	cbnz	r3, 80098c8 <_malloc_r+0x3c>
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 f98f 	bl	8009be4 <_sbrk_r>
 80098c6:	6020      	str	r0, [r4, #0]
 80098c8:	4629      	mov	r1, r5
 80098ca:	4630      	mov	r0, r6
 80098cc:	f000 f98a 	bl	8009be4 <_sbrk_r>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d124      	bne.n	800991e <_malloc_r+0x92>
 80098d4:	230c      	movs	r3, #12
 80098d6:	6033      	str	r3, [r6, #0]
 80098d8:	4630      	mov	r0, r6
 80098da:	f000 f9cc 	bl	8009c76 <__malloc_unlock>
 80098de:	e7e4      	b.n	80098aa <_malloc_r+0x1e>
 80098e0:	680b      	ldr	r3, [r1, #0]
 80098e2:	1b5b      	subs	r3, r3, r5
 80098e4:	d418      	bmi.n	8009918 <_malloc_r+0x8c>
 80098e6:	2b0b      	cmp	r3, #11
 80098e8:	d90f      	bls.n	800990a <_malloc_r+0x7e>
 80098ea:	600b      	str	r3, [r1, #0]
 80098ec:	50cd      	str	r5, [r1, r3]
 80098ee:	18cc      	adds	r4, r1, r3
 80098f0:	4630      	mov	r0, r6
 80098f2:	f000 f9c0 	bl	8009c76 <__malloc_unlock>
 80098f6:	f104 000b 	add.w	r0, r4, #11
 80098fa:	1d23      	adds	r3, r4, #4
 80098fc:	f020 0007 	bic.w	r0, r0, #7
 8009900:	1ac3      	subs	r3, r0, r3
 8009902:	d0d3      	beq.n	80098ac <_malloc_r+0x20>
 8009904:	425a      	negs	r2, r3
 8009906:	50e2      	str	r2, [r4, r3]
 8009908:	e7d0      	b.n	80098ac <_malloc_r+0x20>
 800990a:	428c      	cmp	r4, r1
 800990c:	684b      	ldr	r3, [r1, #4]
 800990e:	bf16      	itet	ne
 8009910:	6063      	strne	r3, [r4, #4]
 8009912:	6013      	streq	r3, [r2, #0]
 8009914:	460c      	movne	r4, r1
 8009916:	e7eb      	b.n	80098f0 <_malloc_r+0x64>
 8009918:	460c      	mov	r4, r1
 800991a:	6849      	ldr	r1, [r1, #4]
 800991c:	e7cc      	b.n	80098b8 <_malloc_r+0x2c>
 800991e:	1cc4      	adds	r4, r0, #3
 8009920:	f024 0403 	bic.w	r4, r4, #3
 8009924:	42a0      	cmp	r0, r4
 8009926:	d005      	beq.n	8009934 <_malloc_r+0xa8>
 8009928:	1a21      	subs	r1, r4, r0
 800992a:	4630      	mov	r0, r6
 800992c:	f000 f95a 	bl	8009be4 <_sbrk_r>
 8009930:	3001      	adds	r0, #1
 8009932:	d0cf      	beq.n	80098d4 <_malloc_r+0x48>
 8009934:	6025      	str	r5, [r4, #0]
 8009936:	e7db      	b.n	80098f0 <_malloc_r+0x64>
 8009938:	2000026c 	.word	0x2000026c
 800993c:	20000270 	.word	0x20000270

08009940 <__ssputs_r>:
 8009940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009944:	688e      	ldr	r6, [r1, #8]
 8009946:	429e      	cmp	r6, r3
 8009948:	4682      	mov	sl, r0
 800994a:	460c      	mov	r4, r1
 800994c:	4690      	mov	r8, r2
 800994e:	4699      	mov	r9, r3
 8009950:	d837      	bhi.n	80099c2 <__ssputs_r+0x82>
 8009952:	898a      	ldrh	r2, [r1, #12]
 8009954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009958:	d031      	beq.n	80099be <__ssputs_r+0x7e>
 800995a:	6825      	ldr	r5, [r4, #0]
 800995c:	6909      	ldr	r1, [r1, #16]
 800995e:	1a6f      	subs	r7, r5, r1
 8009960:	6965      	ldr	r5, [r4, #20]
 8009962:	2302      	movs	r3, #2
 8009964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009968:	fb95 f5f3 	sdiv	r5, r5, r3
 800996c:	f109 0301 	add.w	r3, r9, #1
 8009970:	443b      	add	r3, r7
 8009972:	429d      	cmp	r5, r3
 8009974:	bf38      	it	cc
 8009976:	461d      	movcc	r5, r3
 8009978:	0553      	lsls	r3, r2, #21
 800997a:	d530      	bpl.n	80099de <__ssputs_r+0x9e>
 800997c:	4629      	mov	r1, r5
 800997e:	f7ff ff85 	bl	800988c <_malloc_r>
 8009982:	4606      	mov	r6, r0
 8009984:	b950      	cbnz	r0, 800999c <__ssputs_r+0x5c>
 8009986:	230c      	movs	r3, #12
 8009988:	f8ca 3000 	str.w	r3, [sl]
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999c:	463a      	mov	r2, r7
 800999e:	6921      	ldr	r1, [r4, #16]
 80099a0:	f7ff fb0e 	bl	8008fc0 <memcpy>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ae:	81a3      	strh	r3, [r4, #12]
 80099b0:	6126      	str	r6, [r4, #16]
 80099b2:	6165      	str	r5, [r4, #20]
 80099b4:	443e      	add	r6, r7
 80099b6:	1bed      	subs	r5, r5, r7
 80099b8:	6026      	str	r6, [r4, #0]
 80099ba:	60a5      	str	r5, [r4, #8]
 80099bc:	464e      	mov	r6, r9
 80099be:	454e      	cmp	r6, r9
 80099c0:	d900      	bls.n	80099c4 <__ssputs_r+0x84>
 80099c2:	464e      	mov	r6, r9
 80099c4:	4632      	mov	r2, r6
 80099c6:	4641      	mov	r1, r8
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	f000 f93a 	bl	8009c42 <memmove>
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	1b9b      	subs	r3, r3, r6
 80099d2:	60a3      	str	r3, [r4, #8]
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	441e      	add	r6, r3
 80099d8:	6026      	str	r6, [r4, #0]
 80099da:	2000      	movs	r0, #0
 80099dc:	e7dc      	b.n	8009998 <__ssputs_r+0x58>
 80099de:	462a      	mov	r2, r5
 80099e0:	f000 f94a 	bl	8009c78 <_realloc_r>
 80099e4:	4606      	mov	r6, r0
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d1e2      	bne.n	80099b0 <__ssputs_r+0x70>
 80099ea:	6921      	ldr	r1, [r4, #16]
 80099ec:	4650      	mov	r0, sl
 80099ee:	f7ff feff 	bl	80097f0 <_free_r>
 80099f2:	e7c8      	b.n	8009986 <__ssputs_r+0x46>

080099f4 <_svfiprintf_r>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	461d      	mov	r5, r3
 80099fa:	898b      	ldrh	r3, [r1, #12]
 80099fc:	061f      	lsls	r7, r3, #24
 80099fe:	b09d      	sub	sp, #116	; 0x74
 8009a00:	4680      	mov	r8, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	4616      	mov	r6, r2
 8009a06:	d50f      	bpl.n	8009a28 <_svfiprintf_r+0x34>
 8009a08:	690b      	ldr	r3, [r1, #16]
 8009a0a:	b96b      	cbnz	r3, 8009a28 <_svfiprintf_r+0x34>
 8009a0c:	2140      	movs	r1, #64	; 0x40
 8009a0e:	f7ff ff3d 	bl	800988c <_malloc_r>
 8009a12:	6020      	str	r0, [r4, #0]
 8009a14:	6120      	str	r0, [r4, #16]
 8009a16:	b928      	cbnz	r0, 8009a24 <_svfiprintf_r+0x30>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	f8c8 3000 	str.w	r3, [r8]
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a22:	e0c8      	b.n	8009bb6 <_svfiprintf_r+0x1c2>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	6163      	str	r3, [r4, #20]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2c:	2320      	movs	r3, #32
 8009a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a32:	2330      	movs	r3, #48	; 0x30
 8009a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a38:	9503      	str	r5, [sp, #12]
 8009a3a:	f04f 0b01 	mov.w	fp, #1
 8009a3e:	4637      	mov	r7, r6
 8009a40:	463d      	mov	r5, r7
 8009a42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a46:	b10b      	cbz	r3, 8009a4c <_svfiprintf_r+0x58>
 8009a48:	2b25      	cmp	r3, #37	; 0x25
 8009a4a:	d13e      	bne.n	8009aca <_svfiprintf_r+0xd6>
 8009a4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a50:	d00b      	beq.n	8009a6a <_svfiprintf_r+0x76>
 8009a52:	4653      	mov	r3, sl
 8009a54:	4632      	mov	r2, r6
 8009a56:	4621      	mov	r1, r4
 8009a58:	4640      	mov	r0, r8
 8009a5a:	f7ff ff71 	bl	8009940 <__ssputs_r>
 8009a5e:	3001      	adds	r0, #1
 8009a60:	f000 80a4 	beq.w	8009bac <_svfiprintf_r+0x1b8>
 8009a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a66:	4453      	add	r3, sl
 8009a68:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6a:	783b      	ldrb	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 809d 	beq.w	8009bac <_svfiprintf_r+0x1b8>
 8009a72:	2300      	movs	r3, #0
 8009a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	9307      	str	r3, [sp, #28]
 8009a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a84:	931a      	str	r3, [sp, #104]	; 0x68
 8009a86:	462f      	mov	r7, r5
 8009a88:	2205      	movs	r2, #5
 8009a8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009a8e:	4850      	ldr	r0, [pc, #320]	; (8009bd0 <_svfiprintf_r+0x1dc>)
 8009a90:	f7f6 fba6 	bl	80001e0 <memchr>
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	b9d0      	cbnz	r0, 8009ace <_svfiprintf_r+0xda>
 8009a98:	06d9      	lsls	r1, r3, #27
 8009a9a:	bf44      	itt	mi
 8009a9c:	2220      	movmi	r2, #32
 8009a9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009aa2:	071a      	lsls	r2, r3, #28
 8009aa4:	bf44      	itt	mi
 8009aa6:	222b      	movmi	r2, #43	; 0x2b
 8009aa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009aac:	782a      	ldrb	r2, [r5, #0]
 8009aae:	2a2a      	cmp	r2, #42	; 0x2a
 8009ab0:	d015      	beq.n	8009ade <_svfiprintf_r+0xea>
 8009ab2:	9a07      	ldr	r2, [sp, #28]
 8009ab4:	462f      	mov	r7, r5
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	250a      	movs	r5, #10
 8009aba:	4639      	mov	r1, r7
 8009abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ac0:	3b30      	subs	r3, #48	; 0x30
 8009ac2:	2b09      	cmp	r3, #9
 8009ac4:	d94d      	bls.n	8009b62 <_svfiprintf_r+0x16e>
 8009ac6:	b1b8      	cbz	r0, 8009af8 <_svfiprintf_r+0x104>
 8009ac8:	e00f      	b.n	8009aea <_svfiprintf_r+0xf6>
 8009aca:	462f      	mov	r7, r5
 8009acc:	e7b8      	b.n	8009a40 <_svfiprintf_r+0x4c>
 8009ace:	4a40      	ldr	r2, [pc, #256]	; (8009bd0 <_svfiprintf_r+0x1dc>)
 8009ad0:	1a80      	subs	r0, r0, r2
 8009ad2:	fa0b f000 	lsl.w	r0, fp, r0
 8009ad6:	4318      	orrs	r0, r3
 8009ad8:	9004      	str	r0, [sp, #16]
 8009ada:	463d      	mov	r5, r7
 8009adc:	e7d3      	b.n	8009a86 <_svfiprintf_r+0x92>
 8009ade:	9a03      	ldr	r2, [sp, #12]
 8009ae0:	1d11      	adds	r1, r2, #4
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	9103      	str	r1, [sp, #12]
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	db01      	blt.n	8009aee <_svfiprintf_r+0xfa>
 8009aea:	9207      	str	r2, [sp, #28]
 8009aec:	e004      	b.n	8009af8 <_svfiprintf_r+0x104>
 8009aee:	4252      	negs	r2, r2
 8009af0:	f043 0302 	orr.w	r3, r3, #2
 8009af4:	9207      	str	r2, [sp, #28]
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	783b      	ldrb	r3, [r7, #0]
 8009afa:	2b2e      	cmp	r3, #46	; 0x2e
 8009afc:	d10c      	bne.n	8009b18 <_svfiprintf_r+0x124>
 8009afe:	787b      	ldrb	r3, [r7, #1]
 8009b00:	2b2a      	cmp	r3, #42	; 0x2a
 8009b02:	d133      	bne.n	8009b6c <_svfiprintf_r+0x178>
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	1d1a      	adds	r2, r3, #4
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	9203      	str	r2, [sp, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	bfb8      	it	lt
 8009b10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b14:	3702      	adds	r7, #2
 8009b16:	9305      	str	r3, [sp, #20]
 8009b18:	4d2e      	ldr	r5, [pc, #184]	; (8009bd4 <_svfiprintf_r+0x1e0>)
 8009b1a:	7839      	ldrb	r1, [r7, #0]
 8009b1c:	2203      	movs	r2, #3
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f7f6 fb5e 	bl	80001e0 <memchr>
 8009b24:	b138      	cbz	r0, 8009b36 <_svfiprintf_r+0x142>
 8009b26:	2340      	movs	r3, #64	; 0x40
 8009b28:	1b40      	subs	r0, r0, r5
 8009b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	4303      	orrs	r3, r0
 8009b32:	3701      	adds	r7, #1
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	7839      	ldrb	r1, [r7, #0]
 8009b38:	4827      	ldr	r0, [pc, #156]	; (8009bd8 <_svfiprintf_r+0x1e4>)
 8009b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b3e:	2206      	movs	r2, #6
 8009b40:	1c7e      	adds	r6, r7, #1
 8009b42:	f7f6 fb4d 	bl	80001e0 <memchr>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d038      	beq.n	8009bbc <_svfiprintf_r+0x1c8>
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <_svfiprintf_r+0x1e8>)
 8009b4c:	bb13      	cbnz	r3, 8009b94 <_svfiprintf_r+0x1a0>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	3307      	adds	r3, #7
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	3308      	adds	r3, #8
 8009b58:	9303      	str	r3, [sp, #12]
 8009b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5c:	444b      	add	r3, r9
 8009b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b60:	e76d      	b.n	8009a3e <_svfiprintf_r+0x4a>
 8009b62:	fb05 3202 	mla	r2, r5, r2, r3
 8009b66:	2001      	movs	r0, #1
 8009b68:	460f      	mov	r7, r1
 8009b6a:	e7a6      	b.n	8009aba <_svfiprintf_r+0xc6>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	3701      	adds	r7, #1
 8009b70:	9305      	str	r3, [sp, #20]
 8009b72:	4619      	mov	r1, r3
 8009b74:	250a      	movs	r5, #10
 8009b76:	4638      	mov	r0, r7
 8009b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7c:	3a30      	subs	r2, #48	; 0x30
 8009b7e:	2a09      	cmp	r2, #9
 8009b80:	d903      	bls.n	8009b8a <_svfiprintf_r+0x196>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0c8      	beq.n	8009b18 <_svfiprintf_r+0x124>
 8009b86:	9105      	str	r1, [sp, #20]
 8009b88:	e7c6      	b.n	8009b18 <_svfiprintf_r+0x124>
 8009b8a:	fb05 2101 	mla	r1, r5, r1, r2
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4607      	mov	r7, r0
 8009b92:	e7f0      	b.n	8009b76 <_svfiprintf_r+0x182>
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	4622      	mov	r2, r4
 8009b9a:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <_svfiprintf_r+0x1ec>)
 8009b9c:	a904      	add	r1, sp, #16
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	f7fc fbba 	bl	8006318 <_printf_float>
 8009ba4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009ba8:	4681      	mov	r9, r0
 8009baa:	d1d6      	bne.n	8009b5a <_svfiprintf_r+0x166>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	065b      	lsls	r3, r3, #25
 8009bb0:	f53f af35 	bmi.w	8009a1e <_svfiprintf_r+0x2a>
 8009bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb6:	b01d      	add	sp, #116	; 0x74
 8009bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbc:	ab03      	add	r3, sp, #12
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <_svfiprintf_r+0x1ec>)
 8009bc4:	a904      	add	r1, sp, #16
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	f7fc fe5c 	bl	8006884 <_printf_i>
 8009bcc:	e7ea      	b.n	8009ba4 <_svfiprintf_r+0x1b0>
 8009bce:	bf00      	nop
 8009bd0:	0800a9d4 	.word	0x0800a9d4
 8009bd4:	0800a9da 	.word	0x0800a9da
 8009bd8:	0800a9de 	.word	0x0800a9de
 8009bdc:	08006319 	.word	0x08006319
 8009be0:	08009941 	.word	0x08009941

08009be4 <_sbrk_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4c06      	ldr	r4, [pc, #24]	; (8009c00 <_sbrk_r+0x1c>)
 8009be8:	2300      	movs	r3, #0
 8009bea:	4605      	mov	r5, r0
 8009bec:	4608      	mov	r0, r1
 8009bee:	6023      	str	r3, [r4, #0]
 8009bf0:	f7f9 fa24 	bl	800303c <_sbrk>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_sbrk_r+0x1a>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_sbrk_r+0x1a>
 8009bfc:	602b      	str	r3, [r5, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	2000048c 	.word	0x2000048c

08009c04 <strncmp>:
 8009c04:	b510      	push	{r4, lr}
 8009c06:	b16a      	cbz	r2, 8009c24 <strncmp+0x20>
 8009c08:	3901      	subs	r1, #1
 8009c0a:	1884      	adds	r4, r0, r2
 8009c0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009c10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d103      	bne.n	8009c20 <strncmp+0x1c>
 8009c18:	42a0      	cmp	r0, r4
 8009c1a:	d001      	beq.n	8009c20 <strncmp+0x1c>
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1f5      	bne.n	8009c0c <strncmp+0x8>
 8009c20:	1a98      	subs	r0, r3, r2
 8009c22:	bd10      	pop	{r4, pc}
 8009c24:	4610      	mov	r0, r2
 8009c26:	e7fc      	b.n	8009c22 <strncmp+0x1e>

08009c28 <__ascii_wctomb>:
 8009c28:	b149      	cbz	r1, 8009c3e <__ascii_wctomb+0x16>
 8009c2a:	2aff      	cmp	r2, #255	; 0xff
 8009c2c:	bf85      	ittet	hi
 8009c2e:	238a      	movhi	r3, #138	; 0x8a
 8009c30:	6003      	strhi	r3, [r0, #0]
 8009c32:	700a      	strbls	r2, [r1, #0]
 8009c34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009c38:	bf98      	it	ls
 8009c3a:	2001      	movls	r0, #1
 8009c3c:	4770      	bx	lr
 8009c3e:	4608      	mov	r0, r1
 8009c40:	4770      	bx	lr

08009c42 <memmove>:
 8009c42:	4288      	cmp	r0, r1
 8009c44:	b510      	push	{r4, lr}
 8009c46:	eb01 0302 	add.w	r3, r1, r2
 8009c4a:	d807      	bhi.n	8009c5c <memmove+0x1a>
 8009c4c:	1e42      	subs	r2, r0, #1
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	d00a      	beq.n	8009c68 <memmove+0x26>
 8009c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c5a:	e7f8      	b.n	8009c4e <memmove+0xc>
 8009c5c:	4283      	cmp	r3, r0
 8009c5e:	d9f5      	bls.n	8009c4c <memmove+0xa>
 8009c60:	1881      	adds	r1, r0, r2
 8009c62:	1ad2      	subs	r2, r2, r3
 8009c64:	42d3      	cmn	r3, r2
 8009c66:	d100      	bne.n	8009c6a <memmove+0x28>
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c6e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c72:	e7f7      	b.n	8009c64 <memmove+0x22>

08009c74 <__malloc_lock>:
 8009c74:	4770      	bx	lr

08009c76 <__malloc_unlock>:
 8009c76:	4770      	bx	lr

08009c78 <_realloc_r>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	460e      	mov	r6, r1
 8009c80:	b921      	cbnz	r1, 8009c8c <_realloc_r+0x14>
 8009c82:	4611      	mov	r1, r2
 8009c84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c88:	f7ff be00 	b.w	800988c <_malloc_r>
 8009c8c:	b922      	cbnz	r2, 8009c98 <_realloc_r+0x20>
 8009c8e:	f7ff fdaf 	bl	80097f0 <_free_r>
 8009c92:	4625      	mov	r5, r4
 8009c94:	4628      	mov	r0, r5
 8009c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c98:	f000 f814 	bl	8009cc4 <_malloc_usable_size_r>
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d20f      	bcs.n	8009cc0 <_realloc_r+0x48>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	f7ff fdf2 	bl	800988c <_malloc_r>
 8009ca8:	4605      	mov	r5, r0
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d0f2      	beq.n	8009c94 <_realloc_r+0x1c>
 8009cae:	4631      	mov	r1, r6
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	f7ff f985 	bl	8008fc0 <memcpy>
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7ff fd99 	bl	80097f0 <_free_r>
 8009cbe:	e7e9      	b.n	8009c94 <_realloc_r+0x1c>
 8009cc0:	4635      	mov	r5, r6
 8009cc2:	e7e7      	b.n	8009c94 <_realloc_r+0x1c>

08009cc4 <_malloc_usable_size_r>:
 8009cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc8:	1f18      	subs	r0, r3, #4
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bfbc      	itt	lt
 8009cce:	580b      	ldrlt	r3, [r1, r0]
 8009cd0:	18c0      	addlt	r0, r0, r3
 8009cd2:	4770      	bx	lr

08009cd4 <powf>:
 8009cd4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8009cd8:	ed2d 8b04 	vpush	{d8-d9}
 8009cdc:	4ca7      	ldr	r4, [pc, #668]	; (8009f7c <powf+0x2a8>)
 8009cde:	b08a      	sub	sp, #40	; 0x28
 8009ce0:	eef0 8a40 	vmov.f32	s17, s0
 8009ce4:	eeb0 8a60 	vmov.f32	s16, s1
 8009ce8:	f000 f958 	bl	8009f9c <__ieee754_powf>
 8009cec:	f994 5000 	ldrsb.w	r5, [r4]
 8009cf0:	1c6b      	adds	r3, r5, #1
 8009cf2:	eeb0 9a40 	vmov.f32	s18, s0
 8009cf6:	4626      	mov	r6, r4
 8009cf8:	d05f      	beq.n	8009dba <powf+0xe6>
 8009cfa:	eeb4 8a48 	vcmp.f32	s16, s16
 8009cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d02:	d65a      	bvs.n	8009dba <powf+0xe6>
 8009d04:	eef4 8a68 	vcmp.f32	s17, s17
 8009d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0c:	d721      	bvc.n	8009d52 <powf+0x7e>
 8009d0e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d16:	d150      	bne.n	8009dba <powf+0xe6>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	4b98      	ldr	r3, [pc, #608]	; (8009f80 <powf+0x2ac>)
 8009d1e:	9301      	str	r3, [sp, #4]
 8009d20:	ee18 0a90 	vmov	r0, s17
 8009d24:	2300      	movs	r3, #0
 8009d26:	9308      	str	r3, [sp, #32]
 8009d28:	f7f6 fc0e 	bl	8000548 <__aeabi_f2d>
 8009d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d30:	ee18 0a10 	vmov	r0, s16
 8009d34:	f7f6 fc08 	bl	8000548 <__aeabi_f2d>
 8009d38:	4b92      	ldr	r3, [pc, #584]	; (8009f84 <powf+0x2b0>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2d02      	cmp	r5, #2
 8009d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d46:	d032      	beq.n	8009dae <powf+0xda>
 8009d48:	4668      	mov	r0, sp
 8009d4a:	f000 fbea 	bl	800a522 <matherr>
 8009d4e:	bb40      	cbnz	r0, 8009da2 <powf+0xce>
 8009d50:	e065      	b.n	8009e1e <powf+0x14a>
 8009d52:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8009f88 <powf+0x2b4>
 8009d56:	eef4 8a69 	vcmp.f32	s17, s19
 8009d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5e:	d163      	bne.n	8009e28 <powf+0x154>
 8009d60:	eeb4 8a69 	vcmp.f32	s16, s19
 8009d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d68:	d12e      	bne.n	8009dc8 <powf+0xf4>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	4b84      	ldr	r3, [pc, #528]	; (8009f80 <powf+0x2ac>)
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	ee18 0a90 	vmov	r0, s17
 8009d76:	2300      	movs	r3, #0
 8009d78:	9308      	str	r3, [sp, #32]
 8009d7a:	f7f6 fbe5 	bl	8000548 <__aeabi_f2d>
 8009d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d82:	ee18 0a10 	vmov	r0, s16
 8009d86:	f7f6 fbdf 	bl	8000548 <__aeabi_f2d>
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	d0d6      	beq.n	8009d48 <powf+0x74>
 8009d9a:	4b7a      	ldr	r3, [pc, #488]	; (8009f84 <powf+0x2b0>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009da2:	9b08      	ldr	r3, [sp, #32]
 8009da4:	b11b      	cbz	r3, 8009dae <powf+0xda>
 8009da6:	f7fc f9d7 	bl	8006158 <__errno>
 8009daa:	9b08      	ldr	r3, [sp, #32]
 8009dac:	6003      	str	r3, [r0, #0]
 8009dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009db2:	f7f6 ff19 	bl	8000be8 <__aeabi_d2f>
 8009db6:	ee09 0a10 	vmov	s18, r0
 8009dba:	eeb0 0a49 	vmov.f32	s0, s18
 8009dbe:	b00a      	add	sp, #40	; 0x28
 8009dc0:	ecbd 8b04 	vpop	{d8-d9}
 8009dc4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8009dcc:	f000 fbb2 	bl	800a534 <finitef>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d0f2      	beq.n	8009dba <powf+0xe6>
 8009dd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ddc:	d5ed      	bpl.n	8009dba <powf+0xe6>
 8009dde:	2301      	movs	r3, #1
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	4b67      	ldr	r3, [pc, #412]	; (8009f80 <powf+0x2ac>)
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	ee18 0a90 	vmov	r0, s17
 8009dea:	2300      	movs	r3, #0
 8009dec:	9308      	str	r3, [sp, #32]
 8009dee:	f7f6 fbab 	bl	8000548 <__aeabi_f2d>
 8009df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df6:	ee18 0a10 	vmov	r0, s16
 8009dfa:	f7f6 fba5 	bl	8000548 <__aeabi_f2d>
 8009dfe:	f994 3000 	ldrsb.w	r3, [r4]
 8009e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e06:	b923      	cbnz	r3, 8009e12 <powf+0x13e>
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e10:	e79a      	b.n	8009d48 <powf+0x74>
 8009e12:	495e      	ldr	r1, [pc, #376]	; (8009f8c <powf+0x2b8>)
 8009e14:	2000      	movs	r0, #0
 8009e16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d194      	bne.n	8009d48 <powf+0x74>
 8009e1e:	f7fc f99b 	bl	8006158 <__errno>
 8009e22:	2321      	movs	r3, #33	; 0x21
 8009e24:	6003      	str	r3, [r0, #0]
 8009e26:	e7bc      	b.n	8009da2 <powf+0xce>
 8009e28:	f000 fb84 	bl	800a534 <finitef>
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d173      	bne.n	8009f1a <powf+0x246>
 8009e32:	eeb0 0a68 	vmov.f32	s0, s17
 8009e36:	f000 fb7d 	bl	800a534 <finitef>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d06d      	beq.n	8009f1a <powf+0x246>
 8009e3e:	eeb0 0a48 	vmov.f32	s0, s16
 8009e42:	f000 fb77 	bl	800a534 <finitef>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d067      	beq.n	8009f1a <powf+0x246>
 8009e4a:	ee18 0a90 	vmov	r0, s17
 8009e4e:	f7f6 fb7b 	bl	8000548 <__aeabi_f2d>
 8009e52:	4680      	mov	r8, r0
 8009e54:	ee18 0a10 	vmov	r0, s16
 8009e58:	4689      	mov	r9, r1
 8009e5a:	f7f6 fb75 	bl	8000548 <__aeabi_f2d>
 8009e5e:	eeb4 9a49 	vcmp.f32	s18, s18
 8009e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e66:	f994 4000 	ldrsb.w	r4, [r4]
 8009e6a:	4b45      	ldr	r3, [pc, #276]	; (8009f80 <powf+0x2ac>)
 8009e6c:	d713      	bvc.n	8009e96 <powf+0x1c2>
 8009e6e:	2201      	movs	r2, #1
 8009e70:	e9cd 2300 	strd	r2, r3, [sp]
 8009e74:	9508      	str	r5, [sp, #32]
 8009e76:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009e7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	d0c2      	beq.n	8009e08 <powf+0x134>
 8009e82:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8009e86:	ee17 0a90 	vmov	r0, s15
 8009e8a:	f7f6 fb5d 	bl	8000548 <__aeabi_f2d>
 8009e8e:	2c02      	cmp	r4, #2
 8009e90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e94:	e7c2      	b.n	8009e1c <powf+0x148>
 8009e96:	2203      	movs	r2, #3
 8009e98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8009ea0:	9508      	str	r5, [sp, #32]
 8009ea2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eaa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009eae:	b9fc      	cbnz	r4, 8009ef0 <powf+0x21c>
 8009eb0:	4b37      	ldr	r3, [pc, #220]	; (8009f90 <powf+0x2bc>)
 8009eb2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009eb6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ec2:	d553      	bpl.n	8009f6c <powf+0x298>
 8009ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ec8:	f000 fb3e 	bl	800a548 <rintf>
 8009ecc:	eeb4 0a48 	vcmp.f32	s0, s16
 8009ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed4:	d004      	beq.n	8009ee0 <powf+0x20c>
 8009ed6:	4b2f      	ldr	r3, [pc, #188]	; (8009f94 <powf+0x2c0>)
 8009ed8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009edc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ee0:	f996 3000 	ldrsb.w	r3, [r6]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d141      	bne.n	8009f6c <powf+0x298>
 8009ee8:	f7fc f936 	bl	8006158 <__errno>
 8009eec:	2322      	movs	r3, #34	; 0x22
 8009eee:	e799      	b.n	8009e24 <powf+0x150>
 8009ef0:	4b29      	ldr	r3, [pc, #164]	; (8009f98 <powf+0x2c4>)
 8009ef2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f00:	d5ee      	bpl.n	8009ee0 <powf+0x20c>
 8009f02:	eeb0 0a48 	vmov.f32	s0, s16
 8009f06:	f000 fb1f 	bl	800a548 <rintf>
 8009f0a:	eeb4 0a48 	vcmp.f32	s0, s16
 8009f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f12:	d0e5      	beq.n	8009ee0 <powf+0x20c>
 8009f14:	2200      	movs	r2, #0
 8009f16:	4b1d      	ldr	r3, [pc, #116]	; (8009f8c <powf+0x2b8>)
 8009f18:	e7e0      	b.n	8009edc <powf+0x208>
 8009f1a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f22:	f47f af4a 	bne.w	8009dba <powf+0xe6>
 8009f26:	eeb0 0a68 	vmov.f32	s0, s17
 8009f2a:	f000 fb03 	bl	800a534 <finitef>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f43f af43 	beq.w	8009dba <powf+0xe6>
 8009f34:	eeb0 0a48 	vmov.f32	s0, s16
 8009f38:	f000 fafc 	bl	800a534 <finitef>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f43f af3c 	beq.w	8009dba <powf+0xe6>
 8009f42:	2304      	movs	r3, #4
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <powf+0x2ac>)
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	ee18 0a90 	vmov	r0, s17
 8009f4e:	2300      	movs	r3, #0
 8009f50:	9308      	str	r3, [sp, #32]
 8009f52:	f7f6 faf9 	bl	8000548 <__aeabi_f2d>
 8009f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f5a:	ee18 0a10 	vmov	r0, s16
 8009f5e:	f7f6 faf3 	bl	8000548 <__aeabi_f2d>
 8009f62:	2200      	movs	r2, #0
 8009f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	e7b7      	b.n	8009edc <powf+0x208>
 8009f6c:	4668      	mov	r0, sp
 8009f6e:	f000 fad8 	bl	800a522 <matherr>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f47f af15 	bne.w	8009da2 <powf+0xce>
 8009f78:	e7b6      	b.n	8009ee8 <powf+0x214>
 8009f7a:	bf00      	nop
 8009f7c:	200001ec 	.word	0x200001ec
 8009f80:	0800aae6 	.word	0x0800aae6
 8009f84:	3ff00000 	.word	0x3ff00000
 8009f88:	00000000 	.word	0x00000000
 8009f8c:	fff00000 	.word	0xfff00000
 8009f90:	47efffff 	.word	0x47efffff
 8009f94:	c7efffff 	.word	0xc7efffff
 8009f98:	7ff00000 	.word	0x7ff00000

08009f9c <__ieee754_powf>:
 8009f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa0:	ee10 5a90 	vmov	r5, s1
 8009fa4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8009fa8:	ed2d 8b02 	vpush	{d8}
 8009fac:	eeb0 8a40 	vmov.f32	s16, s0
 8009fb0:	eef0 8a60 	vmov.f32	s17, s1
 8009fb4:	f000 8293 	beq.w	800a4de <__ieee754_powf+0x542>
 8009fb8:	ee10 8a10 	vmov	r8, s0
 8009fbc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8009fc0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009fc4:	dc06      	bgt.n	8009fd4 <__ieee754_powf+0x38>
 8009fc6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8009fca:	dd0a      	ble.n	8009fe2 <__ieee754_powf+0x46>
 8009fcc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009fd0:	f000 8285 	beq.w	800a4de <__ieee754_powf+0x542>
 8009fd4:	ecbd 8b02 	vpop	{d8}
 8009fd8:	48d9      	ldr	r0, [pc, #868]	; (800a340 <__ieee754_powf+0x3a4>)
 8009fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fde:	f7fc bf45 	b.w	8006e6c <nanf>
 8009fe2:	f1b8 0f00 	cmp.w	r8, #0
 8009fe6:	da1d      	bge.n	800a024 <__ieee754_powf+0x88>
 8009fe8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8009fec:	da2c      	bge.n	800a048 <__ieee754_powf+0xac>
 8009fee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009ff2:	db30      	blt.n	800a056 <__ieee754_powf+0xba>
 8009ff4:	15fb      	asrs	r3, r7, #23
 8009ff6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009ffa:	fa47 f603 	asr.w	r6, r7, r3
 8009ffe:	fa06 f303 	lsl.w	r3, r6, r3
 800a002:	42bb      	cmp	r3, r7
 800a004:	d127      	bne.n	800a056 <__ieee754_powf+0xba>
 800a006:	f006 0601 	and.w	r6, r6, #1
 800a00a:	f1c6 0602 	rsb	r6, r6, #2
 800a00e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a012:	d122      	bne.n	800a05a <__ieee754_powf+0xbe>
 800a014:	2d00      	cmp	r5, #0
 800a016:	f280 8268 	bge.w	800a4ea <__ieee754_powf+0x54e>
 800a01a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a01e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a022:	e00d      	b.n	800a040 <__ieee754_powf+0xa4>
 800a024:	2600      	movs	r6, #0
 800a026:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a02a:	d1f0      	bne.n	800a00e <__ieee754_powf+0x72>
 800a02c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a030:	f000 8255 	beq.w	800a4de <__ieee754_powf+0x542>
 800a034:	dd0a      	ble.n	800a04c <__ieee754_powf+0xb0>
 800a036:	2d00      	cmp	r5, #0
 800a038:	f280 8254 	bge.w	800a4e4 <__ieee754_powf+0x548>
 800a03c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800a344 <__ieee754_powf+0x3a8>
 800a040:	ecbd 8b02 	vpop	{d8}
 800a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a048:	2602      	movs	r6, #2
 800a04a:	e7ec      	b.n	800a026 <__ieee754_powf+0x8a>
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	daf5      	bge.n	800a03c <__ieee754_powf+0xa0>
 800a050:	eeb1 0a68 	vneg.f32	s0, s17
 800a054:	e7f4      	b.n	800a040 <__ieee754_powf+0xa4>
 800a056:	2600      	movs	r6, #0
 800a058:	e7d9      	b.n	800a00e <__ieee754_powf+0x72>
 800a05a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800a05e:	d102      	bne.n	800a066 <__ieee754_powf+0xca>
 800a060:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a064:	e7ec      	b.n	800a040 <__ieee754_powf+0xa4>
 800a066:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800a06a:	eeb0 0a48 	vmov.f32	s0, s16
 800a06e:	d108      	bne.n	800a082 <__ieee754_powf+0xe6>
 800a070:	f1b8 0f00 	cmp.w	r8, #0
 800a074:	db05      	blt.n	800a082 <__ieee754_powf+0xe6>
 800a076:	ecbd 8b02 	vpop	{d8}
 800a07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07e:	f000 ba4d 	b.w	800a51c <__ieee754_sqrtf>
 800a082:	f000 fa50 	bl	800a526 <fabsf>
 800a086:	b124      	cbz	r4, 800a092 <__ieee754_powf+0xf6>
 800a088:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a08c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a090:	d117      	bne.n	800a0c2 <__ieee754_powf+0x126>
 800a092:	2d00      	cmp	r5, #0
 800a094:	bfbc      	itt	lt
 800a096:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a09a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a09e:	f1b8 0f00 	cmp.w	r8, #0
 800a0a2:	dacd      	bge.n	800a040 <__ieee754_powf+0xa4>
 800a0a4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800a0a8:	ea54 0306 	orrs.w	r3, r4, r6
 800a0ac:	d104      	bne.n	800a0b8 <__ieee754_powf+0x11c>
 800a0ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a0b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a0b6:	e7c3      	b.n	800a040 <__ieee754_powf+0xa4>
 800a0b8:	2e01      	cmp	r6, #1
 800a0ba:	d1c1      	bne.n	800a040 <__ieee754_powf+0xa4>
 800a0bc:	eeb1 0a40 	vneg.f32	s0, s0
 800a0c0:	e7be      	b.n	800a040 <__ieee754_powf+0xa4>
 800a0c2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800a0c6:	3801      	subs	r0, #1
 800a0c8:	ea56 0300 	orrs.w	r3, r6, r0
 800a0cc:	d104      	bne.n	800a0d8 <__ieee754_powf+0x13c>
 800a0ce:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a0d2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a0d6:	e7b3      	b.n	800a040 <__ieee754_powf+0xa4>
 800a0d8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800a0dc:	dd6d      	ble.n	800a1ba <__ieee754_powf+0x21e>
 800a0de:	4b9a      	ldr	r3, [pc, #616]	; (800a348 <__ieee754_powf+0x3ac>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	dc06      	bgt.n	800a0f2 <__ieee754_powf+0x156>
 800a0e4:	2d00      	cmp	r5, #0
 800a0e6:	daa9      	bge.n	800a03c <__ieee754_powf+0xa0>
 800a0e8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800a34c <__ieee754_powf+0x3b0>
 800a0ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a0f0:	e7a6      	b.n	800a040 <__ieee754_powf+0xa4>
 800a0f2:	4b97      	ldr	r3, [pc, #604]	; (800a350 <__ieee754_powf+0x3b4>)
 800a0f4:	429c      	cmp	r4, r3
 800a0f6:	dd02      	ble.n	800a0fe <__ieee754_powf+0x162>
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	dcf5      	bgt.n	800a0e8 <__ieee754_powf+0x14c>
 800a0fc:	e79e      	b.n	800a03c <__ieee754_powf+0xa0>
 800a0fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a102:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a106:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800a354 <__ieee754_powf+0x3b8>
 800a10a:	eef1 6a40 	vneg.f32	s13, s0
 800a10e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a112:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a116:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a11a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800a11e:	ee60 0a00 	vmul.f32	s1, s0, s0
 800a122:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800a358 <__ieee754_powf+0x3bc>
 800a126:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800a12a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800a35c <__ieee754_powf+0x3c0>
 800a12e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800a132:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a136:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800a360 <__ieee754_powf+0x3c4>
 800a13a:	eeb0 6a67 	vmov.f32	s12, s15
 800a13e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800a142:	ee16 3a10 	vmov	r3, s12
 800a146:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a14a:	f023 030f 	bic.w	r3, r3, #15
 800a14e:	ee00 3a90 	vmov	s1, r3
 800a152:	eee6 0a87 	vfma.f32	s1, s13, s14
 800a156:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a15a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800a15e:	f025 050f 	bic.w	r5, r5, #15
 800a162:	ee07 5a10 	vmov	s14, r5
 800a166:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a16a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a16e:	ee07 3a90 	vmov	s15, r3
 800a172:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a176:	3e01      	subs	r6, #1
 800a178:	ea56 0200 	orrs.w	r2, r6, r0
 800a17c:	ee07 5a10 	vmov	s14, r5
 800a180:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a184:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a188:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a18c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a190:	ee17 4a10 	vmov	r4, s14
 800a194:	bf08      	it	eq
 800a196:	eeb0 8a40 	vmoveq.f32	s16, s0
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a1a0:	f340 8184 	ble.w	800a4ac <__ieee754_powf+0x510>
 800a1a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a1a8:	f340 80fc 	ble.w	800a3a4 <__ieee754_powf+0x408>
 800a1ac:	eddf 7a67 	vldr	s15, [pc, #412]	; 800a34c <__ieee754_powf+0x3b0>
 800a1b0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800a1b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a1b8:	e742      	b.n	800a040 <__ieee754_powf+0xa4>
 800a1ba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800a1be:	bfbf      	itttt	lt
 800a1c0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800a364 <__ieee754_powf+0x3c8>
 800a1c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a1c8:	f06f 0217 	mvnlt.w	r2, #23
 800a1cc:	ee17 4a90 	vmovlt	r4, s15
 800a1d0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800a1d4:	bfa8      	it	ge
 800a1d6:	2200      	movge	r2, #0
 800a1d8:	3b7f      	subs	r3, #127	; 0x7f
 800a1da:	4413      	add	r3, r2
 800a1dc:	4a62      	ldr	r2, [pc, #392]	; (800a368 <__ieee754_powf+0x3cc>)
 800a1de:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800a1e2:	4294      	cmp	r4, r2
 800a1e4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800a1e8:	dd06      	ble.n	800a1f8 <__ieee754_powf+0x25c>
 800a1ea:	4a60      	ldr	r2, [pc, #384]	; (800a36c <__ieee754_powf+0x3d0>)
 800a1ec:	4294      	cmp	r4, r2
 800a1ee:	f340 80a5 	ble.w	800a33c <__ieee754_powf+0x3a0>
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a1f8:	2400      	movs	r4, #0
 800a1fa:	4a5d      	ldr	r2, [pc, #372]	; (800a370 <__ieee754_powf+0x3d4>)
 800a1fc:	00a7      	lsls	r7, r4, #2
 800a1fe:	443a      	add	r2, r7
 800a200:	ee07 1a90 	vmov	s15, r1
 800a204:	ed92 7a00 	vldr	s14, [r2]
 800a208:	4a5a      	ldr	r2, [pc, #360]	; (800a374 <__ieee754_powf+0x3d8>)
 800a20a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a20e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a212:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a216:	1049      	asrs	r1, r1, #1
 800a218:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a21c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a220:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800a224:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a228:	ee06 1a10 	vmov	s12, r1
 800a22c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800a230:	ee14 ca90 	vmov	ip, s9
 800a234:	ea02 0c0c 	and.w	ip, r2, ip
 800a238:	ee05 ca10 	vmov	s10, ip
 800a23c:	eeb1 4a45 	vneg.f32	s8, s10
 800a240:	eee4 5a06 	vfma.f32	s11, s8, s12
 800a244:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a248:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a378 <__ieee754_powf+0x3dc>
 800a24c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800a250:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800a254:	eee4 5a06 	vfma.f32	s11, s8, s12
 800a258:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800a25c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800a260:	eddf 5a46 	vldr	s11, [pc, #280]	; 800a37c <__ieee754_powf+0x3e0>
 800a264:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a268:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a380 <__ieee754_powf+0x3e4>
 800a26c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a270:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a354 <__ieee754_powf+0x3b8>
 800a274:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a278:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a384 <__ieee754_powf+0x3e8>
 800a27c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a280:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a388 <__ieee754_powf+0x3ec>
 800a284:	ee75 6a24 	vadd.f32	s13, s10, s9
 800a288:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a28c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a290:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800a294:	eef0 7a65 	vmov.f32	s15, s11
 800a298:	eee3 6a87 	vfma.f32	s13, s7, s14
 800a29c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800a2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a4:	ee17 1a90 	vmov	r1, s15
 800a2a8:	4011      	ands	r1, r2
 800a2aa:	ee07 1a90 	vmov	s15, r1
 800a2ae:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800a2b2:	eddf 5a36 	vldr	s11, [pc, #216]	; 800a38c <__ieee754_powf+0x3f0>
 800a2b6:	eea4 7a05 	vfma.f32	s14, s8, s10
 800a2ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a2be:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a2c2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800a2c6:	eeb0 6a47 	vmov.f32	s12, s14
 800a2ca:	eea5 6a27 	vfma.f32	s12, s10, s15
 800a2ce:	ee16 1a10 	vmov	r1, s12
 800a2d2:	4011      	ands	r1, r2
 800a2d4:	ee06 1a90 	vmov	s13, r1
 800a2d8:	eee4 6a27 	vfma.f32	s13, s8, s15
 800a2dc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a390 <__ieee754_powf+0x3f4>
 800a2e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a2e4:	ee06 1a10 	vmov	s12, r1
 800a2e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2ec:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a394 <__ieee754_powf+0x3f8>
 800a2f0:	4929      	ldr	r1, [pc, #164]	; (800a398 <__ieee754_powf+0x3fc>)
 800a2f2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a2f6:	4439      	add	r1, r7
 800a2f8:	edd1 7a00 	vldr	s15, [r1]
 800a2fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef0 0a47 	vmov.f32	s1, s14
 800a308:	4b24      	ldr	r3, [pc, #144]	; (800a39c <__ieee754_powf+0x400>)
 800a30a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800a30e:	443b      	add	r3, r7
 800a310:	ed93 5a00 	vldr	s10, [r3]
 800a314:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a318:	ee70 0a85 	vadd.f32	s1, s1, s10
 800a31c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800a320:	ee17 3a90 	vmov	r3, s15
 800a324:	4013      	ands	r3, r2
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a32e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a332:	eee6 7a65 	vfms.f32	s15, s12, s11
 800a336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a33a:	e70e      	b.n	800a15a <__ieee754_powf+0x1be>
 800a33c:	2401      	movs	r4, #1
 800a33e:	e75c      	b.n	800a1fa <__ieee754_powf+0x25e>
 800a340:	0800a9d9 	.word	0x0800a9d9
 800a344:	00000000 	.word	0x00000000
 800a348:	3f7ffff7 	.word	0x3f7ffff7
 800a34c:	7149f2ca 	.word	0x7149f2ca
 800a350:	3f800007 	.word	0x3f800007
 800a354:	3eaaaaab 	.word	0x3eaaaaab
 800a358:	36eca570 	.word	0x36eca570
 800a35c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a360:	3fb8aa00 	.word	0x3fb8aa00
 800a364:	4b800000 	.word	0x4b800000
 800a368:	001cc471 	.word	0x001cc471
 800a36c:	005db3d6 	.word	0x005db3d6
 800a370:	0800aaec 	.word	0x0800aaec
 800a374:	fffff000 	.word	0xfffff000
 800a378:	3e6c3255 	.word	0x3e6c3255
 800a37c:	3e53f142 	.word	0x3e53f142
 800a380:	3e8ba305 	.word	0x3e8ba305
 800a384:	3edb6db7 	.word	0x3edb6db7
 800a388:	3f19999a 	.word	0x3f19999a
 800a38c:	3f763800 	.word	0x3f763800
 800a390:	3f76384f 	.word	0x3f76384f
 800a394:	369dc3a0 	.word	0x369dc3a0
 800a398:	0800aafc 	.word	0x0800aafc
 800a39c:	0800aaf4 	.word	0x0800aaf4
 800a3a0:	3338aa3c 	.word	0x3338aa3c
 800a3a4:	f040 8092 	bne.w	800a4cc <__ieee754_powf+0x530>
 800a3a8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a3a0 <__ieee754_powf+0x404>
 800a3ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3b0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a3b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3bc:	f73f aef6 	bgt.w	800a1ac <__ieee754_powf+0x210>
 800a3c0:	15db      	asrs	r3, r3, #23
 800a3c2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a3c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a3ca:	4103      	asrs	r3, r0
 800a3cc:	4423      	add	r3, r4
 800a3ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a3d2:	4947      	ldr	r1, [pc, #284]	; (800a4f0 <__ieee754_powf+0x554>)
 800a3d4:	3a7f      	subs	r2, #127	; 0x7f
 800a3d6:	4111      	asrs	r1, r2
 800a3d8:	ea23 0101 	bic.w	r1, r3, r1
 800a3dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a3e0:	ee07 1a10 	vmov	s14, r1
 800a3e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a3e8:	f1c2 0217 	rsb	r2, r2, #23
 800a3ec:	4110      	asrs	r0, r2
 800a3ee:	2c00      	cmp	r4, #0
 800a3f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3f4:	bfb8      	it	lt
 800a3f6:	4240      	neglt	r0, r0
 800a3f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a3fc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a4f4 <__ieee754_powf+0x558>
 800a400:	ee17 3a10 	vmov	r3, s14
 800a404:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a408:	f023 030f 	bic.w	r3, r3, #15
 800a40c:	ee07 3a10 	vmov	s14, r3
 800a410:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a414:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a418:	eddf 7a37 	vldr	s15, [pc, #220]	; 800a4f8 <__ieee754_powf+0x55c>
 800a41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a420:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a424:	eddf 6a35 	vldr	s13, [pc, #212]	; 800a4fc <__ieee754_powf+0x560>
 800a428:	eeb0 0a67 	vmov.f32	s0, s15
 800a42c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800a430:	eeb0 6a40 	vmov.f32	s12, s0
 800a434:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a438:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a43c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a440:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800a500 <__ieee754_powf+0x564>
 800a444:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a504 <__ieee754_powf+0x568>
 800a448:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a44c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800a508 <__ieee754_powf+0x56c>
 800a450:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a454:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800a50c <__ieee754_powf+0x570>
 800a458:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a45c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800a510 <__ieee754_powf+0x574>
 800a460:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a464:	eeb0 6a40 	vmov.f32	s12, s0
 800a468:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a46c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a470:	eeb0 7a46 	vmov.f32	s14, s12
 800a474:	ee77 6a66 	vsub.f32	s13, s14, s13
 800a478:	ee20 6a06 	vmul.f32	s12, s0, s12
 800a47c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800a480:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a484:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a488:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a48c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a490:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a494:	ee10 3a10 	vmov	r3, s0
 800a498:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a49c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4a0:	da1a      	bge.n	800a4d8 <__ieee754_powf+0x53c>
 800a4a2:	f000 f8ab 	bl	800a5fc <scalbnf>
 800a4a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a4aa:	e5c9      	b.n	800a040 <__ieee754_powf+0xa4>
 800a4ac:	4a19      	ldr	r2, [pc, #100]	; (800a514 <__ieee754_powf+0x578>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	dd02      	ble.n	800a4b8 <__ieee754_powf+0x51c>
 800a4b2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a518 <__ieee754_powf+0x57c>
 800a4b6:	e67b      	b.n	800a1b0 <__ieee754_powf+0x214>
 800a4b8:	d108      	bne.n	800a4cc <__ieee754_powf+0x530>
 800a4ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4be:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c6:	f6ff af7b 	blt.w	800a3c0 <__ieee754_powf+0x424>
 800a4ca:	e7f2      	b.n	800a4b2 <__ieee754_powf+0x516>
 800a4cc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a4d0:	f73f af76 	bgt.w	800a3c0 <__ieee754_powf+0x424>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e78f      	b.n	800a3f8 <__ieee754_powf+0x45c>
 800a4d8:	ee00 3a10 	vmov	s0, r3
 800a4dc:	e7e3      	b.n	800a4a6 <__ieee754_powf+0x50a>
 800a4de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a4e2:	e5ad      	b.n	800a040 <__ieee754_powf+0xa4>
 800a4e4:	eeb0 0a68 	vmov.f32	s0, s17
 800a4e8:	e5aa      	b.n	800a040 <__ieee754_powf+0xa4>
 800a4ea:	eeb0 0a48 	vmov.f32	s0, s16
 800a4ee:	e5a7      	b.n	800a040 <__ieee754_powf+0xa4>
 800a4f0:	007fffff 	.word	0x007fffff
 800a4f4:	3f317218 	.word	0x3f317218
 800a4f8:	35bfbe8c 	.word	0x35bfbe8c
 800a4fc:	3f317200 	.word	0x3f317200
 800a500:	3331bb4c 	.word	0x3331bb4c
 800a504:	b5ddea0e 	.word	0xb5ddea0e
 800a508:	388ab355 	.word	0x388ab355
 800a50c:	bb360b61 	.word	0xbb360b61
 800a510:	3e2aaaab 	.word	0x3e2aaaab
 800a514:	43160000 	.word	0x43160000
 800a518:	0da24260 	.word	0x0da24260

0800a51c <__ieee754_sqrtf>:
 800a51c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a520:	4770      	bx	lr

0800a522 <matherr>:
 800a522:	2000      	movs	r0, #0
 800a524:	4770      	bx	lr

0800a526 <fabsf>:
 800a526:	ee10 3a10 	vmov	r3, s0
 800a52a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a52e:	ee00 3a10 	vmov	s0, r3
 800a532:	4770      	bx	lr

0800a534 <finitef>:
 800a534:	ee10 3a10 	vmov	r3, s0
 800a538:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800a53c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a540:	bfac      	ite	ge
 800a542:	2000      	movge	r0, #0
 800a544:	2001      	movlt	r0, #1
 800a546:	4770      	bx	lr

0800a548 <rintf>:
 800a548:	b513      	push	{r0, r1, r4, lr}
 800a54a:	ee10 1a10 	vmov	r1, s0
 800a54e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a552:	0ddc      	lsrs	r4, r3, #23
 800a554:	3c7f      	subs	r4, #127	; 0x7f
 800a556:	2c16      	cmp	r4, #22
 800a558:	dc46      	bgt.n	800a5e8 <rintf+0xa0>
 800a55a:	b32b      	cbz	r3, 800a5a8 <rintf+0x60>
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	ee10 2a10 	vmov	r2, s0
 800a562:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800a566:	da21      	bge.n	800a5ac <rintf+0x64>
 800a568:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800a56c:	425b      	negs	r3, r3
 800a56e:	4a21      	ldr	r2, [pc, #132]	; (800a5f4 <rintf+0xac>)
 800a570:	0a5b      	lsrs	r3, r3, #9
 800a572:	0d09      	lsrs	r1, r1, #20
 800a574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a578:	0509      	lsls	r1, r1, #20
 800a57a:	430b      	orrs	r3, r1
 800a57c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a580:	ee07 3a90 	vmov	s15, r3
 800a584:	edd2 6a00 	vldr	s13, [r2]
 800a588:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800a58c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800a590:	eddd 7a01 	vldr	s15, [sp, #4]
 800a594:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a598:	ee17 3a90 	vmov	r3, s15
 800a59c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5a0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800a5a4:	ee00 3a10 	vmov	s0, r3
 800a5a8:	b002      	add	sp, #8
 800a5aa:	bd10      	pop	{r4, pc}
 800a5ac:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <rintf+0xb0>)
 800a5ae:	4123      	asrs	r3, r4
 800a5b0:	4219      	tst	r1, r3
 800a5b2:	d0f9      	beq.n	800a5a8 <rintf+0x60>
 800a5b4:	085b      	lsrs	r3, r3, #1
 800a5b6:	4219      	tst	r1, r3
 800a5b8:	d006      	beq.n	800a5c8 <rintf+0x80>
 800a5ba:	ea21 0203 	bic.w	r2, r1, r3
 800a5be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5c2:	fa43 f404 	asr.w	r4, r3, r4
 800a5c6:	4322      	orrs	r2, r4
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <rintf+0xac>)
 800a5ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5ce:	ed90 7a00 	vldr	s14, [r0]
 800a5d2:	ee07 2a90 	vmov	s15, r2
 800a5d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5da:	edcd 7a01 	vstr	s15, [sp, #4]
 800a5de:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a5e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a5e6:	e7df      	b.n	800a5a8 <rintf+0x60>
 800a5e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a5ec:	d3dc      	bcc.n	800a5a8 <rintf+0x60>
 800a5ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a5f2:	e7d9      	b.n	800a5a8 <rintf+0x60>
 800a5f4:	0800ab04 	.word	0x0800ab04
 800a5f8:	007fffff 	.word	0x007fffff

0800a5fc <scalbnf>:
 800a5fc:	b508      	push	{r3, lr}
 800a5fe:	ee10 2a10 	vmov	r2, s0
 800a602:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a606:	ed2d 8b02 	vpush	{d8}
 800a60a:	eef0 0a40 	vmov.f32	s1, s0
 800a60e:	d004      	beq.n	800a61a <scalbnf+0x1e>
 800a610:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a614:	d306      	bcc.n	800a624 <scalbnf+0x28>
 800a616:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a61a:	ecbd 8b02 	vpop	{d8}
 800a61e:	eeb0 0a60 	vmov.f32	s0, s1
 800a622:	bd08      	pop	{r3, pc}
 800a624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a628:	d21c      	bcs.n	800a664 <scalbnf+0x68>
 800a62a:	4b1f      	ldr	r3, [pc, #124]	; (800a6a8 <scalbnf+0xac>)
 800a62c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a6ac <scalbnf+0xb0>
 800a630:	4298      	cmp	r0, r3
 800a632:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a636:	db10      	blt.n	800a65a <scalbnf+0x5e>
 800a638:	ee10 2a90 	vmov	r2, s1
 800a63c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a640:	3b19      	subs	r3, #25
 800a642:	4403      	add	r3, r0
 800a644:	2bfe      	cmp	r3, #254	; 0xfe
 800a646:	dd0f      	ble.n	800a668 <scalbnf+0x6c>
 800a648:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a6b0 <scalbnf+0xb4>
 800a64c:	eeb0 0a48 	vmov.f32	s0, s16
 800a650:	f000 f834 	bl	800a6bc <copysignf>
 800a654:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a658:	e7df      	b.n	800a61a <scalbnf+0x1e>
 800a65a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a6b4 <scalbnf+0xb8>
 800a65e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a662:	e7da      	b.n	800a61a <scalbnf+0x1e>
 800a664:	0ddb      	lsrs	r3, r3, #23
 800a666:	e7ec      	b.n	800a642 <scalbnf+0x46>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dd06      	ble.n	800a67a <scalbnf+0x7e>
 800a66c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a670:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a674:	ee00 3a90 	vmov	s1, r3
 800a678:	e7cf      	b.n	800a61a <scalbnf+0x1e>
 800a67a:	f113 0f16 	cmn.w	r3, #22
 800a67e:	da06      	bge.n	800a68e <scalbnf+0x92>
 800a680:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a684:	4298      	cmp	r0, r3
 800a686:	dcdf      	bgt.n	800a648 <scalbnf+0x4c>
 800a688:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a6b4 <scalbnf+0xb8>
 800a68c:	e7de      	b.n	800a64c <scalbnf+0x50>
 800a68e:	3319      	adds	r3, #25
 800a690:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a694:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a698:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a6b8 <scalbnf+0xbc>
 800a69c:	ee07 3a10 	vmov	s14, r3
 800a6a0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a6a4:	e7b9      	b.n	800a61a <scalbnf+0x1e>
 800a6a6:	bf00      	nop
 800a6a8:	ffff3cb0 	.word	0xffff3cb0
 800a6ac:	4c000000 	.word	0x4c000000
 800a6b0:	7149f2ca 	.word	0x7149f2ca
 800a6b4:	0da24260 	.word	0x0da24260
 800a6b8:	33000000 	.word	0x33000000

0800a6bc <copysignf>:
 800a6bc:	ee10 3a10 	vmov	r3, s0
 800a6c0:	ee10 2a90 	vmov	r2, s1
 800a6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	ee00 3a10 	vmov	s0, r3
 800a6d2:	4770      	bx	lr

0800a6d4 <_init>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	bf00      	nop
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr

0800a6e0 <_fini>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr
