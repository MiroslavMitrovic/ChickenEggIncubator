
InkubatorKontrola.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008bc0  08008bc0  00018bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ef8  08008ef8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f00  08008f00  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f00  08008f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e8  080090f0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080090f0  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f72a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d25  00000000  00000000  0002f942  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00031668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021980  00000000  00000000  000332c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7a1  00000000  00000000  00054c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc135  00000000  00000000  0005f3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  0012b594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ba4 	.word	0x08008ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008ba4 	.word	0x08008ba4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <PID_control>:
/*----------------------------------------------------------------------------------------------------------------------
 * Funkcija za PID kontrolu grejaca inkubatora, vraca vrednost greske koja se koristi za prepravku  vrednosti kasnjenja
 * okidanja TRIACA koji pali grejac
 * --------------------------------------------------------------------------------------------------------------------*/
int PID_control(int setpoint, float Kp, float Ki ,float Kd, float stvarna_temperatura )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6178      	str	r0, [r7, #20]
 8000f90:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f94:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f98:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f9c:	edc7 1a01 	vstr	s3, [r7, #4]

	  if(PID_greska > 20)                              //Ki se koristi samo za vrednosti greske ispod 20degC
 8000fa0:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <PID_control+0x13c>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	dd03      	ble.n	8000fbc <PID_control+0x34>
	    {
		  PID_i = 0;
 8000fb4:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <PID_control+0x140>)
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
	    };
	  	PID_greska = setpoint - stvarna_temperatura;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <PID_control+0x13c>)
 8000fd0:	edc3 7a00 	vstr	s15, [r3]

	    PID_p = Kp * PID_greska;                         //Racunanje P vrednosti
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <PID_control+0x13c>)
 8000fd6:	ed93 7a00 	vldr	s14, [r3]
 8000fda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <PID_control+0x144>)
 8000fe4:	edc3 7a00 	vstr	s15, [r3]
	    PID_i = PID_i + (Ki * PID_greska);               //Racunanje I vrednosti
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <PID_control+0x13c>)
 8000fea:	ed93 7a00 	vldr	s14, [r3]
 8000fee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <PID_control+0x140>)
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <PID_control+0x140>)
 8001002:	edc3 7a00 	vstr	s15, [r3]
	    timePrev = Time;                    			//Prethodno vreme
 8001006:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <PID_control+0x148>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <PID_control+0x14c>)
 800100c:	6013      	str	r3, [r2, #0]
	    Time = millis();                    			//Trenutno ucitano vreme
 800100e:	f000 ff85 	bl	8001f1c <millis>
 8001012:	ee07 0a90 	vmov	s15, r0
 8001016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <PID_control+0x148>)
 800101c:	edc3 7a00 	vstr	s15, [r3]
	    elapsedTime = (Time - timePrev) / 1000.00;
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <PID_control+0x148>)
 8001022:	ed93 7a00 	vldr	s14, [r3]
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <PID_control+0x14c>)
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001030:	eddf 6a29 	vldr	s13, [pc, #164]	; 80010d8 <PID_control+0x150>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <PID_control+0x154>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	    PID_d = Kd*((PID_greska - PID_prethodna_greska)/elapsedTime);  //Racunanje D vrednosti
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <PID_control+0x13c>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <PID_control+0x158>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <PID_control+0x154>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001058:	edd7 7a02 	vldr	s15, [r7, #8]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <PID_control+0x15c>)
 8001062:	edc3 7a00 	vstr	s15, [r3]
	    PID_vrednost = PID_p + PID_i + PID_d;                      //Racunanje cele PID vrednosti
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <PID_control+0x144>)
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <PID_control+0x140>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <PID_control+0x15c>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001084:	ee17 2a90 	vmov	r2, s15
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <PID_control+0x160>)
 800108a:	601a      	str	r2, [r3, #0]

	    if(PID_vrednost < 0)
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <PID_control+0x160>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	da02      	bge.n	800109a <PID_control+0x112>
	    	{
	    	PID_vrednost = 0; //
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <PID_control+0x160>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
	    	};
	    if(PID_vrednost > 7400)
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <PID_control+0x160>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dd03      	ble.n	80010ae <PID_control+0x126>
	    	{
	    	PID_vrednost = 7400; //maksimalna vrednost kontrole u slucaju vremena od 10ms
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <PID_control+0x160>)
 80010a8:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 80010ac:	601a      	str	r2, [r3, #0]
	    	};
	    PID_prethodna_greska = PID_greska; //prethodna greska.
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <PID_control+0x13c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <PID_control+0x158>)
 80010b4:	6013      	str	r3, [r2, #0]
	    return PID_vrednost;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <PID_control+0x160>)
 80010b8:	681b      	ldr	r3, [r3, #0]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000021c 	.word	0x2000021c
 80010c8:	20000210 	.word	0x20000210
 80010cc:	2000020c 	.word	0x2000020c
 80010d0:	20000228 	.word	0x20000228
 80010d4:	20000224 	.word	0x20000224
 80010d8:	447a0000 	.word	0x447a0000
 80010dc:	2000022c 	.word	0x2000022c
 80010e0:	20000220 	.word	0x20000220
 80010e4:	20000214 	.word	0x20000214
 80010e8:	20000218 	.word	0x20000218

080010ec <kontrola_grejac>:
/*-----------------------------------------------------------------------------------------------
 * Konrola snage grejaca preko delay funkcije koja odredjuje okidanje TRIACa
 * ----------------------------------------------------------------------------------------------*/
void kontrola_grejac(int PID_Greska)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
		  delay_us(max_firing_delay-PID_Greska); //Ovaj delay kontrolise snagu grejaca
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <kontrola_grejac+0x44>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fedd 	bl	8001ebc <delay_us>
	      HAL_GPIO_WritePin(FiringPin_GPIO_Port, FiringPin_Pin, GPIO_PIN_SET);//HALGPIOPINSET
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <kontrola_grejac+0x48>)
 800110a:	f001 fc47 	bl	800299c <HAL_GPIO_WritePin>
	      delay_us(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f000 fed4 	bl	8001ebc <delay_us>
	      HAL_GPIO_WritePin(FiringPin_GPIO_Port, FiringPin_Pin, GPIO_PIN_RESET); //HALGPIOPINRESET
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <kontrola_grejac+0x48>)
 800111c:	f001 fc3e 	bl	800299c <HAL_GPIO_WritePin>
	      zero_croosing=0;//false
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <kontrola_grejac+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08008c28 	.word	0x08008c28
 8001134:	40020c00 	.word	0x40020c00
 8001138:	20000230 	.word	0x20000230

0800113c <DHT12_ocitavanje>:
/*-----------------------------------------------------------------------------------------------------------------------
 * Funkcija koja vrsi ocitavanje temperature i vlaznosti vazduha putem i2c Bus-a i vraca dbl* na niz gde su vrednosti
 * Temperature i Relativne vlaznosti vazduha skladistene
 * -----------------------------------------------------------------------------------------------------------------------*/
double * DHT12_ocitavanje(int DHT12_address)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
 8001142:	6078      	str	r0, [r7, #4]


	data[0]=0x00;//pocetna adresa
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,DHT12_address,data,1,10);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	b299      	uxth	r1, r3
 800114e:	230a      	movs	r3, #10
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001156:	4830      	ldr	r0, [pc, #192]	; (8001218 <DHT12_ocitavanje+0xdc>)
 8001158:	f001 fd8a 	bl	8002c70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,DHT12_address,&data[1],5,10);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b299      	uxth	r1, r3
 8001160:	230a      	movs	r3, #10
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2305      	movs	r3, #5
 8001166:	4a2d      	ldr	r2, [pc, #180]	; (800121c <DHT12_ocitavanje+0xe0>)
 8001168:	482b      	ldr	r0, [pc, #172]	; (8001218 <DHT12_ocitavanje+0xdc>)
 800116a:	f001 fe7f 	bl	8002e6c <HAL_I2C_Master_Receive>
	RH_int=data[1];
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001170:	785a      	ldrb	r2, [r3, #1]
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <DHT12_ocitavanje+0xe4>)
 8001174:	701a      	strb	r2, [r3, #0]
	RH_dec=data[2];
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001178:	789a      	ldrb	r2, [r3, #2]
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <DHT12_ocitavanje+0xe8>)
 800117c:	701a      	strb	r2, [r3, #0]
	T_int=data[3];
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001180:	78da      	ldrb	r2, [r3, #3]
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <DHT12_ocitavanje+0xec>)
 8001184:	701a      	strb	r2, [r3, #0]
	T_dec=data[4];
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001188:	791a      	ldrb	r2, [r3, #4]
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <DHT12_ocitavanje+0xf0>)
 800118c:	701a      	strb	r2, [r3, #0]

	if(data[5]==(data[1]+data[2]+data[3]+data[4]))//checksum provera
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001190:	795b      	ldrb	r3, [r3, #5]
 8001192:	4619      	mov	r1, r3
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <DHT12_ocitavanje+0xd8>)
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	461a      	mov	r2, r3
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <DHT12_ocitavanje+0xd8>)
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	4413      	add	r3, r2
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <DHT12_ocitavanje+0xd8>)
 80011a2:	78d2      	ldrb	r2, [r2, #3]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <DHT12_ocitavanje+0xd8>)
 80011a8:	7912      	ldrb	r2, [r2, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	4299      	cmp	r1, r3
 80011ae:	d12b      	bne.n	8001208 <DHT12_ocitavanje+0xcc>
	{

		sprintf(RH_val,"%2d.%2d",RH_int,RH_dec);
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <DHT12_ocitavanje+0xe4>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <DHT12_ocitavanje+0xe8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	491c      	ldr	r1, [pc, #112]	; (8001230 <DHT12_ocitavanje+0xf4>)
 80011c0:	481c      	ldr	r0, [pc, #112]	; (8001234 <DHT12_ocitavanje+0xf8>)
 80011c2:	f004 fde7 	bl	8005d94 <siprintf>
		sprintf(T_val,"%2d.%2d",T_int,T_dec);
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <DHT12_ocitavanje+0xec>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <DHT12_ocitavanje+0xf0>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4916      	ldr	r1, [pc, #88]	; (8001230 <DHT12_ocitavanje+0xf4>)
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <DHT12_ocitavanje+0xfc>)
 80011d8:	f004 fddc 	bl	8005d94 <siprintf>
		RHT_val[0]=atof(T_val);
 80011dc:	4816      	ldr	r0, [pc, #88]	; (8001238 <DHT12_ocitavanje+0xfc>)
 80011de:	f003 ff5f 	bl	80050a0 <atof>
 80011e2:	eeb0 7a40 	vmov.f32	s14, s0
 80011e6:	eef0 7a60 	vmov.f32	s15, s1
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <DHT12_ocitavanje+0x100>)
 80011ec:	ed83 7b00 	vstr	d7, [r3]
		RHT_val[1]=atof(RH_val);
 80011f0:	4810      	ldr	r0, [pc, #64]	; (8001234 <DHT12_ocitavanje+0xf8>)
 80011f2:	f003 ff55 	bl	80050a0 <atof>
 80011f6:	eeb0 7a40 	vmov.f32	s14, s0
 80011fa:	eef0 7a60 	vmov.f32	s15, s1
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <DHT12_ocitavanje+0x100>)
 8001200:	ed83 7b02 	vstr	d7, [r3, #8]
		return RHT_val;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <DHT12_ocitavanje+0x100>)
 8001206:	e000      	b.n	800120a <DHT12_ocitavanje+0xce>

	}
	else
	{
		return  NULL;
 8001208:	2300      	movs	r3, #0
	}

}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000368 	.word	0x20000368
 8001218:	20000258 	.word	0x20000258
 800121c:	20000369 	.word	0x20000369
 8001220:	20000231 	.word	0x20000231
 8001224:	20000232 	.word	0x20000232
 8001228:	20000233 	.word	0x20000233
 800122c:	20000234 	.word	0x20000234
 8001230:	08008bc0 	.word	0x08008bc0
 8001234:	20000248 	.word	0x20000248
 8001238:	20000350 	.word	0x20000350
 800123c:	20000358 	.word	0x20000358

08001240 <getTimeDate_DS3231>:
/*---------------------------------------------------------------------------------
 * Funkcija koja vadi vreme preko i2c interfejsa i upisuje isti u struct time.
 *
 *--------------------------------------------------------------------------------*/
void getTimeDate_DS3231(int DS3231_I2C_address)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af04      	add	r7, sp, #16
 8001246:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];

	HAL_I2C_Mem_Read(&hi2c1,DS3231_I2C_address,0x00,1,get_time,7,1000);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	b299      	uxth	r1, r3
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2307      	movs	r3, #7
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	2200      	movs	r2, #0
 8001260:	481f      	ldr	r0, [pc, #124]	; (80012e0 <getTimeDate_DS3231+0xa0>)
 8001262:	f002 f829 	bl	80032b8 <HAL_I2C_Mem_Read>

	time.seconds=hextodec(get_time[0]);
 8001266:	7a3b      	ldrb	r3, [r7, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f83d 	bl	80012e8 <hextodec>
 800126e:	4603      	mov	r3, r0
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <getTimeDate_DS3231+0xa4>)
 8001274:	701a      	strb	r2, [r3, #0]
	time.minutes=hextodec(get_time[1]);
 8001276:	7a7b      	ldrb	r3, [r7, #9]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f835 	bl	80012e8 <hextodec>
 800127e:	4603      	mov	r3, r0
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <getTimeDate_DS3231+0xa4>)
 8001284:	705a      	strb	r2, [r3, #1]
	time.hours=hextodec(get_time[2]);
 8001286:	7abb      	ldrb	r3, [r7, #10]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f82d 	bl	80012e8 <hextodec>
 800128e:	4603      	mov	r3, r0
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <getTimeDate_DS3231+0xa4>)
 8001294:	709a      	strb	r2, [r3, #2]
	time.day=hextodec(get_time[3]);
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f825 	bl	80012e8 <hextodec>
 800129e:	4603      	mov	r3, r0
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <getTimeDate_DS3231+0xa4>)
 80012a4:	70da      	strb	r2, [r3, #3]
	time.date=hextodec(get_time[4]);
 80012a6:	7b3b      	ldrb	r3, [r7, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f81d 	bl	80012e8 <hextodec>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <getTimeDate_DS3231+0xa4>)
 80012b4:	711a      	strb	r2, [r3, #4]
	time.month=hextodec(get_time[5]);
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f815 	bl	80012e8 <hextodec>
 80012be:	4603      	mov	r3, r0
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <getTimeDate_DS3231+0xa4>)
 80012c4:	715a      	strb	r2, [r3, #5]
	time.year=hextodec(get_time[6]);
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f80d 	bl	80012e8 <hextodec>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <getTimeDate_DS3231+0xa4>)
 80012d4:	719a      	strb	r2, [r3, #6]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000258 	.word	0x20000258
 80012e4:	20000370 	.word	0x20000370

080012e8 <hextodec>:
}
/*-----------------------------------------------------------------------------
 * Funkcija koja vrsi konverziju iz hex brojeva u decimalne brojeve
 * ---------------------------------------------------------------------------*/
int hextodec(uint8_t val)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	461a      	mov	r2, r3
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	4413      	add	r3, r2
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <lcd_send_cmd>:
}
/*-----------------------------------------------------------------------------
 * funkcija koja salje komandu na LCD kontroler putem i2c BUS-a
 * ---------------------------------------------------------------------------*/
void lcd_send_cmd (char cmd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);      //4BIT HI
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f023 030f 	bic.w	r3, r3, #15
 8001328:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0); //4BIT LO
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	f043 030c 	orr.w	r3, r3, #12
 8001336:	b2db      	uxtb	r3, r3
 8001338:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	b2db      	uxtb	r3, r3
 8001342:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	f043 030c 	orr.w	r3, r3, #12
 800134a:	b2db      	uxtb	r3, r3
 800134c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	b2db      	uxtb	r3, r3
 8001356:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1,LCD_I2C_SLAVE_ADDRESS,(uint8_t *) data_t, 4, 100);
 8001358:	f107 0208 	add.w	r2, r7, #8
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2304      	movs	r3, #4
 8001362:	217e      	movs	r1, #126	; 0x7e
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <lcd_send_cmd+0x5c>)
 8001366:	f001 fc83 	bl	8002c70 <HAL_I2C_Master_Transmit>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000258 	.word	0x20000258

08001378 <lcd_send_data>:
/*-----------------------------------------------------------------------------
 * funkcija koja salje podatke na LCD kontroler putem i2c BUS-a
 * ---------------------------------------------------------------------------*/
void lcd_send_data (char data)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f023 030f 	bic.w	r3, r3, #15
 8001388:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  	//en=1, rs=0
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f043 030d 	orr.w	r3, r3, #13
 8001396:	b2db      	uxtb	r3, r3
 8001398:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  	//en=0, rs=0
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	f043 0309 	orr.w	r3, r3, #9
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  	//en=1, rs=0
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	f043 030d 	orr.w	r3, r3, #13
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  	//en=0, rs=0
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	f043 0309 	orr.w	r3, r3, #9
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_I2C_SLAVE_ADDRESS,(uint8_t *) data_t, 4, 100);
 80013b8:	f107 0208 	add.w	r2, r7, #8
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2304      	movs	r3, #4
 80013c2:	217e      	movs	r1, #126	; 0x7e
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <lcd_send_data+0x5c>)
 80013c6:	f001 fc53 	bl	8002c70 <HAL_I2C_Master_Transmit>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000258 	.word	0x20000258

080013d8 <lcd_clear>:
/*-----------------------------------------------------------------------------
 * funkcija koja brise sve podatke i CGRAM-a LCD kontroler putem i2c BUS-a
 * ---------------------------------------------------------------------------*/
void lcd_clear (void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ff9b 	bl	8001318 <lcd_send_cmd>
	/*for (int i=0; i<70; i++)
	{
		lcd_send_data (' ');
	}
	*/
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <lcd_put_cur>:
/*-----------------------------------------------------------------------------
 * funkcija koja setuje poziciju cursora na LCD ekranu
 * ---------------------------------------------------------------------------*/
void lcd_put_cur(int row, int col)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
    switch (row)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <lcd_put_cur+0x16>
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d005      	beq.n	8001406 <lcd_put_cur+0x20>
 80013fa:	e009      	b.n	8001410 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001402:	603b      	str	r3, [r7, #0]
            break;
 8001404:	e004      	b.n	8001410 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800140c:	603b      	str	r3, [r7, #0]
            break;
 800140e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff7f 	bl	8001318 <lcd_send_cmd>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <lcd_init>:
/*-----------------------------------------------------------------------------
 * Inicijalizacija samog LCD-a
 * ---------------------------------------------------------------------------*/
void lcd_init (void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
	// 4 BIT inicijalizacija
	HAL_Delay(50);  // cekaj >40ms
 8001426:	2032      	movs	r0, #50	; 0x32
 8001428:	f000 ffd2 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800142c:	2030      	movs	r0, #48	; 0x30
 800142e:	f7ff ff73 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(5);  // cekaj >4.1ms
 8001432:	2005      	movs	r0, #5
 8001434:	f000 ffcc 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001438:	2030      	movs	r0, #48	; 0x30
 800143a:	f7ff ff6d 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(1);  // cekaj  >100us
 800143e:	2001      	movs	r0, #1
 8001440:	f000 ffc6 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001444:	2030      	movs	r0, #48	; 0x30
 8001446:	f7ff ff67 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f000 ffc0 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mod
 8001450:	2020      	movs	r0, #32
 8001452:	f7ff ff61 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(10);
 8001456:	200a      	movs	r0, #10
 8001458:	f000 ffba 	bl	80023d0 <HAL_Delay>

  // inicijalizacija displeja
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800145c:	2028      	movs	r0, #40	; 0x28
 800145e:	f7ff ff5b 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f000 ffb4 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0 display,C=0 cursor, B=0 blink  ---> display OFF, blink OFF, cursor OFF
 8001468:	2008      	movs	r0, #8
 800146a:	f7ff ff55 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f000 ffae 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff ff4f 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f000 ffa8 	bl	80023d0 <HAL_Delay>
	HAL_Delay(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f000 ffa5 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001486:	2006      	movs	r0, #6
 8001488:	f7ff ff46 	bl	8001318 <lcd_send_cmd>
	HAL_Delay(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f000 ff9f 	bl	80023d0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor OFF ,blink OFF
 8001492:	200c      	movs	r0, #12
 8001494:	f7ff ff40 	bl	8001318 <lcd_send_cmd>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <lcd_send_string>:
/*-----------------------------------------------------------------------------
 * Funkcija koja salje ceo string
 * ---------------------------------------------------------------------------*/
void lcd_send_string (char *str)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80014a4:	e006      	b.n	80014b4 <lcd_send_string+0x18>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff62 	bl	8001378 <lcd_send_data>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f4      	bne.n	80014a6 <lcd_send_string+0xa>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <stepperMotorControlFD>:
 * Funkcija koja kontrolise okretanje step motora i njegovu brzinu.
 * Brzinu okretanja odredjuje parametar int delay.
 *
 * ---------------------------------------------------------------------------*/
void stepperMotorControlFD(int delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	 *  1 1 0 0
	 *  0 1 1 0
	 *  0 0 1 1
	 *  1 0 0 1
	 *-------------------------------------------------------------------------- */
	int count=0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
	//Rezolucija motora je 1.8deg po koraku, odnosno 200 koraka za 360 stepeni
	//Kako bi se ovaj motor okrenuo pun krug za 1 sekundu, potrebno je koristiti
	//delay od 5ms.
	while(count<50)
 80014d0:	e072      	b.n	80015b8 <stepperMotorControlFD+0xf4>
	{
	//Step 1
	HAL_GPIO_WritePin(StepperMotorPin1_GPIO_Port, StepperMotorPin1_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	483b      	ldr	r0, [pc, #236]	; (80015c8 <stepperMotorControlFD+0x104>)
 80014da:	f001 fa5f 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin2_GPIO_Port, StepperMotorPin2_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e4:	4838      	ldr	r0, [pc, #224]	; (80015c8 <stepperMotorControlFD+0x104>)
 80014e6:	f001 fa59 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin3_GPIO_Port, StepperMotorPin3_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f0:	4836      	ldr	r0, [pc, #216]	; (80015cc <stepperMotorControlFD+0x108>)
 80014f2:	f001 fa53 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin4_GPIO_Port, StepperMotorPin4_Pin, GPIO_PIN_RESET );
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fc:	4833      	ldr	r0, [pc, #204]	; (80015cc <stepperMotorControlFD+0x108>)
 80014fe:	f001 fa4d 	bl	800299c <HAL_GPIO_WritePin>
	delay_ms(delay);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fcf1 	bl	8001eec <delay_ms>
	//Step 2
	HAL_GPIO_WritePin(StepperMotorPin1_GPIO_Port, StepperMotorPin1_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001510:	482d      	ldr	r0, [pc, #180]	; (80015c8 <stepperMotorControlFD+0x104>)
 8001512:	f001 fa43 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin2_GPIO_Port, StepperMotorPin2_Pin, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	482a      	ldr	r0, [pc, #168]	; (80015c8 <stepperMotorControlFD+0x104>)
 800151e:	f001 fa3d 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin3_GPIO_Port, StepperMotorPin3_Pin, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001528:	4828      	ldr	r0, [pc, #160]	; (80015cc <stepperMotorControlFD+0x108>)
 800152a:	f001 fa37 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin4_GPIO_Port, StepperMotorPin4_Pin, GPIO_PIN_RESET );
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001534:	4825      	ldr	r0, [pc, #148]	; (80015cc <stepperMotorControlFD+0x108>)
 8001536:	f001 fa31 	bl	800299c <HAL_GPIO_WritePin>
	delay_ms(delay);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fcd5 	bl	8001eec <delay_ms>
	//Step 3
	HAL_GPIO_WritePin(StepperMotorPin1_GPIO_Port, StepperMotorPin1_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <stepperMotorControlFD+0x104>)
 800154a:	f001 fa27 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin2_GPIO_Port, StepperMotorPin2_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <stepperMotorControlFD+0x104>)
 8001556:	f001 fa21 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin3_GPIO_Port, StepperMotorPin3_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001560:	481a      	ldr	r0, [pc, #104]	; (80015cc <stepperMotorControlFD+0x108>)
 8001562:	f001 fa1b 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin4_GPIO_Port, StepperMotorPin4_Pin, GPIO_PIN_SET );
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156c:	4817      	ldr	r0, [pc, #92]	; (80015cc <stepperMotorControlFD+0x108>)
 800156e:	f001 fa15 	bl	800299c <HAL_GPIO_WritePin>
	delay_ms(delay);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fcb9 	bl	8001eec <delay_ms>
	//Step 4
	HAL_GPIO_WritePin(StepperMotorPin1_GPIO_Port, StepperMotorPin1_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	4811      	ldr	r0, [pc, #68]	; (80015c8 <stepperMotorControlFD+0x104>)
 8001582:	f001 fa0b 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin2_GPIO_Port, StepperMotorPin2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <stepperMotorControlFD+0x104>)
 800158e:	f001 fa05 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin3_GPIO_Port, StepperMotorPin3_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <stepperMotorControlFD+0x108>)
 800159a:	f001 f9ff 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepperMotorPin4_GPIO_Port, StepperMotorPin4_Pin, GPIO_PIN_SET );
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <stepperMotorControlFD+0x108>)
 80015a6:	f001 f9f9 	bl	800299c <HAL_GPIO_WritePin>
	delay_ms(delay);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fc9d 	bl	8001eec <delay_ms>
	count++;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
	while(count<50)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b31      	cmp	r3, #49	; 0x31
 80015bc:	dd89      	ble.n	80014d2 <stepperMotorControlFD+0xe>
	}

};
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40020400 	.word	0x40020400

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int PidKorekcija=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
	float StvarnaTemperatura=0.0;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
	double * RHTptr;
	double RH_value, T_value;
	char * strptr;
	strptr=lcd_string;
 80015e0:	4ba0      	ldr	r3, [pc, #640]	; (8001864 <main+0x294>)
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e4:	f000 fe82 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e8:	f000 f994 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ec:	f000 fafc 	bl	8001be8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015f0:	f000 f9fa 	bl	80019e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015f4:	f000 fa26 	bl	8001a44 <MX_SPI1_Init>
  MX_TIM2_Init();
 80015f8:	f000 fa5a 	bl	8001ab0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80015fc:	f000 faa6 	bl	8001b4c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8001600:	4899      	ldr	r0, [pc, #612]	; (8001868 <main+0x298>)
 8001602:	f003 f96e 	bl	80048e2 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim5);
 8001606:	4899      	ldr	r0, [pc, #612]	; (800186c <main+0x29c>)
 8001608:	f003 f96b 	bl	80048e2 <HAL_TIM_Base_Start_IT>

lcd_init ();
 800160c:	f7ff ff09 	bl	8001422 <lcd_init>
  /* USER CODE END 2 */
getTimeDate_DS3231(DS3231_ADDRESS_I2C);
 8001610:	20d0      	movs	r0, #208	; 0xd0
 8001612:	f7ff fe15 	bl	8001240 <getTimeDate_DS3231>
startDay=time.day;
 8001616:	4b96      	ldr	r3, [pc, #600]	; (8001870 <main+0x2a0>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	76fb      	strb	r3, [r7, #27]
startMonth=time.month;
 800161c:	4b94      	ldr	r3, [pc, #592]	; (8001870 <main+0x2a0>)
 800161e:	795b      	ldrb	r3, [r3, #5]
 8001620:	76bb      	strb	r3, [r7, #26]
prevousTime=0;
 8001622:	2300      	movs	r3, #0
 8001624:	767b      	strb	r3, [r7, #25]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getTimeDate_DS3231(DS3231_ADDRESS_I2C);	//vadi trenutno vreme
 8001626:	20d0      	movs	r0, #208	; 0xd0
 8001628:	f7ff fe0a 	bl	8001240 <getTimeDate_DS3231>
	  currentDay=time.day;
 800162c:	4b90      	ldr	r3, [pc, #576]	; (8001870 <main+0x2a0>)
 800162e:	78db      	ldrb	r3, [r3, #3]
 8001630:	763b      	strb	r3, [r7, #24]
	  currentMonth=time.month;
 8001632:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <main+0x2a0>)
 8001634:	795b      	ldrb	r3, [r3, #5]
 8001636:	75fb      	strb	r3, [r7, #23]
	  currentTime=time.hours;
 8001638:	4b8d      	ldr	r3, [pc, #564]	; (8001870 <main+0x2a0>)
 800163a:	789b      	ldrb	r3, [r3, #2]
 800163c:	75bb      	strb	r3, [r7, #22]

	  sprintf(lcd_string,"Time:%02d:%02d:%02d",time.hours, time.minutes,time.seconds); //string koji ispisuje vreme
 800163e:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <main+0x2a0>)
 8001640:	789b      	ldrb	r3, [r3, #2]
 8001642:	461a      	mov	r2, r3
 8001644:	4b8a      	ldr	r3, [pc, #552]	; (8001870 <main+0x2a0>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	4619      	mov	r1, r3
 800164a:	4b89      	ldr	r3, [pc, #548]	; (8001870 <main+0x2a0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	460b      	mov	r3, r1
 8001652:	4988      	ldr	r1, [pc, #544]	; (8001874 <main+0x2a4>)
 8001654:	4883      	ldr	r0, [pc, #524]	; (8001864 <main+0x294>)
 8001656:	f004 fb9d 	bl	8005d94 <siprintf>
	  lcd_put_cur(0,0);
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fec2 	bl	80013e6 <lcd_put_cur>
	  lcd_send_string(lcd_string);
 8001662:	4880      	ldr	r0, [pc, #512]	; (8001864 <main+0x294>)
 8001664:	f7ff ff1a 	bl	800149c <lcd_send_string>
	  while(*(strptr++) !='\0')				//brise string
 8001668:	e004      	b.n	8001674 <main+0xa4>
	  	  {
	  		  *(strptr++)=0;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	627a      	str	r2, [r7, #36]	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
	  while(*(strptr++) !='\0')				//brise string
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	627a      	str	r2, [r7, #36]	; 0x24
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f4      	bne.n	800166a <main+0x9a>
	  	  }
	  lcd_put_cur(1,0);
 8001680:	2100      	movs	r1, #0
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff feaf 	bl	80013e6 <lcd_put_cur>
	  sprintf(lcd_string,"Date:%02d-%02d-20%02d",time.day, time.month,time.year);	//string koji ispisuje datum
 8001688:	4b79      	ldr	r3, [pc, #484]	; (8001870 <main+0x2a0>)
 800168a:	78db      	ldrb	r3, [r3, #3]
 800168c:	461a      	mov	r2, r3
 800168e:	4b78      	ldr	r3, [pc, #480]	; (8001870 <main+0x2a0>)
 8001690:	795b      	ldrb	r3, [r3, #5]
 8001692:	4619      	mov	r1, r3
 8001694:	4b76      	ldr	r3, [pc, #472]	; (8001870 <main+0x2a0>)
 8001696:	799b      	ldrb	r3, [r3, #6]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	460b      	mov	r3, r1
 800169c:	4976      	ldr	r1, [pc, #472]	; (8001878 <main+0x2a8>)
 800169e:	4871      	ldr	r0, [pc, #452]	; (8001864 <main+0x294>)
 80016a0:	f004 fb78 	bl	8005d94 <siprintf>


	  RHTptr =DHT12_ocitavanje(DHT12_ADDRESS_I2C);
 80016a4:	20b8      	movs	r0, #184	; 0xb8
 80016a6:	f7ff fd49 	bl	800113c <DHT12_ocitavanje>
 80016aa:	6138      	str	r0, [r7, #16]
	  if(RHTptr== NULL) //greska prilikom ucitavanja
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d119      	bne.n	80016e6 <main+0x116>
	  {

		  while(*(strptr++) !='\0')        //brise string
 80016b2:	e004      	b.n	80016be <main+0xee>
		  	  	  {
		  	  		  *(strptr++)=0;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	627a      	str	r2, [r7, #36]	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
		  while(*(strptr++) !='\0')        //brise string
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	627a      	str	r2, [r7, #36]	; 0x24
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f4      	bne.n	80016b4 <main+0xe4>
		  	  	  }
		  lcd_clear();
 80016ca:	f7ff fe85 	bl	80013d8 <lcd_clear>
		  lcd_put_cur(0, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fe88 	bl	80013e6 <lcd_put_cur>
		  sprintf(lcd_string,"Greska!");
 80016d6:	4a63      	ldr	r2, [pc, #396]	; (8001864 <main+0x294>)
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <main+0x2ac>)
 80016da:	cb03      	ldmia	r3!, {r0, r1}
 80016dc:	6010      	str	r0, [r2, #0]
 80016de:	6051      	str	r1, [r2, #4]
		  lcd_send_string(lcd_string);//Error!
 80016e0:	4860      	ldr	r0, [pc, #384]	; (8001864 <main+0x294>)
 80016e2:	f7ff fedb 	bl	800149c <lcd_send_string>
	  }
	  RH_value=*(RHTptr);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  T_value=*(RHTptr+1);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80016f6:	e9c7 3400 	strd	r3, r4, [r7]
	  StvarnaTemperatura=(float)T_value;
 80016fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fe:	f7ff fa73 	bl	8000be8 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	61fb      	str	r3, [r7, #28]
	  PidKorekcija=PID_control(SETPOINT_TEMP, Kp,Ki,Kd,StvarnaTemperatura);
 8001706:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <main+0x2b0>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <main+0x2b4>)
 800170e:	ed93 7a00 	vldr	s14, [r3]
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <main+0x2b8>)
 8001714:	edd3 6a00 	vldr	s13, [r3]
 8001718:	edd7 1a07 	vldr	s3, [r7, #28]
 800171c:	eeb0 1a66 	vmov.f32	s2, s13
 8001720:	eef0 0a47 	vmov.f32	s1, s14
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	2027      	movs	r0, #39	; 0x27
 800172a:	f7ff fc2d 	bl	8000f88 <PID_control>
 800172e:	6238      	str	r0, [r7, #32]
	  if(zero_croosing==1)
 8001730:	4b56      	ldr	r3, [pc, #344]	; (800188c <main+0x2bc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <main+0x170>
	 	 {
	 		 kontrola_grejac(PidKorekcija);
 800173a:	6a38      	ldr	r0, [r7, #32]
 800173c:	f7ff fcd6 	bl	80010ec <kontrola_grejac>
	 	 }
	  if(RH_value>=70)
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b52      	ldr	r3, [pc, #328]	; (8001890 <main+0x2c0>)
 8001746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800174a:	f7ff f9db 	bl	8000b04 <__aeabi_dcmpge>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <main+0x192>
	  {
		  HAL_GPIO_WritePin(FanPin_GPIO_Port, FanPin_Pin, GPIO_PIN_SET); //ukljuci ventilator
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	484e      	ldr	r0, [pc, #312]	; (8001894 <main+0x2c4>)
 800175c:	f001 f91e 	bl	800299c <HAL_GPIO_WritePin>
 8001760:	e054      	b.n	800180c <main+0x23c>
	  }
	  else if(RH_value<SETPOINT_HUM)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <main+0x2c8>)
 8001768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176c:	f7ff f9b6 	bl	8000adc <__aeabi_dcmplt>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <main+0x1b4>
	  {
		  HAL_GPIO_WritePin(FanPin_GPIO_Port, FanPin_Pin, GPIO_PIN_SET);//iskljuci ventilator
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	4845      	ldr	r0, [pc, #276]	; (8001894 <main+0x2c4>)
 800177e:	f001 f90d 	bl	800299c <HAL_GPIO_WritePin>
 8001782:	e043      	b.n	800180c <main+0x23c>
	  }
	  else if (RH_value<SETPOINT_HUM)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b43      	ldr	r3, [pc, #268]	; (8001898 <main+0x2c8>)
 800178a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800178e:	f7ff f9a5 	bl	8000adc <__aeabi_dcmplt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d039      	beq.n	800180c <main+0x23c>
	  {
		  while(*(strptr++) !='\0')
 8001798:	e004      	b.n	80017a4 <main+0x1d4>
		  {
		  	 *(strptr++)=0;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	627a      	str	r2, [r7, #36]	; 0x24
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
		  while(*(strptr++) !='\0')
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	627a      	str	r2, [r7, #36]	; 0x24
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f4      	bne.n	800179a <main+0x1ca>
		   }
		    lcd_clear();
 80017b0:	f7ff fe12 	bl	80013d8 <lcd_clear>
		    lcd_put_cur(0, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff fe15 	bl	80013e6 <lcd_put_cur>
		    strcpy(lcd_string,"Niska vlaznost!");
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <main+0x294>)
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <main+0x2cc>)
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	6020      	str	r0, [r4, #0]
 80017c8:	6061      	str	r1, [r4, #4]
 80017ca:	60a2      	str	r2, [r4, #8]
 80017cc:	60e3      	str	r3, [r4, #12]
		    lcd_send_string(strptr);
 80017ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017d0:	f7ff fe64 	bl	800149c <lcd_send_string>
		    while(*(strptr++) !='\0')    //brise string
 80017d4:	e004      	b.n	80017e0 <main+0x210>
		    		  {
		    		  	 *(strptr++)=0;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	627a      	str	r2, [r7, #36]	; 0x24
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
		    while(*(strptr++) !='\0')    //brise string
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	627a      	str	r2, [r7, #36]	; 0x24
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f4      	bne.n	80017d6 <main+0x206>
		    		   }
		    lcd_put_cur(1, 0);
 80017ec:	2100      	movs	r1, #0
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7ff fdf9 	bl	80013e6 <lcd_put_cur>
		    strcpy(lcd_string,"Niska vlaznost!");
 80017f4:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <main+0x294>)
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <main+0x2cc>)
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	6020      	str	r0, [r4, #0]
 8001800:	6061      	str	r1, [r4, #4]
 8001802:	60a2      	str	r2, [r4, #8]
 8001804:	60e3      	str	r3, [r4, #12]
		    lcd_send_string(strptr);
 8001806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001808:	f7ff fe48 	bl	800149c <lcd_send_string>
	  }
	  if(HAL_GPIO_ReadPin(ShowTempPin_GPIO_Port, ShowTempPin_Pin)==GPIO_PIN_SET) //prikazuje vrednsot trenutne temperature i vlaznosti
 800180c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001810:	4820      	ldr	r0, [pc, #128]	; (8001894 <main+0x2c4>)
 8001812:	f001 f8ab 	bl	800296c <HAL_GPIO_ReadPin>
 8001816:	4603      	mov	r3, r0
 8001818:	2b01      	cmp	r3, #1
 800181a:	d15c      	bne.n	80018d6 <main+0x306>
	  {
		  delay_ms(40);				//debouncing
 800181c:	2028      	movs	r0, #40	; 0x28
 800181e:	f000 fb65 	bl	8001eec <delay_ms>

		  if(HAL_GPIO_ReadPin(ShowTempPin_GPIO_Port, ShowTempPin_Pin)==GPIO_PIN_SET)
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	481b      	ldr	r0, [pc, #108]	; (8001894 <main+0x2c4>)
 8001828:	f001 f8a0 	bl	800296c <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	2b01      	cmp	r3, #1
 8001830:	d151      	bne.n	80018d6 <main+0x306>
		  {

		  		  while(*(strptr++) !='\0')				//brise string
 8001832:	e004      	b.n	800183e <main+0x26e>
		  		  	  	  {
		  		  	  		  *(strptr++)=0;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	627a      	str	r2, [r7, #36]	; 0x24
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
		  		  while(*(strptr++) !='\0')				//brise string
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	627a      	str	r2, [r7, #36]	; 0x24
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f4      	bne.n	8001834 <main+0x264>
		  		  	  	  }
		  		  	  	  lcd_clear();
 800184a:	f7ff fdc5 	bl	80013d8 <lcd_clear>
		  				  lcd_put_cur(0, 0);
 800184e:	2100      	movs	r1, #0
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fdc8 	bl	80013e6 <lcd_put_cur>
		  				  sprintf(lcd_string,"T=%2.1f[degC]",T_value);
 8001856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800185a:	4911      	ldr	r1, [pc, #68]	; (80018a0 <main+0x2d0>)
 800185c:	4801      	ldr	r0, [pc, #4]	; (8001864 <main+0x294>)
 800185e:	f004 fa99 	bl	8005d94 <siprintf>
		  				while(*(strptr++) !='\0')	    //brise string
 8001862:	e024      	b.n	80018ae <main+0x2de>
 8001864:	200002ec 	.word	0x200002ec
 8001868:	200003d0 	.word	0x200003d0
 800186c:	200002ac 	.word	0x200002ac
 8001870:	20000370 	.word	0x20000370
 8001874:	08008bc8 	.word	0x08008bc8
 8001878:	08008bdc 	.word	0x08008bdc
 800187c:	08008bf4 	.word	0x08008bf4
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004
 8001888:	20000008 	.word	0x20000008
 800188c:	20000230 	.word	0x20000230
 8001890:	40518000 	.word	0x40518000
 8001894:	40020400 	.word	0x40020400
 8001898:	40504000 	.word	0x40504000
 800189c:	08008bfc 	.word	0x08008bfc
 80018a0:	08008c0c 	.word	0x08008c0c
		  					{
		  					  *(strptr++)=0;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	627a      	str	r2, [r7, #36]	; 0x24
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
		  				while(*(strptr++) !='\0')	    //brise string
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	627a      	str	r2, [r7, #36]	; 0x24
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f4      	bne.n	80018a4 <main+0x2d4>
		  					}
		  					lcd_put_cur(1, 0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fd92 	bl	80013e6 <lcd_put_cur>
		  					sprintf(lcd_string,"RH=%2.1f[%]",RH_value);
 80018c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c6:	4911      	ldr	r1, [pc, #68]	; (800190c <main+0x33c>)
 80018c8:	4811      	ldr	r0, [pc, #68]	; (8001910 <main+0x340>)
 80018ca:	f004 fa63 	bl	8005d94 <siprintf>
		  					delay_ms(2000);
 80018ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018d2:	f000 fb0b 	bl	8001eec <delay_ms>
		  }
	  }
	  /*Okretanje jaja na svakih sat vremena u toku 19 dana procesa inkubacije */
	  if((((startDay-currentDay)<19) && (startMonth==currentMonth)) || ((currentMonth>startMonth) && (((30-startDay)+currentDay)<19)))
 80018d6:	7efa      	ldrb	r2, [r7, #27]
 80018d8:	7e3b      	ldrb	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b12      	cmp	r3, #18
 80018de:	dc03      	bgt.n	80018e8 <main+0x318>
 80018e0:	7eba      	ldrb	r2, [r7, #26]
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d00c      	beq.n	8001902 <main+0x332>
 80018e8:	7dfa      	ldrb	r2, [r7, #23]
 80018ea:	7ebb      	ldrb	r3, [r7, #26]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f67f ae9a 	bls.w	8001626 <main+0x56>
 80018f2:	7efb      	ldrb	r3, [r7, #27]
 80018f4:	f1c3 021e 	rsb	r2, r3, #30
 80018f8:	7e3b      	ldrb	r3, [r7, #24]
 80018fa:	4413      	add	r3, r2
 80018fc:	2b12      	cmp	r3, #18
 80018fe:	f73f ae92 	bgt.w	8001626 <main+0x56>
	  {
		  //dodati if uslov za aktivaciju u slucaju razlike od 1h
		  stepperMotorControlFD(5);
 8001902:	2005      	movs	r0, #5
 8001904:	f7ff fdde 	bl	80014c4 <stepperMotorControlFD>
	  getTimeDate_DS3231(DS3231_ADDRESS_I2C);	//vadi trenutno vreme
 8001908:	e68d      	b.n	8001626 <main+0x56>
 800190a:	bf00      	nop
 800190c:	08008c1c 	.word	0x08008c1c
 8001910:	200002ec 	.word	0x200002ec

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2230      	movs	r2, #48	; 0x30
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fbea 	bl	80050fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <SystemClock_Config+0xcc>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <SystemClock_Config+0xcc>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <SystemClock_Config+0xcc>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <SystemClock_Config+0xd0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <SystemClock_Config+0xd0>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <SystemClock_Config+0xd0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001970:	2301      	movs	r3, #1
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197a:	2302      	movs	r3, #2
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001984:	2304      	movs	r3, #4
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001988:	233c      	movs	r3, #60	; 0x3c
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001990:	2307      	movs	r3, #7
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fac5 	bl	8003f28 <HAL_RCC_OscConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019a4:	f000 fadc 	bl	8001f60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fd1e 	bl	8004408 <HAL_RCC_ClockConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019d2:	f000 fac5 	bl	8001f60 <Error_Handler>
  }
}
 80019d6:	bf00      	nop
 80019d8:	3750      	adds	r7, #80	; 0x50
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000

080019e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_I2C1_Init+0x50>)
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <MX_I2C1_Init+0x54>)
 80019f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_I2C1_Init+0x50>)
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <MX_I2C1_Init+0x58>)
 80019f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_I2C1_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_I2C1_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_I2C1_Init+0x50>)
 8001a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_I2C1_Init+0x50>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_I2C1_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_I2C1_Init+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_I2C1_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_I2C1_Init+0x50>)
 8001a26:	f000 ffeb 	bl	8002a00 <HAL_I2C_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a30:	f000 fa96 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000258 	.word	0x20000258
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	000186a0 	.word	0x000186a0

08001a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <MX_SPI1_Init+0x68>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a90:	220a      	movs	r2, #10
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MX_SPI1_Init+0x64>)
 8001a96:	f002 fe95 	bl	80047c4 <HAL_SPI_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aa0:	f000 fa5e 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000378 	.word	0x20000378
 8001aac:	40013000 	.word	0x40013000

08001ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ad6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af8:	f002 fec8 	bl	800488c <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b02:	f000 fa2d 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b14:	f003 f811 	bl	8004b3a <HAL_TIM_ConfigClockSource>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b1e:	f000 fa1f 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b22:	2320      	movs	r3, #32
 8001b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b30:	f003 fa26 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b3a:	f000 fa11 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200003d0 	.word	0x200003d0

08001b4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	463b      	mov	r3, r7
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001b6a:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <MX_TIM5_Init+0x98>)
 8001b6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 59;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001b70:	223b      	movs	r2, #59	; 0x3b
 8001b72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xfffffff;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001b7c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001b80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b8e:	4814      	ldr	r0, [pc, #80]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001b90:	f002 fe7c 	bl	800488c <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f000 f9e1 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001bac:	f002 ffc5 	bl	8004b3a <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001bb6:	f000 f9d3 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bba:	2320      	movs	r3, #32
 8001bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	; (8001be0 <MX_TIM5_Init+0x94>)
 8001bc8:	f003 f9da 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001bd2:	f000 f9c5 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200002ac 	.word	0x200002ac
 8001be4:	40000c00 	.word	0x40000c00

08001be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	4ba6      	ldr	r3, [pc, #664]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4aa5      	ldr	r2, [pc, #660]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c08:	f043 0310 	orr.w	r3, r3, #16
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4ba3      	ldr	r3, [pc, #652]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	4b9f      	ldr	r3, [pc, #636]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a9e      	ldr	r2, [pc, #632]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b9c      	ldr	r3, [pc, #624]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b98      	ldr	r3, [pc, #608]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a97      	ldr	r2, [pc, #604]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b91      	ldr	r3, [pc, #580]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a90      	ldr	r2, [pc, #576]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b8e      	ldr	r3, [pc, #568]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b8a      	ldr	r3, [pc, #552]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a89      	ldr	r2, [pc, #548]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b87      	ldr	r3, [pc, #540]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b83      	ldr	r3, [pc, #524]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a82      	ldr	r2, [pc, #520]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b80      	ldr	r3, [pc, #512]	; (8001e9c <MX_GPIO_Init+0x2b4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2108      	movs	r1, #8
 8001caa:	487d      	ldr	r0, [pc, #500]	; (8001ea0 <MX_GPIO_Init+0x2b8>)
 8001cac:	f000 fe76 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	487b      	ldr	r0, [pc, #492]	; (8001ea4 <MX_GPIO_Init+0x2bc>)
 8001cb6:	f000 fe71 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FanPin_Pin|StepperMotorPin4_Pin|StepperMotorPin3_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001cc0:	4879      	ldr	r0, [pc, #484]	; (8001ea8 <MX_GPIO_Init+0x2c0>)
 8001cc2:	f000 fe6b 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, StepperMotorPin2_Pin|StepperMotorPin1_Pin|FiringPin_Pin|LD4_Pin 
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f64f 3110 	movw	r1, #64272	; 0xfb10
 8001ccc:	4877      	ldr	r0, [pc, #476]	; (8001eac <MX_GPIO_Init+0x2c4>)
 8001cce:	f000 fe65 	bl	800299c <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	486d      	ldr	r0, [pc, #436]	; (8001ea0 <MX_GPIO_Init+0x2b8>)
 8001cea:	f000 fca5 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	4867      	ldr	r0, [pc, #412]	; (8001ea4 <MX_GPIO_Init+0x2bc>)
 8001d06:	f000 fc97 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	485f      	ldr	r0, [pc, #380]	; (8001ea4 <MX_GPIO_Init+0x2bc>)
 8001d26:	f000 fc87 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d2e:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <MX_GPIO_Init+0x2c8>)
 8001d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	485d      	ldr	r0, [pc, #372]	; (8001eb4 <MX_GPIO_Init+0x2cc>)
 8001d3e:	f000 fc7b 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d42:	2310      	movs	r3, #16
 8001d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d52:	2306      	movs	r3, #6
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4855      	ldr	r0, [pc, #340]	; (8001eb4 <MX_GPIO_Init+0x2cc>)
 8001d5e:	f000 fc6b 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin ShowTempPin_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|ShowTempPin_Pin;
 8001d62:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	484c      	ldr	r0, [pc, #304]	; (8001ea8 <MX_GPIO_Init+0x2c0>)
 8001d78:	f000 fc5e 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	4843      	ldr	r0, [pc, #268]	; (8001ea8 <MX_GPIO_Init+0x2c0>)
 8001d9a:	f000 fc4d 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : FanPin_Pin StepperMotorPin4_Pin StepperMotorPin3_Pin */
  GPIO_InitStruct.Pin = FanPin_Pin|StepperMotorPin4_Pin|StepperMotorPin3_Pin;
 8001d9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	483c      	ldr	r0, [pc, #240]	; (8001ea8 <MX_GPIO_Init+0x2c0>)
 8001db8:	f000 fc3e 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : StepperMotorPin2_Pin StepperMotorPin1_Pin FiringPin_Pin LD4_Pin 
                           LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = StepperMotorPin2_Pin|StepperMotorPin1_Pin|FiringPin_Pin|LD4_Pin 
 8001dbc:	f64f 3310 	movw	r3, #64272	; 0xfb10
 8001dc0:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4835      	ldr	r0, [pc, #212]	; (8001eac <MX_GPIO_Init+0x2c4>)
 8001dd6:	f000 fc2f 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : zeroCrossing_Pin */
  GPIO_InitStruct.Pin = zeroCrossing_Pin;
 8001dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <MX_GPIO_Init+0x2d0>)
 8001de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(zeroCrossing_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	482f      	ldr	r0, [pc, #188]	; (8001eac <MX_GPIO_Init+0x2c4>)
 8001df0:	f000 fc22 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001df4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e06:	2306      	movs	r3, #6
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4824      	ldr	r0, [pc, #144]	; (8001ea4 <MX_GPIO_Init+0x2bc>)
 8001e12:	f000 fc11 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4822      	ldr	r0, [pc, #136]	; (8001eb4 <MX_GPIO_Init+0x2cc>)
 8001e2c:	f000 fc04 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001e30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e42:	230a      	movs	r3, #10
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <MX_GPIO_Init+0x2cc>)
 8001e4e:	f000 fbf3 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e52:	2320      	movs	r3, #32
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	4811      	ldr	r0, [pc, #68]	; (8001eac <MX_GPIO_Init+0x2c4>)
 8001e66:	f000 fbe7 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_GPIO_Init+0x2c8>)
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <MX_GPIO_Init+0x2b8>)
 8001e7e:	f000 fbdb 	bl	8002638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2028      	movs	r0, #40	; 0x28
 8001e88:	f000 fb9f 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e8c:	2028      	movs	r0, #40	; 0x28
 8001e8e:	f000 fbb8 	bl	8002602 <HAL_NVIC_EnableIRQ>

}
 8001e92:	bf00      	nop
 8001e94:	3730      	adds	r7, #48	; 0x30
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	10120000 	.word	0x10120000
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	10210000 	.word	0x10210000

08001ebc <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(unsigned long delay_us)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5,0);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <delay_us+0x2c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim5)<delay_us);
 8001ecc:	bf00      	nop
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <delay_us+0x2c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d8f9      	bhi.n	8001ece <delay_us+0x12>
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200002ac 	.word	0x200002ac

08001eec <delay_ms>:
void delay_ms(unsigned long delay_ms)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <delay_ms+0x2c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(&htim2)<delay_ms);
 8001efc:	bf00      	nop
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <delay_ms+0x2c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d8f9      	bhi.n	8001efe <delay_ms+0x12>

}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200003d0 	.word	0x200003d0

08001f1c <millis>:
unsigned long millis(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0

	unsigned long temp;
	temp= (unsigned long) HAL_GetTick();
 8001f22:	f000 fa49 	bl	80023b8 <HAL_GetTick>
 8001f26:	6078      	str	r0, [r7, #4]
	 return temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin==zeroCrossing_Pin)
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f44:	d103      	bne.n	8001f4e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		zero_croosing=1;//true
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_GPIO_EXTI_Callback+0x28>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
		__NOP();
	}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_EXTI_Callback+0x1c>
		__NOP();
 8001f4e:	bf00      	nop
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	20000230 	.word	0x20000230

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fae:	2007      	movs	r0, #7
 8001fb0:	f000 fb00 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_I2C_MspInit+0x84>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12c      	bne.n	800203c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001ffe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002004:	2312      	movs	r3, #18
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002010:	2304      	movs	r3, #4
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <HAL_I2C_MspInit+0x8c>)
 800201c:	f000 fb0c 	bl	8002638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_I2C_MspInit+0x88>)
 800202a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40005400 	.word	0x40005400
 8002048:	40023800 	.word	0x40023800
 800204c:	40020400 	.word	0x40020400

08002050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_SPI_MspInit+0x84>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d12b      	bne.n	80020ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_SPI_MspInit+0x88>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_SPI_MspInit+0x88>)
 800207c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_SPI_MspInit+0x88>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_SPI_MspInit+0x88>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_SPI_MspInit+0x88>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_SPI_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80020aa:	23e0      	movs	r3, #224	; 0xe0
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ba:	2305      	movs	r3, #5
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_SPI_MspInit+0x8c>)
 80020c6:	f000 fab7 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40013000 	.word	0x40013000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000

080020e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d116      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_TIM_Base_MspInit+0x80>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_TIM_Base_MspInit+0x80>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_TIM_Base_MspInit+0x80>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	201c      	movs	r0, #28
 8002114:	f000 fa59 	bl	80025ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002118:	201c      	movs	r0, #28
 800211a:	f000 fa72 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800211e:	e01a      	b.n	8002156 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_TIM_Base_MspInit+0x84>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d115      	bne.n	8002156 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_TIM_Base_MspInit+0x80>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_TIM_Base_MspInit+0x80>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_TIM_Base_MspInit+0x80>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	2032      	movs	r0, #50	; 0x32
 800214c:	f000 fa3d 	bl	80025ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002150:	2032      	movs	r0, #50	; 0x32
 8002152:	f000 fa56 	bl	8002602 <HAL_NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40000c00 	.word	0x40000c00

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 f8e8 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <TIM2_IRQHandler+0x18>)
 80021ca:	f002 fbae 	bl	800492a <HAL_TIM_IRQHandler>


	 // HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);


	  count++;
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <TIM2_IRQHandler+0x1c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a02      	ldr	r2, [pc, #8]	; (80021e0 <TIM2_IRQHandler+0x1c>)
 80021d6:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200003d0 	.word	0x200003d0
 80021e0:	20000204 	.word	0x20000204

080021e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ec:	f000 fbf0 	bl	80029d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <TIM5_IRQHandler+0x18>)
 80021fa:	f002 fb96 	bl	800492a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
 //HAL_GPIO_TogglePin(LD5_GPIO_Port,LD5_Pin);
  count_us++;
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <TIM5_IRQHandler+0x1c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	4a02      	ldr	r2, [pc, #8]	; (8002210 <TIM5_IRQHandler+0x1c>)
 8002206:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM5_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200002ac 	.word	0x200002ac
 8002210:	20000208 	.word	0x20000208

08002214 <_sbrk>:
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x50>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x16>
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <_sbrk+0x50>)
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <_sbrk+0x54>)
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <_sbrk+0x50>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <_sbrk+0x50>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	466a      	mov	r2, sp
 800223a:	4293      	cmp	r3, r2
 800223c:	d907      	bls.n	800224e <_sbrk+0x3a>
 800223e:	f002 ff33 	bl	80050a8 <__errno>
 8002242:	4602      	mov	r2, r0
 8002244:	230c      	movs	r3, #12
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224c:	e006      	b.n	800225c <_sbrk+0x48>
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <_sbrk+0x50>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a03      	ldr	r2, [pc, #12]	; (8002264 <_sbrk+0x50>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000238 	.word	0x20000238
 8002268:	20000418 	.word	0x20000418

0800226c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <SystemInit+0x28>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <SystemInit+0x28>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SystemInit+0x28>)
 8002282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002286:	609a      	str	r2, [r3, #8]
#endif
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <Reset_Handler>:
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d0 <LoopFillZerobss+0x14>
 800229c:	2100      	movs	r1, #0
 800229e:	e003      	b.n	80022a8 <LoopCopyDataInit>

080022a0 <CopyDataInit>:
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <LoopFillZerobss+0x18>)
 80022a2:	585b      	ldr	r3, [r3, r1]
 80022a4:	5043      	str	r3, [r0, r1]
 80022a6:	3104      	adds	r1, #4

080022a8 <LoopCopyDataInit>:
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <LoopFillZerobss+0x1c>)
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <LoopFillZerobss+0x20>)
 80022ac:	1842      	adds	r2, r0, r1
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3f6      	bcc.n	80022a0 <CopyDataInit>
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LoopFillZerobss+0x24>)
 80022b4:	e002      	b.n	80022bc <LoopFillZerobss>

080022b6 <FillZerobss>:
 80022b6:	2300      	movs	r3, #0
 80022b8:	f842 3b04 	str.w	r3, [r2], #4

080022bc <LoopFillZerobss>:
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <LoopFillZerobss+0x28>)
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3f9      	bcc.n	80022b6 <FillZerobss>
 80022c2:	f7ff ffd3 	bl	800226c <SystemInit>
 80022c6:	f002 fef5 	bl	80050b4 <__libc_init_array>
 80022ca:	f7ff f981 	bl	80015d0 <main>
 80022ce:	4770      	bx	lr
 80022d0:	20020000 	.word	0x20020000
 80022d4:	08008f08 	.word	0x08008f08
 80022d8:	20000000 	.word	0x20000000
 80022dc:	200001e8 	.word	0x200001e8
 80022e0:	200001e8 	.word	0x200001e8
 80022e4:	20000418 	.word	0x20000418

080022e8 <ADC_IRQHandler>:
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_Init+0x40>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_Init+0x40>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_Init+0x40>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 f94d 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f808 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff fe26 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_InitTick+0x54>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_InitTick+0x58>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f965 	bl	800261e <HAL_SYSTICK_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00e      	b.n	800237c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d80a      	bhi.n	800237a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236c:	f000 f92d 	bl	80025ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <HAL_InitTick+0x5c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000000c 	.word	0x2000000c
 8002388:	20000014 	.word	0x20000014
 800238c:	20000010 	.word	0x20000010

08002390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_IncTick+0x20>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_IncTick+0x24>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_IncTick+0x24>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000014 	.word	0x20000014
 80023b4:	20000410 	.word	0x20000410

080023b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_GetTick+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000410 	.word	0x20000410

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_Delay+0x40>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffde 	bl	80023b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000014 	.word	0x20000014

08002414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002430:	4013      	ands	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <__NVIC_GetPriorityGrouping+0x18>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	f003 0307 	and.w	r3, r3, #7
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	db0b      	blt.n	80024a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4907      	ldr	r1, [pc, #28]	; (80024b0 <__NVIC_EnableIRQ+0x38>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2001      	movs	r0, #1
 800249a:	fa00 f202 	lsl.w	r2, r0, r2
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e100 	.word	0xe000e100

080024b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	db0a      	blt.n	80024de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	490c      	ldr	r1, [pc, #48]	; (8002500 <__NVIC_SetPriority+0x4c>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	0112      	lsls	r2, r2, #4
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024dc:	e00a      	b.n	80024f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4908      	ldr	r1, [pc, #32]	; (8002504 <__NVIC_SetPriority+0x50>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	3b04      	subs	r3, #4
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	440b      	add	r3, r1
 80024f2:	761a      	strb	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000e100 	.word	0xe000e100
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f1c3 0307 	rsb	r3, r3, #7
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf28      	it	cs
 8002526:	2304      	movcs	r3, #4
 8002528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3304      	adds	r3, #4
 800252e:	2b06      	cmp	r3, #6
 8002530:	d902      	bls.n	8002538 <NVIC_EncodePriority+0x30>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3b03      	subs	r3, #3
 8002536:	e000      	b.n	800253a <NVIC_EncodePriority+0x32>
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43d9      	mvns	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	4313      	orrs	r3, r2
         );
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	; 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002580:	d301      	bcc.n	8002586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002582:	2301      	movs	r3, #1
 8002584:	e00f      	b.n	80025a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <SysTick_Config+0x40>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258e:	210f      	movs	r1, #15
 8002590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002594:	f7ff ff8e 	bl	80024b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <SysTick_Config+0x40>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SysTick_Config+0x40>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff29 	bl	8002414 <__NVIC_SetPriorityGrouping>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025dc:	f7ff ff3e 	bl	800245c <__NVIC_GetPriorityGrouping>
 80025e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7ff ff8e 	bl	8002508 <NVIC_EncodePriority>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff5d 	bl	80024b4 <__NVIC_SetPriority>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff31 	bl	8002478 <__NVIC_EnableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffa2 	bl	8002570 <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e16b      	b.n	800292c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 815a 	bne.w	8002926 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d00b      	beq.n	8002692 <HAL_GPIO_Init+0x5a>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002686:	2b11      	cmp	r3, #17
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b12      	cmp	r3, #18
 8002690:	d130      	bne.n	80026f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 0201 	and.w	r2, r3, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0xfc>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b12      	cmp	r3, #18
 8002732:	d123      	bne.n	800277c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80b4 	beq.w	8002926 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_GPIO_Init+0x308>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a5e      	ldr	r2, [pc, #376]	; (8002940 <HAL_GPIO_Init+0x308>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <HAL_GPIO_Init+0x308>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027da:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <HAL_GPIO_Init+0x30c>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a51      	ldr	r2, [pc, #324]	; (8002948 <HAL_GPIO_Init+0x310>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <HAL_GPIO_Init+0x226>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a50      	ldr	r2, [pc, #320]	; (800294c <HAL_GPIO_Init+0x314>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d025      	beq.n	800285a <HAL_GPIO_Init+0x222>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4f      	ldr	r2, [pc, #316]	; (8002950 <HAL_GPIO_Init+0x318>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <HAL_GPIO_Init+0x21e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4e      	ldr	r2, [pc, #312]	; (8002954 <HAL_GPIO_Init+0x31c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x21a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4d      	ldr	r2, [pc, #308]	; (8002958 <HAL_GPIO_Init+0x320>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x216>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4c      	ldr	r2, [pc, #304]	; (800295c <HAL_GPIO_Init+0x324>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x212>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4b      	ldr	r2, [pc, #300]	; (8002960 <HAL_GPIO_Init+0x328>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4a      	ldr	r2, [pc, #296]	; (8002964 <HAL_GPIO_Init+0x32c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x20a>
 800283e:	2307      	movs	r3, #7
 8002840:	e00e      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002842:	2308      	movs	r3, #8
 8002844:	e00c      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002846:	2306      	movs	r3, #6
 8002848:	e00a      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800284a:	2305      	movs	r3, #5
 800284c:	e008      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800284e:	2304      	movs	r3, #4
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002852:	2303      	movs	r3, #3
 8002854:	e004      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002856:	2302      	movs	r3, #2
 8002858:	e002      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800285e:	2300      	movs	r3, #0
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f002 0203 	and.w	r2, r2, #3
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	4093      	lsls	r3, r2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002870:	4934      	ldr	r1, [pc, #208]	; (8002944 <HAL_GPIO_Init+0x30c>)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287e:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_GPIO_Init+0x330>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a2:	4a31      	ldr	r2, [pc, #196]	; (8002968 <HAL_GPIO_Init+0x330>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_GPIO_Init+0x330>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028cc:	4a26      	ldr	r2, [pc, #152]	; (8002968 <HAL_GPIO_Init+0x330>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_GPIO_Init+0x330>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_GPIO_Init+0x330>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_GPIO_Init+0x330>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_GPIO_Init+0x330>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3301      	adds	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	f67f ae90 	bls.w	8002654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002934:	bf00      	nop
 8002936:	3724      	adds	r7, #36	; 0x24
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40023800 	.word	0x40023800
 8002944:	40013800 	.word	0x40013800
 8002948:	40020000 	.word	0x40020000
 800294c:	40020400 	.word	0x40020400
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40021400 	.word	0x40021400
 8002960:	40021800 	.word	0x40021800
 8002964:	40021c00 	.word	0x40021c00
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e001      	b.n	800298e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff faa0 	bl	8001f34 <HAL_GPIO_EXTI_Callback>
  }
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e11f      	b.n	8002c52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff faca 	bl	8001fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a64:	f001 fe9a 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8002a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4a7b      	ldr	r2, [pc, #492]	; (8002c5c <HAL_I2C_Init+0x25c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d807      	bhi.n	8002a84 <HAL_I2C_Init+0x84>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a7a      	ldr	r2, [pc, #488]	; (8002c60 <HAL_I2C_Init+0x260>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	bf94      	ite	ls
 8002a7c:	2301      	movls	r3, #1
 8002a7e:	2300      	movhi	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e006      	b.n	8002a92 <HAL_I2C_Init+0x92>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <HAL_I2C_Init+0x264>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bf94      	ite	ls
 8002a8c:	2301      	movls	r3, #1
 8002a8e:	2300      	movhi	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0db      	b.n	8002c52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a72      	ldr	r2, [pc, #456]	; (8002c68 <HAL_I2C_Init+0x268>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a64      	ldr	r2, [pc, #400]	; (8002c5c <HAL_I2C_Init+0x25c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d802      	bhi.n	8002ad4 <HAL_I2C_Init+0xd4>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	e009      	b.n	8002ae8 <HAL_I2C_Init+0xe8>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <HAL_I2C_Init+0x26c>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4956      	ldr	r1, [pc, #344]	; (8002c5c <HAL_I2C_Init+0x25c>)
 8002b04:	428b      	cmp	r3, r1
 8002b06:	d80d      	bhi.n	8002b24 <HAL_I2C_Init+0x124>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e59      	subs	r1, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	bf38      	it	cc
 8002b20:	2304      	movcc	r3, #4
 8002b22:	e04f      	b.n	8002bc4 <HAL_I2C_Init+0x1c4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d111      	bne.n	8002b50 <HAL_I2C_Init+0x150>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e012      	b.n	8002b76 <HAL_I2C_Init+0x176>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1e58      	subs	r0, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	0099      	lsls	r1, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x17e>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e022      	b.n	8002bc4 <HAL_I2C_Init+0x1c4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <HAL_I2C_Init+0x1a4>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1e58      	subs	r0, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	440b      	add	r3, r1
 8002b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba2:	e00f      	b.n	8002bc4 <HAL_I2C_Init+0x1c4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	0099      	lsls	r1, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6809      	ldr	r1, [r1, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6911      	ldr	r1, [r2, #16]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	000186a0 	.word	0x000186a0
 8002c60:	001e847f 	.word	0x001e847f
 8002c64:	003d08ff 	.word	0x003d08ff
 8002c68:	431bde83 	.word	0x431bde83
 8002c6c:	10624dd3 	.word	0x10624dd3

08002c70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	817b      	strh	r3, [r7, #10]
 8002c80:	4613      	mov	r3, r2
 8002c82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff fb98 	bl	80023b8 <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	f040 80e0 	bne.w	8002e58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4970      	ldr	r1, [pc, #448]	; (8002e64 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 ff62 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0d3      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2C_Master_Transmit+0x50>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0cc      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2210      	movs	r2, #16
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a50      	ldr	r2, [pc, #320]	; (8002e68 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fce8 	bl	8003704 <I2C_MasterRequestWrite>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e08d      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d54:	e066      	b.n	8002e24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 ffdc 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d11b      	bne.n	8002df8 <HAL_I2C_Master_Transmit+0x188>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	6a39      	ldr	r1, [r7, #32]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 ffcc 	bl	8003d9a <I2C_WaitOnBTFFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d107      	bne.n	8002e20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e01a      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d194      	bne.n	8002d56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	00100002 	.word	0x00100002
 8002e68:	ffff0000 	.word	0xffff0000

08002e6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	461a      	mov	r2, r3
 8002e78:	460b      	mov	r3, r1
 8002e7a:	817b      	strh	r3, [r7, #10]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff fa9a 	bl	80023b8 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	f040 820b 	bne.w	80032aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2319      	movs	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	497c      	ldr	r1, [pc, #496]	; (8003090 <HAL_I2C_Master_Receive+0x224>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fe64 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e1fe      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_Master_Receive+0x50>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e1f7      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d007      	beq.n	8002ee2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2222      	movs	r2, #34	; 0x22
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2210      	movs	r2, #16
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	893a      	ldrh	r2, [r7, #8]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a5c      	ldr	r2, [pc, #368]	; (8003094 <HAL_I2C_Master_Receive+0x228>)
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fc6c 	bl	8003808 <I2C_MasterRequestRead>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1b8      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d113      	bne.n	8002f6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e18c      	b.n	8003284 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d11b      	bne.n	8002faa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e16c      	b.n	8003284 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d11b      	bne.n	8002fea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	e14c      	b.n	8003284 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003010:	e138      	b.n	8003284 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	2b03      	cmp	r3, #3
 8003018:	f200 80f1 	bhi.w	80031fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	2b01      	cmp	r3, #1
 8003022:	d123      	bne.n	800306c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fef7 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e139      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a
 800306a:	e10b      	b.n	8003284 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b02      	cmp	r3, #2
 8003072:	d14e      	bne.n	8003112 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	2200      	movs	r2, #0
 800307c:	4906      	ldr	r1, [pc, #24]	; (8003098 <HAL_I2C_Master_Receive+0x22c>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fd74 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e10e      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
 800308e:	bf00      	nop
 8003090:	00100002 	.word	0x00100002
 8003094:	ffff0000 	.word	0xffff0000
 8003098:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003110:	e0b8      	b.n	8003284 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	2200      	movs	r2, #0
 800311a:	4966      	ldr	r1, [pc, #408]	; (80032b4 <HAL_I2C_Master_Receive+0x448>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fd25 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0bf      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	494f      	ldr	r1, [pc, #316]	; (80032b4 <HAL_I2C_Master_Receive+0x448>)
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fcf7 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e091      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031fc:	e042      	b.n	8003284 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fe0a 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e04c      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d118      	bne.n	8003284 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	f47f aec2 	bne.w	8003012 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	00010004 	.word	0x00010004

080032b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	817b      	strh	r3, [r7, #10]
 80032ca:	460b      	mov	r3, r1
 80032cc:	813b      	strh	r3, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d2:	f7ff f871 	bl	80023b8 <HAL_GetTick>
 80032d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f040 8208 	bne.w	80036f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2319      	movs	r3, #25
 80032ec:	2201      	movs	r2, #1
 80032ee:	497b      	ldr	r1, [pc, #492]	; (80034dc <HAL_I2C_Mem_Read+0x224>)
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fc3b 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	e1fb      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_I2C_Mem_Read+0x56>
 800330a:	2302      	movs	r3, #2
 800330c:	e1f4      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d007      	beq.n	8003334 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2222      	movs	r2, #34	; 0x22
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a5b      	ldr	r2, [pc, #364]	; (80034e0 <HAL_I2C_Mem_Read+0x228>)
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003376:	88f8      	ldrh	r0, [r7, #6]
 8003378:	893a      	ldrh	r2, [r7, #8]
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4603      	mov	r3, r0
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fb0a 	bl	80039a0 <I2C_RequestMemoryRead>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1b0      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d113      	bne.n	80033c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e184      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d11b      	bne.n	8003406 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e164      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b02      	cmp	r3, #2
 800340c:	d11b      	bne.n	8003446 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	e144      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800345c:	e138      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	2b03      	cmp	r3, #3
 8003464:	f200 80f1 	bhi.w	800364a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b01      	cmp	r3, #1
 800346e:	d123      	bne.n	80034b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fcd1 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e139      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b6:	e10b      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d14e      	bne.n	800355e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	2200      	movs	r2, #0
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <HAL_I2C_Mem_Read+0x22c>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fb4e 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e10e      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
 80034da:	bf00      	nop
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000
 80034e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800355c:	e0b8      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	2200      	movs	r2, #0
 8003566:	4966      	ldr	r1, [pc, #408]	; (8003700 <HAL_I2C_Mem_Read+0x448>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 faff 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0bf      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	494f      	ldr	r1, [pc, #316]	; (8003700 <HAL_I2C_Mem_Read+0x448>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fad1 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e091      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003648:	e042      	b.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fbe4 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e04c      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d118      	bne.n	80036d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f aec2 	bne.w	800345e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	00010004 	.word	0x00010004

08003704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	460b      	mov	r3, r1
 8003712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d006      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d003      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800372c:	d108      	bne.n	8003740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e00b      	b.n	8003758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	2b12      	cmp	r3, #18
 8003746:	d107      	bne.n	8003758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fa01 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e035      	b.n	80037f6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003792:	d108      	bne.n	80037a6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a2:	611a      	str	r2, [r3, #16]
 80037a4:	e01b      	b.n	80037de <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	11db      	asrs	r3, r3, #7
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 0306 	and.w	r3, r3, #6
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f063 030f 	orn	r3, r3, #15
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	490f      	ldr	r1, [pc, #60]	; (8003800 <I2C_MasterRequestWrite+0xfc>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fa28 	bl	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e010      	b.n	80037f6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037d4:	897b      	ldrh	r3, [r7, #10]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <I2C_MasterRequestWrite+0x100>)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fa18 	bl	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	00010008 	.word	0x00010008
 8003804:	00010002 	.word	0x00010002

08003808 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	460b      	mov	r3, r1
 8003816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800382c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d006      	beq.n	8003842 <I2C_MasterRequestRead+0x3a>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d003      	beq.n	8003842 <I2C_MasterRequestRead+0x3a>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003840:	d108      	bne.n	8003854 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00b      	b.n	800386c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	2b11      	cmp	r3, #17
 800385a:	d107      	bne.n	800386c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f977 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e078      	b.n	8003990 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a6:	d108      	bne.n	80038ba <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]
 80038b8:	e05e      	b.n	8003978 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038ba:	897b      	ldrh	r3, [r7, #10]
 80038bc:	11db      	asrs	r3, r3, #7
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 0306 	and.w	r3, r3, #6
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f063 030f 	orn	r3, r3, #15
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4930      	ldr	r1, [pc, #192]	; (8003998 <I2C_MasterRequestRead+0x190>)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f99e 	bl	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e053      	b.n	8003990 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4929      	ldr	r1, [pc, #164]	; (800399c <I2C_MasterRequestRead+0x194>)
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f98e 	bl	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e043      	b.n	8003990 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f916 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e017      	b.n	8003990 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003960:	897b      	ldrh	r3, [r7, #10]
 8003962:	11db      	asrs	r3, r3, #7
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 0306 	and.w	r3, r3, #6
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f063 030e 	orn	r3, r3, #14
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4907      	ldr	r1, [pc, #28]	; (800399c <I2C_MasterRequestRead+0x194>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f94b 	bl	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00010008 	.word	0x00010008
 800399c:	00010002 	.word	0x00010002

080039a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f8c0 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0a9      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	4951      	ldr	r1, [pc, #324]	; (8003b68 <I2C_RequestMemoryRead+0x1c8>)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f8f9 	bl	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e096      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	6a39      	ldr	r1, [r7, #32]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f963 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00d      	beq.n	8003a74 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d107      	bne.n	8003a70 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e075      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]
 8003a84:	e021      	b.n	8003aca <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a86:	893b      	ldrh	r3, [r7, #8]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	6a39      	ldr	r1, [r7, #32]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f93d 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d107      	bne.n	8003abc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04f      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f922 	bl	8003d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e034      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f82a 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e013      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b38:	897b      	ldrh	r3, [r7, #10]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	6a3a      	ldr	r2, [r7, #32]
 8003b4c:	4906      	ldr	r1, [pc, #24]	; (8003b68 <I2C_RequestMemoryRead+0x1c8>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f863 	bl	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	00010002 	.word	0x00010002

08003b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7c:	e025      	b.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b84:	d021      	beq.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7fe fc17 	bl	80023b8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d116      	bne.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e023      	b.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10d      	bne.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	e00c      	b.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d0b6      	beq.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c28:	e051      	b.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c38:	d123      	bne.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f043 0204 	orr.w	r2, r3, #4
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e046      	b.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c88:	d021      	beq.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fe fb95 	bl	80023b8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d116      	bne.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e020      	b.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10c      	bne.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	e00b      	b.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d18d      	bne.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d24:	e02d      	b.n	8003d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f8ce 	bl	8003ec8 <I2C_IsAcknowledgeFailed>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e02d      	b.n	8003d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3c:	d021      	beq.n	8003d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fe fb3b 	bl	80023b8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d116      	bne.n	8003d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e007      	b.n	8003d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b80      	cmp	r3, #128	; 0x80
 8003d8e:	d1ca      	bne.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da6:	e02d      	b.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f88d 	bl	8003ec8 <I2C_IsAcknowledgeFailed>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e02d      	b.n	8003e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dbe:	d021      	beq.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc0:	f7fe fafa 	bl	80023b8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d302      	bcc.n	8003dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d1ca      	bne.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e28:	e042      	b.n	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d119      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e029      	b.n	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7fe faa4 	bl	80023b8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d116      	bne.n	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e007      	b.n	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d1b5      	bne.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ede:	d11b      	bne.n	8003f18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 0204 	orr.w	r2, r3, #4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e25b      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d075      	beq.n	8004032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f46:	4ba3      	ldr	r3, [pc, #652]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d00c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f52:	4ba0      	ldr	r3, [pc, #640]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d112      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4b9d      	ldr	r3, [pc, #628]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6a:	d10b      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	4b99      	ldr	r3, [pc, #612]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d05b      	beq.n	8004030 <HAL_RCC_OscConfig+0x108>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d157      	bne.n	8004030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e236      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d106      	bne.n	8003f9c <HAL_RCC_OscConfig+0x74>
 8003f8e:	4b91      	ldr	r3, [pc, #580]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a90      	ldr	r2, [pc, #576]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e01d      	b.n	8003fd8 <HAL_RCC_OscConfig+0xb0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x98>
 8003fa6:	4b8b      	ldr	r3, [pc, #556]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a8a      	ldr	r2, [pc, #552]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a87      	ldr	r2, [pc, #540]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0xb0>
 8003fc0:	4b84      	ldr	r3, [pc, #528]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a83      	ldr	r2, [pc, #524]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a80      	ldr	r2, [pc, #512]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d013      	beq.n	8004008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe f9ea 	bl	80023b8 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fe f9e6 	bl	80023b8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1fb      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xc0>
 8004006:	e014      	b.n	8004032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe f9d6 	bl	80023b8 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe f9d2 	bl	80023b8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e1e7      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004022:	4b6c      	ldr	r3, [pc, #432]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0xe8>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d063      	beq.n	8004106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403e:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404a:	4b62      	ldr	r3, [pc, #392]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004052:	2b08      	cmp	r3, #8
 8004054:	d11c      	bne.n	8004090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d116      	bne.n	8004090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_RCC_OscConfig+0x152>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e1bb      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407a:	4b56      	ldr	r3, [pc, #344]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4952      	ldr	r1, [pc, #328]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	e03a      	b.n	8004106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004098:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_RCC_OscConfig+0x2b0>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fe f98b 	bl	80023b8 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a6:	f7fe f987 	bl	80023b8 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e19c      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b8:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c4:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4940      	ldr	r1, [pc, #256]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
 80040d8:	e015      	b.n	8004106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCC_OscConfig+0x2b0>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe f96a 	bl	80023b8 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e8:	f7fe f966 	bl	80023b8 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e17b      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fa:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d030      	beq.n	8004174 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411a:	4b30      	ldr	r3, [pc, #192]	; (80041dc <HAL_RCC_OscConfig+0x2b4>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fe f94a 	bl	80023b8 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004128:	f7fe f946 	bl	80023b8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e15b      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413a:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x200>
 8004146:	e015      	b.n	8004174 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004148:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HAL_RCC_OscConfig+0x2b4>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414e:	f7fe f933 	bl	80023b8 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004156:	f7fe f92f 	bl	80023b8 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e144      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a0 	beq.w	80042c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x2b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d121      	bne.n	8004202 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <HAL_RCC_OscConfig+0x2b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a07      	ldr	r2, [pc, #28]	; (80041e0 <HAL_RCC_OscConfig+0x2b8>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ca:	f7fe f8f5 	bl	80023b8 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	e011      	b.n	80041f6 <HAL_RCC_OscConfig+0x2ce>
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800
 80041d8:	42470000 	.word	0x42470000
 80041dc:	42470e80 	.word	0x42470e80
 80041e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e4:	f7fe f8e8 	bl	80023b8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0fd      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b81      	ldr	r3, [pc, #516]	; (80043fc <HAL_RCC_OscConfig+0x4d4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d106      	bne.n	8004218 <HAL_RCC_OscConfig+0x2f0>
 800420a:	4b7d      	ldr	r3, [pc, #500]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a7c      	ldr	r2, [pc, #496]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	e01c      	b.n	8004252 <HAL_RCC_OscConfig+0x32a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d10c      	bne.n	800423a <HAL_RCC_OscConfig+0x312>
 8004220:	4b77      	ldr	r3, [pc, #476]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a76      	ldr	r2, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	4b74      	ldr	r3, [pc, #464]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a73      	ldr	r2, [pc, #460]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e00b      	b.n	8004252 <HAL_RCC_OscConfig+0x32a>
 800423a:	4b71      	ldr	r3, [pc, #452]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a70      	ldr	r2, [pc, #448]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
 8004246:	4b6e      	ldr	r3, [pc, #440]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a6d      	ldr	r2, [pc, #436]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d015      	beq.n	8004286 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fe f8ad 	bl	80023b8 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fe f8a9 	bl	80023b8 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0bc      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	4b61      	ldr	r3, [pc, #388]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0ee      	beq.n	8004262 <HAL_RCC_OscConfig+0x33a>
 8004284:	e014      	b.n	80042b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7fe f897 	bl	80023b8 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fe f893 	bl	80023b8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0a6      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a4:	4b56      	ldr	r3, [pc, #344]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ee      	bne.n	800428e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d105      	bne.n	80042c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b6:	4b52      	ldr	r3, [pc, #328]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	4a51      	ldr	r2, [pc, #324]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8092 	beq.w	80043f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042cc:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d05c      	beq.n	8004392 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d141      	bne.n	8004364 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e0:	4b48      	ldr	r3, [pc, #288]	; (8004404 <HAL_RCC_OscConfig+0x4dc>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fe f867 	bl	80023b8 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe f863 	bl	80023b8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e078      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004300:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	019b      	lsls	r3, r3, #6
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	3b01      	subs	r3, #1
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	4933      	ldr	r1, [pc, #204]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004336:	4b33      	ldr	r3, [pc, #204]	; (8004404 <HAL_RCC_OscConfig+0x4dc>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe f83c 	bl	80023b8 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004344:	f7fe f838 	bl	80023b8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e04d      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x41c>
 8004362:	e045      	b.n	80043f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x4dc>)
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fe f825 	bl	80023b8 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004372:	f7fe f821 	bl	80023b8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e036      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x44a>
 8004390:	e02e      	b.n	80043f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e029      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <HAL_RCC_OscConfig+0x4d8>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d11c      	bne.n	80043ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d115      	bne.n	80043ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043c6:	4013      	ands	r3, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10d      	bne.n	80043ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d106      	bne.n	80043ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40007000 	.word	0x40007000
 8004400:	40023800 	.word	0x40023800
 8004404:	42470060 	.word	0x42470060

08004408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0cc      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800441c:	4b68      	ldr	r3, [pc, #416]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d90c      	bls.n	8004444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b63      	ldr	r3, [pc, #396]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0b8      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800445c:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004474:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a52      	ldr	r2, [pc, #328]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800447e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	494d      	ldr	r1, [pc, #308]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d044      	beq.n	8004528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d119      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c6:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e06f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d6:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e067      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044e6:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4934      	ldr	r1, [pc, #208]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f8:	f7fd ff5e 	bl	80023b8 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004500:	f7fd ff5a 	bl	80023b8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e04f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 020c 	and.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	429a      	cmp	r2, r3
 8004526:	d1eb      	bne.n	8004500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d20c      	bcs.n	8004550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e032      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4916      	ldr	r1, [pc, #88]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	490e      	ldr	r1, [pc, #56]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800458e:	f000 f821 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004592:	4601      	mov	r1, r0
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	fa21 f303 	lsr.w	r3, r1, r3
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd febe 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023c00 	.word	0x40023c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08008c2c 	.word	0x08008c2c
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	20000010 	.word	0x20000010

080045d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d007      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x32>
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d008      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x38>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 80b4 	bne.w	8004768 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b5e      	ldr	r3, [pc, #376]	; (800477c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004602:	60bb      	str	r3, [r7, #8]
       break;
 8004604:	e0b3      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004606:	4b5e      	ldr	r3, [pc, #376]	; (8004780 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004608:	60bb      	str	r3, [r7, #8]
      break;
 800460a:	e0b0      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800460c:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004614:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004616:	4b58      	ldr	r3, [pc, #352]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d04a      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004622:	4b55      	ldr	r3, [pc, #340]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	099b      	lsrs	r3, r3, #6
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	ea03 0501 	and.w	r5, r3, r1
 8004638:	ea04 0602 	and.w	r6, r4, r2
 800463c:	4629      	mov	r1, r5
 800463e:	4632      	mov	r2, r6
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	0154      	lsls	r4, r2, #5
 800464a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800464e:	014b      	lsls	r3, r1, #5
 8004650:	4619      	mov	r1, r3
 8004652:	4622      	mov	r2, r4
 8004654:	1b49      	subs	r1, r1, r5
 8004656:	eb62 0206 	sbc.w	r2, r2, r6
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	f04f 0400 	mov.w	r4, #0
 8004662:	0194      	lsls	r4, r2, #6
 8004664:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004668:	018b      	lsls	r3, r1, #6
 800466a:	1a5b      	subs	r3, r3, r1
 800466c:	eb64 0402 	sbc.w	r4, r4, r2
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	00e2      	lsls	r2, r4, #3
 800467a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800467e:	00d9      	lsls	r1, r3, #3
 8004680:	460b      	mov	r3, r1
 8004682:	4614      	mov	r4, r2
 8004684:	195b      	adds	r3, r3, r5
 8004686:	eb44 0406 	adc.w	r4, r4, r6
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	0262      	lsls	r2, r4, #9
 8004694:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004698:	0259      	lsls	r1, r3, #9
 800469a:	460b      	mov	r3, r1
 800469c:	4614      	mov	r4, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	4621      	mov	r1, r4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	461a      	mov	r2, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	f7fc faec 	bl	8000c88 <__aeabi_uldivmod>
 80046b0:	4603      	mov	r3, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e049      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b8:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	f04f 0400 	mov.w	r4, #0
 80046c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	ea03 0501 	and.w	r5, r3, r1
 80046ce:	ea04 0602 	and.w	r6, r4, r2
 80046d2:	4629      	mov	r1, r5
 80046d4:	4632      	mov	r2, r6
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	f04f 0400 	mov.w	r4, #0
 80046de:	0154      	lsls	r4, r2, #5
 80046e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046e4:	014b      	lsls	r3, r1, #5
 80046e6:	4619      	mov	r1, r3
 80046e8:	4622      	mov	r2, r4
 80046ea:	1b49      	subs	r1, r1, r5
 80046ec:	eb62 0206 	sbc.w	r2, r2, r6
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	f04f 0400 	mov.w	r4, #0
 80046f8:	0194      	lsls	r4, r2, #6
 80046fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046fe:	018b      	lsls	r3, r1, #6
 8004700:	1a5b      	subs	r3, r3, r1
 8004702:	eb64 0402 	sbc.w	r4, r4, r2
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	00e2      	lsls	r2, r4, #3
 8004710:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004714:	00d9      	lsls	r1, r3, #3
 8004716:	460b      	mov	r3, r1
 8004718:	4614      	mov	r4, r2
 800471a:	195b      	adds	r3, r3, r5
 800471c:	eb44 0406 	adc.w	r4, r4, r6
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	02a2      	lsls	r2, r4, #10
 800472a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800472e:	0299      	lsls	r1, r3, #10
 8004730:	460b      	mov	r3, r1
 8004732:	4614      	mov	r4, r2
 8004734:	4618      	mov	r0, r3
 8004736:	4621      	mov	r1, r4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f04f 0400 	mov.w	r4, #0
 800473e:	461a      	mov	r2, r3
 8004740:	4623      	mov	r3, r4
 8004742:	f7fc faa1 	bl	8000c88 <__aeabi_uldivmod>
 8004746:	4603      	mov	r3, r0
 8004748:	460c      	mov	r4, r1
 800474a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	3301      	adds	r3, #1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	60bb      	str	r3, [r7, #8]
      break;
 8004766:	e002      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800476a:	60bb      	str	r3, [r7, #8]
      break;
 800476c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476e:	68bb      	ldr	r3, [r7, #8]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	00f42400 	.word	0x00f42400
 8004780:	007a1200 	.word	0x007a1200

08004784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_RCC_GetHCLKFreq+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000000c 	.word	0x2000000c

0800479c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a0:	f7ff fff0 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047a4:	4601      	mov	r1, r0
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	0a9b      	lsrs	r3, r3, #10
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4a03      	ldr	r2, [pc, #12]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	08008c3c 	.word	0x08008c3c

080047c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e056      	b.n	8004884 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fd fc2d 	bl	8002050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	ea42 0103 	orr.w	r1, r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 0104 	and.w	r1, r3, #4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004872:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e01d      	b.n	80048da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fd fc14 	bl	80020e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 fa1e 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d007      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d122      	bne.n	8004986 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d11b      	bne.n	8004986 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0202 	mvn.w	r2, #2
 8004956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f9af 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 8004972:	e005      	b.n	8004980 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f9a1 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9b2 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d122      	bne.n	80049da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0204 	mvn.w	r2, #4
 80049aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f985 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 80049c6:	e005      	b.n	80049d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f977 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f988 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d122      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11b      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0208 	mvn.w	r2, #8
 80049fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f95b 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 8004a1a:	e005      	b.n	8004a28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f94d 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f95e 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d122      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d11b      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0210 	mvn.w	r2, #16
 8004a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f931 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 8004a6e:	e005      	b.n	8004a7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f923 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f934 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10e      	bne.n	8004aae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0201 	mvn.w	r2, #1
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8fd 	bl	8004ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d10e      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fad9 	bl	800508c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d10e      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d107      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8f9 	bl	8004cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d10e      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d107      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0220 	mvn.w	r2, #32
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 faa3 	bl	8005078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_ConfigClockSource+0x18>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e0a6      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x166>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b70:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b78:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d067      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x120>
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d80b      	bhi.n	8004ba6 <HAL_TIM_ConfigClockSource+0x6c>
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d073      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x140>
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d802      	bhi.n	8004b9c <HAL_TIM_ConfigClockSource+0x62>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d06f      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b9a:	e078      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d06c      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x140>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d06a      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ba4:	e073      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ba6:	2b70      	cmp	r3, #112	; 0x70
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x8c>
 8004baa:	2b70      	cmp	r3, #112	; 0x70
 8004bac:	d804      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x7e>
 8004bae:	2b50      	cmp	r3, #80	; 0x50
 8004bb0:	d033      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0xe0>
 8004bb2:	2b60      	cmp	r3, #96	; 0x60
 8004bb4:	d041      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004bb6:	e06a      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbc:	d066      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0x152>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d017      	beq.n	8004bf4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004bc4:	e063      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6899      	ldr	r1, [r3, #8]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f000 f9b3 	bl	8004f40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	609a      	str	r2, [r3, #8]
      break;
 8004bf2:	e04c      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	6899      	ldr	r1, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f000 f99c 	bl	8004f40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c16:	609a      	str	r2, [r3, #8]
      break;
 8004c18:	e039      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f000 f910 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2150      	movs	r1, #80	; 0x50
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f969 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004c38:	e029      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f000 f92f 	bl	8004eaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2160      	movs	r1, #96	; 0x60
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f959 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004c58:	e019      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 f8f0 	bl	8004e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f949 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004c78:	e009      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f000 f940 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 8004c8a:	e000      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3d      	ldr	r2, [pc, #244]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3b      	ldr	r2, [pc, #236]	; (8004e2c <TIM_Base_SetConfig+0x120>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2f      	ldr	r2, [pc, #188]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d027      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d023      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <TIM_Base_SetConfig+0x120>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <TIM_Base_SetConfig+0x128>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a27      	ldr	r2, [pc, #156]	; (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <TIM_Base_SetConfig+0x130>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <TIM_Base_SetConfig+0x134>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <TIM_Base_SetConfig+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40010400 	.word	0x40010400
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40014400 	.word	0x40014400
 8004e3c:	40014800 	.word	0x40014800
 8004e40:	40001800 	.word	0x40001800
 8004e44:	40001c00 	.word	0x40001c00
 8004e48:	40002000 	.word	0x40002000

08004e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 030a 	bic.w	r3, r3, #10
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0210 	bic.w	r2, r3, #16
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f043 0307 	orr.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e05a      	b.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a21      	ldr	r2, [pc, #132]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d01d      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d018      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1a      	ldr	r2, [pc, #104]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a18      	ldr	r2, [pc, #96]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a17      	ldr	r2, [pc, #92]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a15      	ldr	r2, [pc, #84]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10c      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	4313      	orrs	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40010400 	.word	0x40010400
 8005070:	40014000 	.word	0x40014000
 8005074:	40001800 	.word	0x40001800

08005078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <atof>:
 80050a0:	2100      	movs	r1, #0
 80050a2:	f001 bcb9 	b.w	8006a18 <strtod>
	...

080050a8 <__errno>:
 80050a8:	4b01      	ldr	r3, [pc, #4]	; (80050b0 <__errno+0x8>)
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000018 	.word	0x20000018

080050b4 <__libc_init_array>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	4e0d      	ldr	r6, [pc, #52]	; (80050ec <__libc_init_array+0x38>)
 80050b8:	4c0d      	ldr	r4, [pc, #52]	; (80050f0 <__libc_init_array+0x3c>)
 80050ba:	1ba4      	subs	r4, r4, r6
 80050bc:	10a4      	asrs	r4, r4, #2
 80050be:	2500      	movs	r5, #0
 80050c0:	42a5      	cmp	r5, r4
 80050c2:	d109      	bne.n	80050d8 <__libc_init_array+0x24>
 80050c4:	4e0b      	ldr	r6, [pc, #44]	; (80050f4 <__libc_init_array+0x40>)
 80050c6:	4c0c      	ldr	r4, [pc, #48]	; (80050f8 <__libc_init_array+0x44>)
 80050c8:	f003 fd6c 	bl	8008ba4 <_init>
 80050cc:	1ba4      	subs	r4, r4, r6
 80050ce:	10a4      	asrs	r4, r4, #2
 80050d0:	2500      	movs	r5, #0
 80050d2:	42a5      	cmp	r5, r4
 80050d4:	d105      	bne.n	80050e2 <__libc_init_array+0x2e>
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050dc:	4798      	blx	r3
 80050de:	3501      	adds	r5, #1
 80050e0:	e7ee      	b.n	80050c0 <__libc_init_array+0xc>
 80050e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050e6:	4798      	blx	r3
 80050e8:	3501      	adds	r5, #1
 80050ea:	e7f2      	b.n	80050d2 <__libc_init_array+0x1e>
 80050ec:	08008f00 	.word	0x08008f00
 80050f0:	08008f00 	.word	0x08008f00
 80050f4:	08008f00 	.word	0x08008f00
 80050f8:	08008f04 	.word	0x08008f04

080050fc <memset>:
 80050fc:	4402      	add	r2, r0
 80050fe:	4603      	mov	r3, r0
 8005100:	4293      	cmp	r3, r2
 8005102:	d100      	bne.n	8005106 <memset+0xa>
 8005104:	4770      	bx	lr
 8005106:	f803 1b01 	strb.w	r1, [r3], #1
 800510a:	e7f9      	b.n	8005100 <memset+0x4>

0800510c <__cvt>:
 800510c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	ec55 4b10 	vmov	r4, r5, d0
 8005114:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005116:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800511a:	2d00      	cmp	r5, #0
 800511c:	460e      	mov	r6, r1
 800511e:	4691      	mov	r9, r2
 8005120:	4619      	mov	r1, r3
 8005122:	bfb8      	it	lt
 8005124:	4622      	movlt	r2, r4
 8005126:	462b      	mov	r3, r5
 8005128:	f027 0720 	bic.w	r7, r7, #32
 800512c:	bfbb      	ittet	lt
 800512e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005132:	461d      	movlt	r5, r3
 8005134:	2300      	movge	r3, #0
 8005136:	232d      	movlt	r3, #45	; 0x2d
 8005138:	bfb8      	it	lt
 800513a:	4614      	movlt	r4, r2
 800513c:	2f46      	cmp	r7, #70	; 0x46
 800513e:	700b      	strb	r3, [r1, #0]
 8005140:	d004      	beq.n	800514c <__cvt+0x40>
 8005142:	2f45      	cmp	r7, #69	; 0x45
 8005144:	d100      	bne.n	8005148 <__cvt+0x3c>
 8005146:	3601      	adds	r6, #1
 8005148:	2102      	movs	r1, #2
 800514a:	e000      	b.n	800514e <__cvt+0x42>
 800514c:	2103      	movs	r1, #3
 800514e:	ab03      	add	r3, sp, #12
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	ab02      	add	r3, sp, #8
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	4632      	mov	r2, r6
 8005158:	4653      	mov	r3, sl
 800515a:	ec45 4b10 	vmov	d0, r4, r5
 800515e:	f001 fd8b 	bl	8006c78 <_dtoa_r>
 8005162:	2f47      	cmp	r7, #71	; 0x47
 8005164:	4680      	mov	r8, r0
 8005166:	d102      	bne.n	800516e <__cvt+0x62>
 8005168:	f019 0f01 	tst.w	r9, #1
 800516c:	d026      	beq.n	80051bc <__cvt+0xb0>
 800516e:	2f46      	cmp	r7, #70	; 0x46
 8005170:	eb08 0906 	add.w	r9, r8, r6
 8005174:	d111      	bne.n	800519a <__cvt+0x8e>
 8005176:	f898 3000 	ldrb.w	r3, [r8]
 800517a:	2b30      	cmp	r3, #48	; 0x30
 800517c:	d10a      	bne.n	8005194 <__cvt+0x88>
 800517e:	2200      	movs	r2, #0
 8005180:	2300      	movs	r3, #0
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800518a:	b918      	cbnz	r0, 8005194 <__cvt+0x88>
 800518c:	f1c6 0601 	rsb	r6, r6, #1
 8005190:	f8ca 6000 	str.w	r6, [sl]
 8005194:	f8da 3000 	ldr.w	r3, [sl]
 8005198:	4499      	add	r9, r3
 800519a:	2200      	movs	r2, #0
 800519c:	2300      	movs	r3, #0
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	f7fb fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 80051a6:	b938      	cbnz	r0, 80051b8 <__cvt+0xac>
 80051a8:	2230      	movs	r2, #48	; 0x30
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	454b      	cmp	r3, r9
 80051ae:	d205      	bcs.n	80051bc <__cvt+0xb0>
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	9103      	str	r1, [sp, #12]
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e7f8      	b.n	80051aa <__cvt+0x9e>
 80051b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051c0:	eba3 0308 	sub.w	r3, r3, r8
 80051c4:	4640      	mov	r0, r8
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	b004      	add	sp, #16
 80051ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080051ce <__exponent>:
 80051ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051d0:	2900      	cmp	r1, #0
 80051d2:	4604      	mov	r4, r0
 80051d4:	bfba      	itte	lt
 80051d6:	4249      	neglt	r1, r1
 80051d8:	232d      	movlt	r3, #45	; 0x2d
 80051da:	232b      	movge	r3, #43	; 0x2b
 80051dc:	2909      	cmp	r1, #9
 80051de:	f804 2b02 	strb.w	r2, [r4], #2
 80051e2:	7043      	strb	r3, [r0, #1]
 80051e4:	dd20      	ble.n	8005228 <__exponent+0x5a>
 80051e6:	f10d 0307 	add.w	r3, sp, #7
 80051ea:	461f      	mov	r7, r3
 80051ec:	260a      	movs	r6, #10
 80051ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80051f2:	fb06 1115 	mls	r1, r6, r5, r1
 80051f6:	3130      	adds	r1, #48	; 0x30
 80051f8:	2d09      	cmp	r5, #9
 80051fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051fe:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005202:	4629      	mov	r1, r5
 8005204:	dc09      	bgt.n	800521a <__exponent+0x4c>
 8005206:	3130      	adds	r1, #48	; 0x30
 8005208:	3b02      	subs	r3, #2
 800520a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800520e:	42bb      	cmp	r3, r7
 8005210:	4622      	mov	r2, r4
 8005212:	d304      	bcc.n	800521e <__exponent+0x50>
 8005214:	1a10      	subs	r0, r2, r0
 8005216:	b003      	add	sp, #12
 8005218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800521a:	4613      	mov	r3, r2
 800521c:	e7e7      	b.n	80051ee <__exponent+0x20>
 800521e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005222:	f804 2b01 	strb.w	r2, [r4], #1
 8005226:	e7f2      	b.n	800520e <__exponent+0x40>
 8005228:	2330      	movs	r3, #48	; 0x30
 800522a:	4419      	add	r1, r3
 800522c:	7083      	strb	r3, [r0, #2]
 800522e:	1d02      	adds	r2, r0, #4
 8005230:	70c1      	strb	r1, [r0, #3]
 8005232:	e7ef      	b.n	8005214 <__exponent+0x46>

08005234 <_printf_float>:
 8005234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	b08d      	sub	sp, #52	; 0x34
 800523a:	460c      	mov	r4, r1
 800523c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005240:	4616      	mov	r6, r2
 8005242:	461f      	mov	r7, r3
 8005244:	4605      	mov	r5, r0
 8005246:	f002 fdfb 	bl	8007e40 <_localeconv_r>
 800524a:	6803      	ldr	r3, [r0, #0]
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fa ffbe 	bl	80001d0 <strlen>
 8005254:	2300      	movs	r3, #0
 8005256:	930a      	str	r3, [sp, #40]	; 0x28
 8005258:	f8d8 3000 	ldr.w	r3, [r8]
 800525c:	9005      	str	r0, [sp, #20]
 800525e:	3307      	adds	r3, #7
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	f103 0208 	add.w	r2, r3, #8
 8005268:	f894 a018 	ldrb.w	sl, [r4, #24]
 800526c:	f8d4 b000 	ldr.w	fp, [r4]
 8005270:	f8c8 2000 	str.w	r2, [r8]
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800527c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005280:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005284:	9307      	str	r3, [sp, #28]
 8005286:	f8cd 8018 	str.w	r8, [sp, #24]
 800528a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800528e:	4ba7      	ldr	r3, [pc, #668]	; (800552c <_printf_float+0x2f8>)
 8005290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005294:	f7fb fc4a 	bl	8000b2c <__aeabi_dcmpun>
 8005298:	bb70      	cbnz	r0, 80052f8 <_printf_float+0xc4>
 800529a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800529e:	4ba3      	ldr	r3, [pc, #652]	; (800552c <_printf_float+0x2f8>)
 80052a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052a4:	f7fb fc24 	bl	8000af0 <__aeabi_dcmple>
 80052a8:	bb30      	cbnz	r0, 80052f8 <_printf_float+0xc4>
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fb fc13 	bl	8000adc <__aeabi_dcmplt>
 80052b6:	b110      	cbz	r0, 80052be <_printf_float+0x8a>
 80052b8:	232d      	movs	r3, #45	; 0x2d
 80052ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052be:	4a9c      	ldr	r2, [pc, #624]	; (8005530 <_printf_float+0x2fc>)
 80052c0:	4b9c      	ldr	r3, [pc, #624]	; (8005534 <_printf_float+0x300>)
 80052c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80052c6:	bf8c      	ite	hi
 80052c8:	4690      	movhi	r8, r2
 80052ca:	4698      	movls	r8, r3
 80052cc:	2303      	movs	r3, #3
 80052ce:	f02b 0204 	bic.w	r2, fp, #4
 80052d2:	6123      	str	r3, [r4, #16]
 80052d4:	6022      	str	r2, [r4, #0]
 80052d6:	f04f 0900 	mov.w	r9, #0
 80052da:	9700      	str	r7, [sp, #0]
 80052dc:	4633      	mov	r3, r6
 80052de:	aa0b      	add	r2, sp, #44	; 0x2c
 80052e0:	4621      	mov	r1, r4
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 f9e6 	bl	80056b4 <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	f040 808d 	bne.w	8005408 <_printf_float+0x1d4>
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f2:	b00d      	add	sp, #52	; 0x34
 80052f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	4640      	mov	r0, r8
 80052fe:	4649      	mov	r1, r9
 8005300:	f7fb fc14 	bl	8000b2c <__aeabi_dcmpun>
 8005304:	b110      	cbz	r0, 800530c <_printf_float+0xd8>
 8005306:	4a8c      	ldr	r2, [pc, #560]	; (8005538 <_printf_float+0x304>)
 8005308:	4b8c      	ldr	r3, [pc, #560]	; (800553c <_printf_float+0x308>)
 800530a:	e7da      	b.n	80052c2 <_printf_float+0x8e>
 800530c:	6861      	ldr	r1, [r4, #4]
 800530e:	1c4b      	adds	r3, r1, #1
 8005310:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005314:	a80a      	add	r0, sp, #40	; 0x28
 8005316:	d13e      	bne.n	8005396 <_printf_float+0x162>
 8005318:	2306      	movs	r3, #6
 800531a:	6063      	str	r3, [r4, #4]
 800531c:	2300      	movs	r3, #0
 800531e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005322:	ab09      	add	r3, sp, #36	; 0x24
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	ec49 8b10 	vmov	d0, r8, r9
 800532a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800532e:	6022      	str	r2, [r4, #0]
 8005330:	f8cd a004 	str.w	sl, [sp, #4]
 8005334:	6861      	ldr	r1, [r4, #4]
 8005336:	4628      	mov	r0, r5
 8005338:	f7ff fee8 	bl	800510c <__cvt>
 800533c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005340:	2b47      	cmp	r3, #71	; 0x47
 8005342:	4680      	mov	r8, r0
 8005344:	d109      	bne.n	800535a <_printf_float+0x126>
 8005346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005348:	1cd8      	adds	r0, r3, #3
 800534a:	db02      	blt.n	8005352 <_printf_float+0x11e>
 800534c:	6862      	ldr	r2, [r4, #4]
 800534e:	4293      	cmp	r3, r2
 8005350:	dd47      	ble.n	80053e2 <_printf_float+0x1ae>
 8005352:	f1aa 0a02 	sub.w	sl, sl, #2
 8005356:	fa5f fa8a 	uxtb.w	sl, sl
 800535a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800535e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005360:	d824      	bhi.n	80053ac <_printf_float+0x178>
 8005362:	3901      	subs	r1, #1
 8005364:	4652      	mov	r2, sl
 8005366:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800536a:	9109      	str	r1, [sp, #36]	; 0x24
 800536c:	f7ff ff2f 	bl	80051ce <__exponent>
 8005370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005372:	1813      	adds	r3, r2, r0
 8005374:	2a01      	cmp	r2, #1
 8005376:	4681      	mov	r9, r0
 8005378:	6123      	str	r3, [r4, #16]
 800537a:	dc02      	bgt.n	8005382 <_printf_float+0x14e>
 800537c:	6822      	ldr	r2, [r4, #0]
 800537e:	07d1      	lsls	r1, r2, #31
 8005380:	d501      	bpl.n	8005386 <_printf_float+0x152>
 8005382:	3301      	adds	r3, #1
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0a5      	beq.n	80052da <_printf_float+0xa6>
 800538e:	232d      	movs	r3, #45	; 0x2d
 8005390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005394:	e7a1      	b.n	80052da <_printf_float+0xa6>
 8005396:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800539a:	f000 8177 	beq.w	800568c <_printf_float+0x458>
 800539e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80053a2:	d1bb      	bne.n	800531c <_printf_float+0xe8>
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d1b9      	bne.n	800531c <_printf_float+0xe8>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e7b6      	b.n	800531a <_printf_float+0xe6>
 80053ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80053b0:	d119      	bne.n	80053e6 <_printf_float+0x1b2>
 80053b2:	2900      	cmp	r1, #0
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	dd0c      	ble.n	80053d2 <_printf_float+0x19e>
 80053b8:	6121      	str	r1, [r4, #16]
 80053ba:	b913      	cbnz	r3, 80053c2 <_printf_float+0x18e>
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	07d2      	lsls	r2, r2, #31
 80053c0:	d502      	bpl.n	80053c8 <_printf_float+0x194>
 80053c2:	3301      	adds	r3, #1
 80053c4:	440b      	add	r3, r1
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	e7d9      	b.n	8005386 <_printf_float+0x152>
 80053d2:	b913      	cbnz	r3, 80053da <_printf_float+0x1a6>
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	07d0      	lsls	r0, r2, #31
 80053d8:	d501      	bpl.n	80053de <_printf_float+0x1aa>
 80053da:	3302      	adds	r3, #2
 80053dc:	e7f3      	b.n	80053c6 <_printf_float+0x192>
 80053de:	2301      	movs	r3, #1
 80053e0:	e7f1      	b.n	80053c6 <_printf_float+0x192>
 80053e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80053e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80053ea:	4293      	cmp	r3, r2
 80053ec:	db05      	blt.n	80053fa <_printf_float+0x1c6>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	07d1      	lsls	r1, r2, #31
 80053f4:	d5e8      	bpl.n	80053c8 <_printf_float+0x194>
 80053f6:	3301      	adds	r3, #1
 80053f8:	e7e5      	b.n	80053c6 <_printf_float+0x192>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfd4      	ite	le
 80053fe:	f1c3 0302 	rsble	r3, r3, #2
 8005402:	2301      	movgt	r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	e7de      	b.n	80053c6 <_printf_float+0x192>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	055a      	lsls	r2, r3, #21
 800540c:	d407      	bmi.n	800541e <_printf_float+0x1ea>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	4642      	mov	r2, r8
 8005412:	4631      	mov	r1, r6
 8005414:	4628      	mov	r0, r5
 8005416:	47b8      	blx	r7
 8005418:	3001      	adds	r0, #1
 800541a:	d12b      	bne.n	8005474 <_printf_float+0x240>
 800541c:	e767      	b.n	80052ee <_printf_float+0xba>
 800541e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005422:	f240 80dc 	bls.w	80055de <_printf_float+0x3aa>
 8005426:	2200      	movs	r2, #0
 8005428:	2300      	movs	r3, #0
 800542a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800542e:	f7fb fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005432:	2800      	cmp	r0, #0
 8005434:	d033      	beq.n	800549e <_printf_float+0x26a>
 8005436:	2301      	movs	r3, #1
 8005438:	4a41      	ldr	r2, [pc, #260]	; (8005540 <_printf_float+0x30c>)
 800543a:	4631      	mov	r1, r6
 800543c:	4628      	mov	r0, r5
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	f43f af54 	beq.w	80052ee <_printf_float+0xba>
 8005446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800544a:	429a      	cmp	r2, r3
 800544c:	db02      	blt.n	8005454 <_printf_float+0x220>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	07d8      	lsls	r0, r3, #31
 8005452:	d50f      	bpl.n	8005474 <_printf_float+0x240>
 8005454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af45 	beq.w	80052ee <_printf_float+0xba>
 8005464:	f04f 0800 	mov.w	r8, #0
 8005468:	f104 091a 	add.w	r9, r4, #26
 800546c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	4543      	cmp	r3, r8
 8005472:	dc09      	bgt.n	8005488 <_printf_float+0x254>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	079b      	lsls	r3, r3, #30
 8005478:	f100 8103 	bmi.w	8005682 <_printf_float+0x44e>
 800547c:	68e0      	ldr	r0, [r4, #12]
 800547e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005480:	4298      	cmp	r0, r3
 8005482:	bfb8      	it	lt
 8005484:	4618      	movlt	r0, r3
 8005486:	e734      	b.n	80052f2 <_printf_float+0xbe>
 8005488:	2301      	movs	r3, #1
 800548a:	464a      	mov	r2, r9
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f af2b 	beq.w	80052ee <_printf_float+0xba>
 8005498:	f108 0801 	add.w	r8, r8, #1
 800549c:	e7e6      	b.n	800546c <_printf_float+0x238>
 800549e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dc2b      	bgt.n	80054fc <_printf_float+0x2c8>
 80054a4:	2301      	movs	r3, #1
 80054a6:	4a26      	ldr	r2, [pc, #152]	; (8005540 <_printf_float+0x30c>)
 80054a8:	4631      	mov	r1, r6
 80054aa:	4628      	mov	r0, r5
 80054ac:	47b8      	blx	r7
 80054ae:	3001      	adds	r0, #1
 80054b0:	f43f af1d 	beq.w	80052ee <_printf_float+0xba>
 80054b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b6:	b923      	cbnz	r3, 80054c2 <_printf_float+0x28e>
 80054b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ba:	b913      	cbnz	r3, 80054c2 <_printf_float+0x28e>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	d5d8      	bpl.n	8005474 <_printf_float+0x240>
 80054c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054c6:	4631      	mov	r1, r6
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b8      	blx	r7
 80054cc:	3001      	adds	r0, #1
 80054ce:	f43f af0e 	beq.w	80052ee <_printf_float+0xba>
 80054d2:	f04f 0900 	mov.w	r9, #0
 80054d6:	f104 0a1a 	add.w	sl, r4, #26
 80054da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054dc:	425b      	negs	r3, r3
 80054de:	454b      	cmp	r3, r9
 80054e0:	dc01      	bgt.n	80054e6 <_printf_float+0x2b2>
 80054e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e4:	e794      	b.n	8005410 <_printf_float+0x1dc>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4652      	mov	r2, sl
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f aefc 	beq.w	80052ee <_printf_float+0xba>
 80054f6:	f109 0901 	add.w	r9, r9, #1
 80054fa:	e7ee      	b.n	80054da <_printf_float+0x2a6>
 80054fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005500:	429a      	cmp	r2, r3
 8005502:	bfa8      	it	ge
 8005504:	461a      	movge	r2, r3
 8005506:	2a00      	cmp	r2, #0
 8005508:	4691      	mov	r9, r2
 800550a:	dd07      	ble.n	800551c <_printf_float+0x2e8>
 800550c:	4613      	mov	r3, r2
 800550e:	4631      	mov	r1, r6
 8005510:	4642      	mov	r2, r8
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	f43f aee9 	beq.w	80052ee <_printf_float+0xba>
 800551c:	f104 031a 	add.w	r3, r4, #26
 8005520:	f04f 0b00 	mov.w	fp, #0
 8005524:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005528:	9306      	str	r3, [sp, #24]
 800552a:	e015      	b.n	8005558 <_printf_float+0x324>
 800552c:	7fefffff 	.word	0x7fefffff
 8005530:	08008c48 	.word	0x08008c48
 8005534:	08008c44 	.word	0x08008c44
 8005538:	08008c50 	.word	0x08008c50
 800553c:	08008c4c 	.word	0x08008c4c
 8005540:	08008c54 	.word	0x08008c54
 8005544:	2301      	movs	r3, #1
 8005546:	9a06      	ldr	r2, [sp, #24]
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f aecd 	beq.w	80052ee <_printf_float+0xba>
 8005554:	f10b 0b01 	add.w	fp, fp, #1
 8005558:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800555c:	ebaa 0309 	sub.w	r3, sl, r9
 8005560:	455b      	cmp	r3, fp
 8005562:	dcef      	bgt.n	8005544 <_printf_float+0x310>
 8005564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005568:	429a      	cmp	r2, r3
 800556a:	44d0      	add	r8, sl
 800556c:	db15      	blt.n	800559a <_printf_float+0x366>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	07da      	lsls	r2, r3, #31
 8005572:	d412      	bmi.n	800559a <_printf_float+0x366>
 8005574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005578:	eba3 020a 	sub.w	r2, r3, sl
 800557c:	eba3 0a01 	sub.w	sl, r3, r1
 8005580:	4592      	cmp	sl, r2
 8005582:	bfa8      	it	ge
 8005584:	4692      	movge	sl, r2
 8005586:	f1ba 0f00 	cmp.w	sl, #0
 800558a:	dc0e      	bgt.n	80055aa <_printf_float+0x376>
 800558c:	f04f 0800 	mov.w	r8, #0
 8005590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005594:	f104 091a 	add.w	r9, r4, #26
 8005598:	e019      	b.n	80055ce <_printf_float+0x39a>
 800559a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	d1e5      	bne.n	8005574 <_printf_float+0x340>
 80055a8:	e6a1      	b.n	80052ee <_printf_float+0xba>
 80055aa:	4653      	mov	r3, sl
 80055ac:	4642      	mov	r2, r8
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	d1e9      	bne.n	800558c <_printf_float+0x358>
 80055b8:	e699      	b.n	80052ee <_printf_float+0xba>
 80055ba:	2301      	movs	r3, #1
 80055bc:	464a      	mov	r2, r9
 80055be:	4631      	mov	r1, r6
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b8      	blx	r7
 80055c4:	3001      	adds	r0, #1
 80055c6:	f43f ae92 	beq.w	80052ee <_printf_float+0xba>
 80055ca:	f108 0801 	add.w	r8, r8, #1
 80055ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	eba3 030a 	sub.w	r3, r3, sl
 80055d8:	4543      	cmp	r3, r8
 80055da:	dcee      	bgt.n	80055ba <_printf_float+0x386>
 80055dc:	e74a      	b.n	8005474 <_printf_float+0x240>
 80055de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055e0:	2a01      	cmp	r2, #1
 80055e2:	dc01      	bgt.n	80055e8 <_printf_float+0x3b4>
 80055e4:	07db      	lsls	r3, r3, #31
 80055e6:	d53a      	bpl.n	800565e <_printf_float+0x42a>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4642      	mov	r2, r8
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f ae7b 	beq.w	80052ee <_printf_float+0xba>
 80055f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f108 0801 	add.w	r8, r8, #1
 8005608:	f43f ae71 	beq.w	80052ee <_printf_float+0xba>
 800560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560e:	2200      	movs	r2, #0
 8005610:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005618:	2300      	movs	r3, #0
 800561a:	f7fb fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800561e:	b9c8      	cbnz	r0, 8005654 <_printf_float+0x420>
 8005620:	4653      	mov	r3, sl
 8005622:	4642      	mov	r2, r8
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	d10e      	bne.n	800564c <_printf_float+0x418>
 800562e:	e65e      	b.n	80052ee <_printf_float+0xba>
 8005630:	2301      	movs	r3, #1
 8005632:	4652      	mov	r2, sl
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f ae57 	beq.w	80052ee <_printf_float+0xba>
 8005640:	f108 0801 	add.w	r8, r8, #1
 8005644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005646:	3b01      	subs	r3, #1
 8005648:	4543      	cmp	r3, r8
 800564a:	dcf1      	bgt.n	8005630 <_printf_float+0x3fc>
 800564c:	464b      	mov	r3, r9
 800564e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005652:	e6de      	b.n	8005412 <_printf_float+0x1de>
 8005654:	f04f 0800 	mov.w	r8, #0
 8005658:	f104 0a1a 	add.w	sl, r4, #26
 800565c:	e7f2      	b.n	8005644 <_printf_float+0x410>
 800565e:	2301      	movs	r3, #1
 8005660:	e7df      	b.n	8005622 <_printf_float+0x3ee>
 8005662:	2301      	movs	r3, #1
 8005664:	464a      	mov	r2, r9
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f ae3e 	beq.w	80052ee <_printf_float+0xba>
 8005672:	f108 0801 	add.w	r8, r8, #1
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	4543      	cmp	r3, r8
 800567e:	dcf0      	bgt.n	8005662 <_printf_float+0x42e>
 8005680:	e6fc      	b.n	800547c <_printf_float+0x248>
 8005682:	f04f 0800 	mov.w	r8, #0
 8005686:	f104 0919 	add.w	r9, r4, #25
 800568a:	e7f4      	b.n	8005676 <_printf_float+0x442>
 800568c:	2900      	cmp	r1, #0
 800568e:	f43f ae8b 	beq.w	80053a8 <_printf_float+0x174>
 8005692:	2300      	movs	r3, #0
 8005694:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005698:	ab09      	add	r3, sp, #36	; 0x24
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	ec49 8b10 	vmov	d0, r8, r9
 80056a0:	6022      	str	r2, [r4, #0]
 80056a2:	f8cd a004 	str.w	sl, [sp, #4]
 80056a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff fd2e 	bl	800510c <__cvt>
 80056b0:	4680      	mov	r8, r0
 80056b2:	e648      	b.n	8005346 <_printf_float+0x112>

080056b4 <_printf_common>:
 80056b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b8:	4691      	mov	r9, r2
 80056ba:	461f      	mov	r7, r3
 80056bc:	688a      	ldr	r2, [r1, #8]
 80056be:	690b      	ldr	r3, [r1, #16]
 80056c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	bfb8      	it	lt
 80056c8:	4613      	movlt	r3, r2
 80056ca:	f8c9 3000 	str.w	r3, [r9]
 80056ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056d2:	4606      	mov	r6, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	b112      	cbz	r2, 80056de <_printf_common+0x2a>
 80056d8:	3301      	adds	r3, #1
 80056da:	f8c9 3000 	str.w	r3, [r9]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	0699      	lsls	r1, r3, #26
 80056e2:	bf42      	ittt	mi
 80056e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80056e8:	3302      	addmi	r3, #2
 80056ea:	f8c9 3000 	strmi.w	r3, [r9]
 80056ee:	6825      	ldr	r5, [r4, #0]
 80056f0:	f015 0506 	ands.w	r5, r5, #6
 80056f4:	d107      	bne.n	8005706 <_printf_common+0x52>
 80056f6:	f104 0a19 	add.w	sl, r4, #25
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	42ab      	cmp	r3, r5
 8005704:	dc28      	bgt.n	8005758 <_printf_common+0xa4>
 8005706:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	3300      	adds	r3, #0
 800570e:	bf18      	it	ne
 8005710:	2301      	movne	r3, #1
 8005712:	0692      	lsls	r2, r2, #26
 8005714:	d42d      	bmi.n	8005772 <_printf_common+0xbe>
 8005716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800571a:	4639      	mov	r1, r7
 800571c:	4630      	mov	r0, r6
 800571e:	47c0      	blx	r8
 8005720:	3001      	adds	r0, #1
 8005722:	d020      	beq.n	8005766 <_printf_common+0xb2>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	68e5      	ldr	r5, [r4, #12]
 8005728:	f8d9 2000 	ldr.w	r2, [r9]
 800572c:	f003 0306 	and.w	r3, r3, #6
 8005730:	2b04      	cmp	r3, #4
 8005732:	bf08      	it	eq
 8005734:	1aad      	subeq	r5, r5, r2
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	6922      	ldr	r2, [r4, #16]
 800573a:	bf0c      	ite	eq
 800573c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005740:	2500      	movne	r5, #0
 8005742:	4293      	cmp	r3, r2
 8005744:	bfc4      	itt	gt
 8005746:	1a9b      	subgt	r3, r3, r2
 8005748:	18ed      	addgt	r5, r5, r3
 800574a:	f04f 0900 	mov.w	r9, #0
 800574e:	341a      	adds	r4, #26
 8005750:	454d      	cmp	r5, r9
 8005752:	d11a      	bne.n	800578a <_printf_common+0xd6>
 8005754:	2000      	movs	r0, #0
 8005756:	e008      	b.n	800576a <_printf_common+0xb6>
 8005758:	2301      	movs	r3, #1
 800575a:	4652      	mov	r2, sl
 800575c:	4639      	mov	r1, r7
 800575e:	4630      	mov	r0, r6
 8005760:	47c0      	blx	r8
 8005762:	3001      	adds	r0, #1
 8005764:	d103      	bne.n	800576e <_printf_common+0xba>
 8005766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	3501      	adds	r5, #1
 8005770:	e7c3      	b.n	80056fa <_printf_common+0x46>
 8005772:	18e1      	adds	r1, r4, r3
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	2030      	movs	r0, #48	; 0x30
 8005778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800577c:	4422      	add	r2, r4
 800577e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005782:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005786:	3302      	adds	r3, #2
 8005788:	e7c5      	b.n	8005716 <_printf_common+0x62>
 800578a:	2301      	movs	r3, #1
 800578c:	4622      	mov	r2, r4
 800578e:	4639      	mov	r1, r7
 8005790:	4630      	mov	r0, r6
 8005792:	47c0      	blx	r8
 8005794:	3001      	adds	r0, #1
 8005796:	d0e6      	beq.n	8005766 <_printf_common+0xb2>
 8005798:	f109 0901 	add.w	r9, r9, #1
 800579c:	e7d8      	b.n	8005750 <_printf_common+0x9c>
	...

080057a0 <_printf_i>:
 80057a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80057a8:	460c      	mov	r4, r1
 80057aa:	7e09      	ldrb	r1, [r1, #24]
 80057ac:	b085      	sub	sp, #20
 80057ae:	296e      	cmp	r1, #110	; 0x6e
 80057b0:	4617      	mov	r7, r2
 80057b2:	4606      	mov	r6, r0
 80057b4:	4698      	mov	r8, r3
 80057b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057b8:	f000 80b3 	beq.w	8005922 <_printf_i+0x182>
 80057bc:	d822      	bhi.n	8005804 <_printf_i+0x64>
 80057be:	2963      	cmp	r1, #99	; 0x63
 80057c0:	d036      	beq.n	8005830 <_printf_i+0x90>
 80057c2:	d80a      	bhi.n	80057da <_printf_i+0x3a>
 80057c4:	2900      	cmp	r1, #0
 80057c6:	f000 80b9 	beq.w	800593c <_printf_i+0x19c>
 80057ca:	2958      	cmp	r1, #88	; 0x58
 80057cc:	f000 8083 	beq.w	80058d6 <_printf_i+0x136>
 80057d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80057d8:	e032      	b.n	8005840 <_printf_i+0xa0>
 80057da:	2964      	cmp	r1, #100	; 0x64
 80057dc:	d001      	beq.n	80057e2 <_printf_i+0x42>
 80057de:	2969      	cmp	r1, #105	; 0x69
 80057e0:	d1f6      	bne.n	80057d0 <_printf_i+0x30>
 80057e2:	6820      	ldr	r0, [r4, #0]
 80057e4:	6813      	ldr	r3, [r2, #0]
 80057e6:	0605      	lsls	r5, r0, #24
 80057e8:	f103 0104 	add.w	r1, r3, #4
 80057ec:	d52a      	bpl.n	8005844 <_printf_i+0xa4>
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6011      	str	r1, [r2, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da03      	bge.n	80057fe <_printf_i+0x5e>
 80057f6:	222d      	movs	r2, #45	; 0x2d
 80057f8:	425b      	negs	r3, r3
 80057fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057fe:	486f      	ldr	r0, [pc, #444]	; (80059bc <_printf_i+0x21c>)
 8005800:	220a      	movs	r2, #10
 8005802:	e039      	b.n	8005878 <_printf_i+0xd8>
 8005804:	2973      	cmp	r1, #115	; 0x73
 8005806:	f000 809d 	beq.w	8005944 <_printf_i+0x1a4>
 800580a:	d808      	bhi.n	800581e <_printf_i+0x7e>
 800580c:	296f      	cmp	r1, #111	; 0x6f
 800580e:	d020      	beq.n	8005852 <_printf_i+0xb2>
 8005810:	2970      	cmp	r1, #112	; 0x70
 8005812:	d1dd      	bne.n	80057d0 <_printf_i+0x30>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	f043 0320 	orr.w	r3, r3, #32
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	e003      	b.n	8005826 <_printf_i+0x86>
 800581e:	2975      	cmp	r1, #117	; 0x75
 8005820:	d017      	beq.n	8005852 <_printf_i+0xb2>
 8005822:	2978      	cmp	r1, #120	; 0x78
 8005824:	d1d4      	bne.n	80057d0 <_printf_i+0x30>
 8005826:	2378      	movs	r3, #120	; 0x78
 8005828:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800582c:	4864      	ldr	r0, [pc, #400]	; (80059c0 <_printf_i+0x220>)
 800582e:	e055      	b.n	80058dc <_printf_i+0x13c>
 8005830:	6813      	ldr	r3, [r2, #0]
 8005832:	1d19      	adds	r1, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6011      	str	r1, [r2, #0]
 8005838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800583c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005840:	2301      	movs	r3, #1
 8005842:	e08c      	b.n	800595e <_printf_i+0x1be>
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6011      	str	r1, [r2, #0]
 8005848:	f010 0f40 	tst.w	r0, #64	; 0x40
 800584c:	bf18      	it	ne
 800584e:	b21b      	sxthne	r3, r3
 8005850:	e7cf      	b.n	80057f2 <_printf_i+0x52>
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	6825      	ldr	r5, [r4, #0]
 8005856:	1d18      	adds	r0, r3, #4
 8005858:	6010      	str	r0, [r2, #0]
 800585a:	0628      	lsls	r0, r5, #24
 800585c:	d501      	bpl.n	8005862 <_printf_i+0xc2>
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	e002      	b.n	8005868 <_printf_i+0xc8>
 8005862:	0668      	lsls	r0, r5, #25
 8005864:	d5fb      	bpl.n	800585e <_printf_i+0xbe>
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	4854      	ldr	r0, [pc, #336]	; (80059bc <_printf_i+0x21c>)
 800586a:	296f      	cmp	r1, #111	; 0x6f
 800586c:	bf14      	ite	ne
 800586e:	220a      	movne	r2, #10
 8005870:	2208      	moveq	r2, #8
 8005872:	2100      	movs	r1, #0
 8005874:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005878:	6865      	ldr	r5, [r4, #4]
 800587a:	60a5      	str	r5, [r4, #8]
 800587c:	2d00      	cmp	r5, #0
 800587e:	f2c0 8095 	blt.w	80059ac <_printf_i+0x20c>
 8005882:	6821      	ldr	r1, [r4, #0]
 8005884:	f021 0104 	bic.w	r1, r1, #4
 8005888:	6021      	str	r1, [r4, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d13d      	bne.n	800590a <_printf_i+0x16a>
 800588e:	2d00      	cmp	r5, #0
 8005890:	f040 808e 	bne.w	80059b0 <_printf_i+0x210>
 8005894:	4665      	mov	r5, ip
 8005896:	2a08      	cmp	r2, #8
 8005898:	d10b      	bne.n	80058b2 <_printf_i+0x112>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	07db      	lsls	r3, r3, #31
 800589e:	d508      	bpl.n	80058b2 <_printf_i+0x112>
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	bfde      	ittt	le
 80058a8:	2330      	movle	r3, #48	; 0x30
 80058aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058b2:	ebac 0305 	sub.w	r3, ip, r5
 80058b6:	6123      	str	r3, [r4, #16]
 80058b8:	f8cd 8000 	str.w	r8, [sp]
 80058bc:	463b      	mov	r3, r7
 80058be:	aa03      	add	r2, sp, #12
 80058c0:	4621      	mov	r1, r4
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7ff fef6 	bl	80056b4 <_printf_common>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d14d      	bne.n	8005968 <_printf_i+0x1c8>
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d0:	b005      	add	sp, #20
 80058d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058d6:	4839      	ldr	r0, [pc, #228]	; (80059bc <_printf_i+0x21c>)
 80058d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	6821      	ldr	r1, [r4, #0]
 80058e0:	1d1d      	adds	r5, r3, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6015      	str	r5, [r2, #0]
 80058e6:	060a      	lsls	r2, r1, #24
 80058e8:	d50b      	bpl.n	8005902 <_printf_i+0x162>
 80058ea:	07ca      	lsls	r2, r1, #31
 80058ec:	bf44      	itt	mi
 80058ee:	f041 0120 	orrmi.w	r1, r1, #32
 80058f2:	6021      	strmi	r1, [r4, #0]
 80058f4:	b91b      	cbnz	r3, 80058fe <_printf_i+0x15e>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	f022 0220 	bic.w	r2, r2, #32
 80058fc:	6022      	str	r2, [r4, #0]
 80058fe:	2210      	movs	r2, #16
 8005900:	e7b7      	b.n	8005872 <_printf_i+0xd2>
 8005902:	064d      	lsls	r5, r1, #25
 8005904:	bf48      	it	mi
 8005906:	b29b      	uxthmi	r3, r3
 8005908:	e7ef      	b.n	80058ea <_printf_i+0x14a>
 800590a:	4665      	mov	r5, ip
 800590c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005910:	fb02 3311 	mls	r3, r2, r1, r3
 8005914:	5cc3      	ldrb	r3, [r0, r3]
 8005916:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800591a:	460b      	mov	r3, r1
 800591c:	2900      	cmp	r1, #0
 800591e:	d1f5      	bne.n	800590c <_printf_i+0x16c>
 8005920:	e7b9      	b.n	8005896 <_printf_i+0xf6>
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	6825      	ldr	r5, [r4, #0]
 8005926:	6961      	ldr	r1, [r4, #20]
 8005928:	1d18      	adds	r0, r3, #4
 800592a:	6010      	str	r0, [r2, #0]
 800592c:	0628      	lsls	r0, r5, #24
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	d501      	bpl.n	8005936 <_printf_i+0x196>
 8005932:	6019      	str	r1, [r3, #0]
 8005934:	e002      	b.n	800593c <_printf_i+0x19c>
 8005936:	066a      	lsls	r2, r5, #25
 8005938:	d5fb      	bpl.n	8005932 <_printf_i+0x192>
 800593a:	8019      	strh	r1, [r3, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	6123      	str	r3, [r4, #16]
 8005940:	4665      	mov	r5, ip
 8005942:	e7b9      	b.n	80058b8 <_printf_i+0x118>
 8005944:	6813      	ldr	r3, [r2, #0]
 8005946:	1d19      	adds	r1, r3, #4
 8005948:	6011      	str	r1, [r2, #0]
 800594a:	681d      	ldr	r5, [r3, #0]
 800594c:	6862      	ldr	r2, [r4, #4]
 800594e:	2100      	movs	r1, #0
 8005950:	4628      	mov	r0, r5
 8005952:	f7fa fc45 	bl	80001e0 <memchr>
 8005956:	b108      	cbz	r0, 800595c <_printf_i+0x1bc>
 8005958:	1b40      	subs	r0, r0, r5
 800595a:	6060      	str	r0, [r4, #4]
 800595c:	6863      	ldr	r3, [r4, #4]
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	2300      	movs	r3, #0
 8005962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005966:	e7a7      	b.n	80058b8 <_printf_i+0x118>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	462a      	mov	r2, r5
 800596c:	4639      	mov	r1, r7
 800596e:	4630      	mov	r0, r6
 8005970:	47c0      	blx	r8
 8005972:	3001      	adds	r0, #1
 8005974:	d0aa      	beq.n	80058cc <_printf_i+0x12c>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	079b      	lsls	r3, r3, #30
 800597a:	d413      	bmi.n	80059a4 <_printf_i+0x204>
 800597c:	68e0      	ldr	r0, [r4, #12]
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	4298      	cmp	r0, r3
 8005982:	bfb8      	it	lt
 8005984:	4618      	movlt	r0, r3
 8005986:	e7a3      	b.n	80058d0 <_printf_i+0x130>
 8005988:	2301      	movs	r3, #1
 800598a:	464a      	mov	r2, r9
 800598c:	4639      	mov	r1, r7
 800598e:	4630      	mov	r0, r6
 8005990:	47c0      	blx	r8
 8005992:	3001      	adds	r0, #1
 8005994:	d09a      	beq.n	80058cc <_printf_i+0x12c>
 8005996:	3501      	adds	r5, #1
 8005998:	68e3      	ldr	r3, [r4, #12]
 800599a:	9a03      	ldr	r2, [sp, #12]
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	42ab      	cmp	r3, r5
 80059a0:	dcf2      	bgt.n	8005988 <_printf_i+0x1e8>
 80059a2:	e7eb      	b.n	800597c <_printf_i+0x1dc>
 80059a4:	2500      	movs	r5, #0
 80059a6:	f104 0919 	add.w	r9, r4, #25
 80059aa:	e7f5      	b.n	8005998 <_printf_i+0x1f8>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ac      	bne.n	800590a <_printf_i+0x16a>
 80059b0:	7803      	ldrb	r3, [r0, #0]
 80059b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059ba:	e76c      	b.n	8005896 <_printf_i+0xf6>
 80059bc:	08008c56 	.word	0x08008c56
 80059c0:	08008c67 	.word	0x08008c67

080059c4 <_scanf_float>:
 80059c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c8:	469a      	mov	sl, r3
 80059ca:	688b      	ldr	r3, [r1, #8]
 80059cc:	4616      	mov	r6, r2
 80059ce:	1e5a      	subs	r2, r3, #1
 80059d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059d4:	b087      	sub	sp, #28
 80059d6:	bf83      	ittte	hi
 80059d8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80059dc:	189b      	addhi	r3, r3, r2
 80059de:	9301      	strhi	r3, [sp, #4]
 80059e0:	2300      	movls	r3, #0
 80059e2:	bf86      	itte	hi
 80059e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80059e8:	608b      	strhi	r3, [r1, #8]
 80059ea:	9301      	strls	r3, [sp, #4]
 80059ec:	680b      	ldr	r3, [r1, #0]
 80059ee:	4688      	mov	r8, r1
 80059f0:	f04f 0b00 	mov.w	fp, #0
 80059f4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80059f8:	f848 3b1c 	str.w	r3, [r8], #28
 80059fc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005a00:	4607      	mov	r7, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	4645      	mov	r5, r8
 8005a06:	465a      	mov	r2, fp
 8005a08:	46d9      	mov	r9, fp
 8005a0a:	f8cd b008 	str.w	fp, [sp, #8]
 8005a0e:	68a1      	ldr	r1, [r4, #8]
 8005a10:	b181      	cbz	r1, 8005a34 <_scanf_float+0x70>
 8005a12:	6833      	ldr	r3, [r6, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b49      	cmp	r3, #73	; 0x49
 8005a18:	d071      	beq.n	8005afe <_scanf_float+0x13a>
 8005a1a:	d84d      	bhi.n	8005ab8 <_scanf_float+0xf4>
 8005a1c:	2b39      	cmp	r3, #57	; 0x39
 8005a1e:	d840      	bhi.n	8005aa2 <_scanf_float+0xde>
 8005a20:	2b31      	cmp	r3, #49	; 0x31
 8005a22:	f080 8088 	bcs.w	8005b36 <_scanf_float+0x172>
 8005a26:	2b2d      	cmp	r3, #45	; 0x2d
 8005a28:	f000 8090 	beq.w	8005b4c <_scanf_float+0x188>
 8005a2c:	d815      	bhi.n	8005a5a <_scanf_float+0x96>
 8005a2e:	2b2b      	cmp	r3, #43	; 0x2b
 8005a30:	f000 808c 	beq.w	8005b4c <_scanf_float+0x188>
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	d003      	beq.n	8005a42 <_scanf_float+0x7e>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	3a01      	subs	r2, #1
 8005a44:	2a01      	cmp	r2, #1
 8005a46:	f200 80ea 	bhi.w	8005c1e <_scanf_float+0x25a>
 8005a4a:	4545      	cmp	r5, r8
 8005a4c:	f200 80dc 	bhi.w	8005c08 <_scanf_float+0x244>
 8005a50:	2601      	movs	r6, #1
 8005a52:	4630      	mov	r0, r6
 8005a54:	b007      	add	sp, #28
 8005a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a5c:	f000 809f 	beq.w	8005b9e <_scanf_float+0x1da>
 8005a60:	2b30      	cmp	r3, #48	; 0x30
 8005a62:	d1e7      	bne.n	8005a34 <_scanf_float+0x70>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005a6a:	d064      	beq.n	8005b36 <_scanf_float+0x172>
 8005a6c:	9b01      	ldr	r3, [sp, #4]
 8005a6e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005a72:	6020      	str	r0, [r4, #0]
 8005a74:	f109 0901 	add.w	r9, r9, #1
 8005a78:	b11b      	cbz	r3, 8005a82 <_scanf_float+0xbe>
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	3101      	adds	r1, #1
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	60a1      	str	r1, [r4, #8]
 8005a82:	68a3      	ldr	r3, [r4, #8]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	60a3      	str	r3, [r4, #8]
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	6123      	str	r3, [r4, #16]
 8005a8e:	6873      	ldr	r3, [r6, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	6073      	str	r3, [r6, #4]
 8005a96:	f340 80ac 	ble.w	8005bf2 <_scanf_float+0x22e>
 8005a9a:	6833      	ldr	r3, [r6, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	6033      	str	r3, [r6, #0]
 8005aa0:	e7b5      	b.n	8005a0e <_scanf_float+0x4a>
 8005aa2:	2b45      	cmp	r3, #69	; 0x45
 8005aa4:	f000 8085 	beq.w	8005bb2 <_scanf_float+0x1ee>
 8005aa8:	2b46      	cmp	r3, #70	; 0x46
 8005aaa:	d06a      	beq.n	8005b82 <_scanf_float+0x1be>
 8005aac:	2b41      	cmp	r3, #65	; 0x41
 8005aae:	d1c1      	bne.n	8005a34 <_scanf_float+0x70>
 8005ab0:	2a01      	cmp	r2, #1
 8005ab2:	d1bf      	bne.n	8005a34 <_scanf_float+0x70>
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	e046      	b.n	8005b46 <_scanf_float+0x182>
 8005ab8:	2b65      	cmp	r3, #101	; 0x65
 8005aba:	d07a      	beq.n	8005bb2 <_scanf_float+0x1ee>
 8005abc:	d818      	bhi.n	8005af0 <_scanf_float+0x12c>
 8005abe:	2b54      	cmp	r3, #84	; 0x54
 8005ac0:	d066      	beq.n	8005b90 <_scanf_float+0x1cc>
 8005ac2:	d811      	bhi.n	8005ae8 <_scanf_float+0x124>
 8005ac4:	2b4e      	cmp	r3, #78	; 0x4e
 8005ac6:	d1b5      	bne.n	8005a34 <_scanf_float+0x70>
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	d146      	bne.n	8005b5a <_scanf_float+0x196>
 8005acc:	f1b9 0f00 	cmp.w	r9, #0
 8005ad0:	d145      	bne.n	8005b5e <_scanf_float+0x19a>
 8005ad2:	6821      	ldr	r1, [r4, #0]
 8005ad4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005ad8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005adc:	d13f      	bne.n	8005b5e <_scanf_float+0x19a>
 8005ade:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005ae2:	6021      	str	r1, [r4, #0]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	e02e      	b.n	8005b46 <_scanf_float+0x182>
 8005ae8:	2b59      	cmp	r3, #89	; 0x59
 8005aea:	d01e      	beq.n	8005b2a <_scanf_float+0x166>
 8005aec:	2b61      	cmp	r3, #97	; 0x61
 8005aee:	e7de      	b.n	8005aae <_scanf_float+0xea>
 8005af0:	2b6e      	cmp	r3, #110	; 0x6e
 8005af2:	d0e9      	beq.n	8005ac8 <_scanf_float+0x104>
 8005af4:	d815      	bhi.n	8005b22 <_scanf_float+0x15e>
 8005af6:	2b66      	cmp	r3, #102	; 0x66
 8005af8:	d043      	beq.n	8005b82 <_scanf_float+0x1be>
 8005afa:	2b69      	cmp	r3, #105	; 0x69
 8005afc:	d19a      	bne.n	8005a34 <_scanf_float+0x70>
 8005afe:	f1bb 0f00 	cmp.w	fp, #0
 8005b02:	d138      	bne.n	8005b76 <_scanf_float+0x1b2>
 8005b04:	f1b9 0f00 	cmp.w	r9, #0
 8005b08:	d197      	bne.n	8005a3a <_scanf_float+0x76>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005b10:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005b14:	d195      	bne.n	8005a42 <_scanf_float+0x7e>
 8005b16:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005b1a:	6021      	str	r1, [r4, #0]
 8005b1c:	f04f 0b01 	mov.w	fp, #1
 8005b20:	e011      	b.n	8005b46 <_scanf_float+0x182>
 8005b22:	2b74      	cmp	r3, #116	; 0x74
 8005b24:	d034      	beq.n	8005b90 <_scanf_float+0x1cc>
 8005b26:	2b79      	cmp	r3, #121	; 0x79
 8005b28:	d184      	bne.n	8005a34 <_scanf_float+0x70>
 8005b2a:	f1bb 0f07 	cmp.w	fp, #7
 8005b2e:	d181      	bne.n	8005a34 <_scanf_float+0x70>
 8005b30:	f04f 0b08 	mov.w	fp, #8
 8005b34:	e007      	b.n	8005b46 <_scanf_float+0x182>
 8005b36:	eb12 0f0b 	cmn.w	r2, fp
 8005b3a:	f47f af7b 	bne.w	8005a34 <_scanf_float+0x70>
 8005b3e:	6821      	ldr	r1, [r4, #0]
 8005b40:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005b44:	6021      	str	r1, [r4, #0]
 8005b46:	702b      	strb	r3, [r5, #0]
 8005b48:	3501      	adds	r5, #1
 8005b4a:	e79a      	b.n	8005a82 <_scanf_float+0xbe>
 8005b4c:	6821      	ldr	r1, [r4, #0]
 8005b4e:	0608      	lsls	r0, r1, #24
 8005b50:	f57f af70 	bpl.w	8005a34 <_scanf_float+0x70>
 8005b54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b58:	e7f4      	b.n	8005b44 <_scanf_float+0x180>
 8005b5a:	2a02      	cmp	r2, #2
 8005b5c:	d047      	beq.n	8005bee <_scanf_float+0x22a>
 8005b5e:	f1bb 0f01 	cmp.w	fp, #1
 8005b62:	d003      	beq.n	8005b6c <_scanf_float+0x1a8>
 8005b64:	f1bb 0f04 	cmp.w	fp, #4
 8005b68:	f47f af64 	bne.w	8005a34 <_scanf_float+0x70>
 8005b6c:	f10b 0b01 	add.w	fp, fp, #1
 8005b70:	fa5f fb8b 	uxtb.w	fp, fp
 8005b74:	e7e7      	b.n	8005b46 <_scanf_float+0x182>
 8005b76:	f1bb 0f03 	cmp.w	fp, #3
 8005b7a:	d0f7      	beq.n	8005b6c <_scanf_float+0x1a8>
 8005b7c:	f1bb 0f05 	cmp.w	fp, #5
 8005b80:	e7f2      	b.n	8005b68 <_scanf_float+0x1a4>
 8005b82:	f1bb 0f02 	cmp.w	fp, #2
 8005b86:	f47f af55 	bne.w	8005a34 <_scanf_float+0x70>
 8005b8a:	f04f 0b03 	mov.w	fp, #3
 8005b8e:	e7da      	b.n	8005b46 <_scanf_float+0x182>
 8005b90:	f1bb 0f06 	cmp.w	fp, #6
 8005b94:	f47f af4e 	bne.w	8005a34 <_scanf_float+0x70>
 8005b98:	f04f 0b07 	mov.w	fp, #7
 8005b9c:	e7d3      	b.n	8005b46 <_scanf_float+0x182>
 8005b9e:	6821      	ldr	r1, [r4, #0]
 8005ba0:	0588      	lsls	r0, r1, #22
 8005ba2:	f57f af47 	bpl.w	8005a34 <_scanf_float+0x70>
 8005ba6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005baa:	6021      	str	r1, [r4, #0]
 8005bac:	f8cd 9008 	str.w	r9, [sp, #8]
 8005bb0:	e7c9      	b.n	8005b46 <_scanf_float+0x182>
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005bb8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005bbc:	d006      	beq.n	8005bcc <_scanf_float+0x208>
 8005bbe:	0548      	lsls	r0, r1, #21
 8005bc0:	f57f af38 	bpl.w	8005a34 <_scanf_float+0x70>
 8005bc4:	f1b9 0f00 	cmp.w	r9, #0
 8005bc8:	f43f af3b 	beq.w	8005a42 <_scanf_float+0x7e>
 8005bcc:	0588      	lsls	r0, r1, #22
 8005bce:	bf58      	it	pl
 8005bd0:	9802      	ldrpl	r0, [sp, #8]
 8005bd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005bd6:	bf58      	it	pl
 8005bd8:	eba9 0000 	subpl.w	r0, r9, r0
 8005bdc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005be0:	bf58      	it	pl
 8005be2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005be6:	6021      	str	r1, [r4, #0]
 8005be8:	f04f 0900 	mov.w	r9, #0
 8005bec:	e7ab      	b.n	8005b46 <_scanf_float+0x182>
 8005bee:	2203      	movs	r2, #3
 8005bf0:	e7a9      	b.n	8005b46 <_scanf_float+0x182>
 8005bf2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bf6:	9205      	str	r2, [sp, #20]
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	4798      	blx	r3
 8005bfe:	9a05      	ldr	r2, [sp, #20]
 8005c00:	2800      	cmp	r0, #0
 8005c02:	f43f af04 	beq.w	8005a0e <_scanf_float+0x4a>
 8005c06:	e715      	b.n	8005a34 <_scanf_float+0x70>
 8005c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005c10:	4632      	mov	r2, r6
 8005c12:	4638      	mov	r0, r7
 8005c14:	4798      	blx	r3
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	e715      	b.n	8005a4a <_scanf_float+0x86>
 8005c1e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005c22:	2b06      	cmp	r3, #6
 8005c24:	d80a      	bhi.n	8005c3c <_scanf_float+0x278>
 8005c26:	f1bb 0f02 	cmp.w	fp, #2
 8005c2a:	d968      	bls.n	8005cfe <_scanf_float+0x33a>
 8005c2c:	f1ab 0b03 	sub.w	fp, fp, #3
 8005c30:	fa5f fb8b 	uxtb.w	fp, fp
 8005c34:	eba5 0b0b 	sub.w	fp, r5, fp
 8005c38:	455d      	cmp	r5, fp
 8005c3a:	d14b      	bne.n	8005cd4 <_scanf_float+0x310>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	05da      	lsls	r2, r3, #23
 8005c40:	d51f      	bpl.n	8005c82 <_scanf_float+0x2be>
 8005c42:	055b      	lsls	r3, r3, #21
 8005c44:	d468      	bmi.n	8005d18 <_scanf_float+0x354>
 8005c46:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	2965      	cmp	r1, #101	; 0x65
 8005c4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005c52:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	d00d      	beq.n	8005c76 <_scanf_float+0x2b2>
 8005c5a:	2945      	cmp	r1, #69	; 0x45
 8005c5c:	d00b      	beq.n	8005c76 <_scanf_float+0x2b2>
 8005c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c62:	4632      	mov	r2, r6
 8005c64:	4638      	mov	r0, r7
 8005c66:	4798      	blx	r3
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	f1a5 0b02 	sub.w	fp, r5, #2
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	4798      	blx	r3
 8005c80:	465d      	mov	r5, fp
 8005c82:	6826      	ldr	r6, [r4, #0]
 8005c84:	f016 0610 	ands.w	r6, r6, #16
 8005c88:	d17a      	bne.n	8005d80 <_scanf_float+0x3bc>
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c96:	d142      	bne.n	8005d1e <_scanf_float+0x35a>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	eba9 0303 	sub.w	r3, r9, r3
 8005c9e:	425a      	negs	r2, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d149      	bne.n	8005d38 <_scanf_float+0x374>
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f000 fea5 	bl	80069f8 <_strtod_r>
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f8da 3000 	ldr.w	r3, [sl]
 8005cb4:	f015 0f02 	tst.w	r5, #2
 8005cb8:	f103 0204 	add.w	r2, r3, #4
 8005cbc:	ec59 8b10 	vmov	r8, r9, d0
 8005cc0:	f8ca 2000 	str.w	r2, [sl]
 8005cc4:	d043      	beq.n	8005d4e <_scanf_float+0x38a>
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	e9c3 8900 	strd	r8, r9, [r3]
 8005ccc:	68e3      	ldr	r3, [r4, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60e3      	str	r3, [r4, #12]
 8005cd2:	e6be      	b.n	8005a52 <_scanf_float+0x8e>
 8005cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4638      	mov	r0, r7
 8005ce0:	4798      	blx	r3
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	e7a6      	b.n	8005c38 <_scanf_float+0x274>
 8005cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	4798      	blx	r3
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	4545      	cmp	r5, r8
 8005d00:	d8f3      	bhi.n	8005cea <_scanf_float+0x326>
 8005d02:	e6a5      	b.n	8005a50 <_scanf_float+0x8c>
 8005d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4638      	mov	r0, r7
 8005d10:	4798      	blx	r3
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	4545      	cmp	r5, r8
 8005d1a:	d8f3      	bhi.n	8005d04 <_scanf_float+0x340>
 8005d1c:	e698      	b.n	8005a50 <_scanf_float+0x8c>
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0bf      	beq.n	8005ca4 <_scanf_float+0x2e0>
 8005d24:	9904      	ldr	r1, [sp, #16]
 8005d26:	230a      	movs	r3, #10
 8005d28:	4632      	mov	r2, r6
 8005d2a:	3101      	adds	r1, #1
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f000 ff03 	bl	8006b38 <_strtol_r>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	9d04      	ldr	r5, [sp, #16]
 8005d36:	1ac2      	subs	r2, r0, r3
 8005d38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d3c:	429d      	cmp	r5, r3
 8005d3e:	bf28      	it	cs
 8005d40:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005d44:	490f      	ldr	r1, [pc, #60]	; (8005d84 <_scanf_float+0x3c0>)
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f824 	bl	8005d94 <siprintf>
 8005d4c:	e7aa      	b.n	8005ca4 <_scanf_float+0x2e0>
 8005d4e:	f015 0504 	ands.w	r5, r5, #4
 8005d52:	d1b8      	bne.n	8005cc6 <_scanf_float+0x302>
 8005d54:	681f      	ldr	r7, [r3, #0]
 8005d56:	ee10 2a10 	vmov	r2, s0
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	ee10 0a10 	vmov	r0, s0
 8005d60:	4649      	mov	r1, r9
 8005d62:	f7fa fee3 	bl	8000b2c <__aeabi_dcmpun>
 8005d66:	b128      	cbz	r0, 8005d74 <_scanf_float+0x3b0>
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f000 f80d 	bl	8005d88 <nanf>
 8005d6e:	ed87 0a00 	vstr	s0, [r7]
 8005d72:	e7ab      	b.n	8005ccc <_scanf_float+0x308>
 8005d74:	4640      	mov	r0, r8
 8005d76:	4649      	mov	r1, r9
 8005d78:	f7fa ff36 	bl	8000be8 <__aeabi_d2f>
 8005d7c:	6038      	str	r0, [r7, #0]
 8005d7e:	e7a5      	b.n	8005ccc <_scanf_float+0x308>
 8005d80:	2600      	movs	r6, #0
 8005d82:	e666      	b.n	8005a52 <_scanf_float+0x8e>
 8005d84:	08008c78 	.word	0x08008c78

08005d88 <nanf>:
 8005d88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d90 <nanf+0x8>
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	7fc00000 	.word	0x7fc00000

08005d94 <siprintf>:
 8005d94:	b40e      	push	{r1, r2, r3}
 8005d96:	b500      	push	{lr}
 8005d98:	b09c      	sub	sp, #112	; 0x70
 8005d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	9006      	str	r0, [sp, #24]
 8005da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005da4:	4809      	ldr	r0, [pc, #36]	; (8005dcc <siprintf+0x38>)
 8005da6:	9107      	str	r1, [sp, #28]
 8005da8:	9104      	str	r1, [sp, #16]
 8005daa:	4909      	ldr	r1, [pc, #36]	; (8005dd0 <siprintf+0x3c>)
 8005dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db0:	9105      	str	r1, [sp, #20]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	a902      	add	r1, sp, #8
 8005db8:	f002 fd84 	bl	80088c4 <_svfiprintf_r>
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	b01c      	add	sp, #112	; 0x70
 8005dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc8:	b003      	add	sp, #12
 8005dca:	4770      	bx	lr
 8005dcc:	20000018 	.word	0x20000018
 8005dd0:	ffff0208 	.word	0xffff0208

08005dd4 <sulp>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	460d      	mov	r5, r1
 8005dda:	ec45 4b10 	vmov	d0, r4, r5
 8005dde:	4616      	mov	r6, r2
 8005de0:	f002 fb2c 	bl	800843c <__ulp>
 8005de4:	ec51 0b10 	vmov	r0, r1, d0
 8005de8:	b17e      	cbz	r6, 8005e0a <sulp+0x36>
 8005dea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005dee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dd09      	ble.n	8005e0a <sulp+0x36>
 8005df6:	051b      	lsls	r3, r3, #20
 8005df8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005dfc:	2400      	movs	r4, #0
 8005dfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e02:	4622      	mov	r2, r4
 8005e04:	462b      	mov	r3, r5
 8005e06:	f7fa fbf7 	bl	80005f8 <__aeabi_dmul>
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	0000      	movs	r0, r0
	...

08005e10 <_strtod_l>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	461f      	mov	r7, r3
 8005e16:	b0a1      	sub	sp, #132	; 0x84
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4681      	mov	r9, r0
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	460e      	mov	r6, r1
 8005e20:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e22:	931c      	str	r3, [sp, #112]	; 0x70
 8005e24:	f002 f809 	bl	8007e3a <__localeconv_l>
 8005e28:	4680      	mov	r8, r0
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	f7fa f9d0 	bl	80001d0 <strlen>
 8005e30:	f04f 0a00 	mov.w	sl, #0
 8005e34:	4604      	mov	r4, r0
 8005e36:	f04f 0b00 	mov.w	fp, #0
 8005e3a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	2a0d      	cmp	r2, #13
 8005e42:	d832      	bhi.n	8005eaa <_strtod_l+0x9a>
 8005e44:	2a09      	cmp	r2, #9
 8005e46:	d236      	bcs.n	8005eb6 <_strtod_l+0xa6>
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	d03e      	beq.n	8005eca <_strtod_l+0xba>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005e50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005e52:	782b      	ldrb	r3, [r5, #0]
 8005e54:	2b30      	cmp	r3, #48	; 0x30
 8005e56:	f040 80ac 	bne.w	8005fb2 <_strtod_l+0x1a2>
 8005e5a:	786b      	ldrb	r3, [r5, #1]
 8005e5c:	2b58      	cmp	r3, #88	; 0x58
 8005e5e:	d001      	beq.n	8005e64 <_strtod_l+0x54>
 8005e60:	2b78      	cmp	r3, #120	; 0x78
 8005e62:	d167      	bne.n	8005f34 <_strtod_l+0x124>
 8005e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	ab1c      	add	r3, sp, #112	; 0x70
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	9702      	str	r7, [sp, #8]
 8005e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e70:	4a88      	ldr	r2, [pc, #544]	; (8006094 <_strtod_l+0x284>)
 8005e72:	a91b      	add	r1, sp, #108	; 0x6c
 8005e74:	4648      	mov	r0, r9
 8005e76:	f001 fd06 	bl	8007886 <__gethex>
 8005e7a:	f010 0407 	ands.w	r4, r0, #7
 8005e7e:	4606      	mov	r6, r0
 8005e80:	d005      	beq.n	8005e8e <_strtod_l+0x7e>
 8005e82:	2c06      	cmp	r4, #6
 8005e84:	d12b      	bne.n	8005ede <_strtod_l+0xce>
 8005e86:	3501      	adds	r5, #1
 8005e88:	2300      	movs	r3, #0
 8005e8a:	951b      	str	r5, [sp, #108]	; 0x6c
 8005e8c:	930d      	str	r3, [sp, #52]	; 0x34
 8005e8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 859a 	bne.w	80069ca <_strtod_l+0xbba>
 8005e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e98:	b1e3      	cbz	r3, 8005ed4 <_strtod_l+0xc4>
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ea0:	ec43 2b10 	vmov	d0, r2, r3
 8005ea4:	b021      	add	sp, #132	; 0x84
 8005ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eaa:	2a2b      	cmp	r2, #43	; 0x2b
 8005eac:	d015      	beq.n	8005eda <_strtod_l+0xca>
 8005eae:	2a2d      	cmp	r2, #45	; 0x2d
 8005eb0:	d004      	beq.n	8005ebc <_strtod_l+0xac>
 8005eb2:	2a20      	cmp	r2, #32
 8005eb4:	d1ca      	bne.n	8005e4c <_strtod_l+0x3c>
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005eba:	e7bf      	b.n	8005e3c <_strtod_l+0x2c>
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	920d      	str	r2, [sp, #52]	; 0x34
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1c2      	bne.n	8005e50 <_strtod_l+0x40>
 8005eca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ecc:	961b      	str	r6, [sp, #108]	; 0x6c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f040 8579 	bne.w	80069c6 <_strtod_l+0xbb6>
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	465b      	mov	r3, fp
 8005ed8:	e7e2      	b.n	8005ea0 <_strtod_l+0x90>
 8005eda:	2200      	movs	r2, #0
 8005edc:	e7ef      	b.n	8005ebe <_strtod_l+0xae>
 8005ede:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ee0:	b13a      	cbz	r2, 8005ef2 <_strtod_l+0xe2>
 8005ee2:	2135      	movs	r1, #53	; 0x35
 8005ee4:	a81e      	add	r0, sp, #120	; 0x78
 8005ee6:	f002 fba1 	bl	800862c <__copybits>
 8005eea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005eec:	4648      	mov	r0, r9
 8005eee:	f002 f80e 	bl	8007f0e <_Bfree>
 8005ef2:	3c01      	subs	r4, #1
 8005ef4:	2c04      	cmp	r4, #4
 8005ef6:	d806      	bhi.n	8005f06 <_strtod_l+0xf6>
 8005ef8:	e8df f004 	tbb	[pc, r4]
 8005efc:	1714030a 	.word	0x1714030a
 8005f00:	0a          	.byte	0x0a
 8005f01:	00          	.byte	0x00
 8005f02:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005f06:	0730      	lsls	r0, r6, #28
 8005f08:	d5c1      	bpl.n	8005e8e <_strtod_l+0x7e>
 8005f0a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005f0e:	e7be      	b.n	8005e8e <_strtod_l+0x7e>
 8005f10:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005f14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005f16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f1a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f1e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f22:	e7f0      	b.n	8005f06 <_strtod_l+0xf6>
 8005f24:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006098 <_strtod_l+0x288>
 8005f28:	e7ed      	b.n	8005f06 <_strtod_l+0xf6>
 8005f2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005f2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005f32:	e7e8      	b.n	8005f06 <_strtod_l+0xf6>
 8005f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b30      	cmp	r3, #48	; 0x30
 8005f3e:	d0f9      	beq.n	8005f34 <_strtod_l+0x124>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0a4      	beq.n	8005e8e <_strtod_l+0x7e>
 8005f44:	2301      	movs	r3, #1
 8005f46:	2500      	movs	r5, #0
 8005f48:	9306      	str	r3, [sp, #24]
 8005f4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f4c:	9308      	str	r3, [sp, #32]
 8005f4e:	9507      	str	r5, [sp, #28]
 8005f50:	9505      	str	r5, [sp, #20]
 8005f52:	220a      	movs	r2, #10
 8005f54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005f56:	7807      	ldrb	r7, [r0, #0]
 8005f58:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005f5c:	b2d9      	uxtb	r1, r3
 8005f5e:	2909      	cmp	r1, #9
 8005f60:	d929      	bls.n	8005fb6 <_strtod_l+0x1a6>
 8005f62:	4622      	mov	r2, r4
 8005f64:	f8d8 1000 	ldr.w	r1, [r8]
 8005f68:	f002 fdb4 	bl	8008ad4 <strncmp>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d031      	beq.n	8005fd4 <_strtod_l+0x1c4>
 8005f70:	2000      	movs	r0, #0
 8005f72:	9c05      	ldr	r4, [sp, #20]
 8005f74:	9004      	str	r0, [sp, #16]
 8005f76:	463b      	mov	r3, r7
 8005f78:	4602      	mov	r2, r0
 8005f7a:	2b65      	cmp	r3, #101	; 0x65
 8005f7c:	d001      	beq.n	8005f82 <_strtod_l+0x172>
 8005f7e:	2b45      	cmp	r3, #69	; 0x45
 8005f80:	d114      	bne.n	8005fac <_strtod_l+0x19c>
 8005f82:	b924      	cbnz	r4, 8005f8e <_strtod_l+0x17e>
 8005f84:	b910      	cbnz	r0, 8005f8c <_strtod_l+0x17c>
 8005f86:	9b06      	ldr	r3, [sp, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d09e      	beq.n	8005eca <_strtod_l+0xba>
 8005f8c:	2400      	movs	r4, #0
 8005f8e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005f90:	1c73      	adds	r3, r6, #1
 8005f92:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f94:	7873      	ldrb	r3, [r6, #1]
 8005f96:	2b2b      	cmp	r3, #43	; 0x2b
 8005f98:	d078      	beq.n	800608c <_strtod_l+0x27c>
 8005f9a:	2b2d      	cmp	r3, #45	; 0x2d
 8005f9c:	d070      	beq.n	8006080 <_strtod_l+0x270>
 8005f9e:	f04f 0c00 	mov.w	ip, #0
 8005fa2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005fa6:	2f09      	cmp	r7, #9
 8005fa8:	d97c      	bls.n	80060a4 <_strtod_l+0x294>
 8005faa:	961b      	str	r6, [sp, #108]	; 0x6c
 8005fac:	f04f 0e00 	mov.w	lr, #0
 8005fb0:	e09a      	b.n	80060e8 <_strtod_l+0x2d8>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e7c7      	b.n	8005f46 <_strtod_l+0x136>
 8005fb6:	9905      	ldr	r1, [sp, #20]
 8005fb8:	2908      	cmp	r1, #8
 8005fba:	bfdd      	ittte	le
 8005fbc:	9907      	ldrle	r1, [sp, #28]
 8005fbe:	fb02 3301 	mlale	r3, r2, r1, r3
 8005fc2:	9307      	strle	r3, [sp, #28]
 8005fc4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005fc8:	9b05      	ldr	r3, [sp, #20]
 8005fca:	3001      	adds	r0, #1
 8005fcc:	3301      	adds	r3, #1
 8005fce:	9305      	str	r3, [sp, #20]
 8005fd0:	901b      	str	r0, [sp, #108]	; 0x6c
 8005fd2:	e7bf      	b.n	8005f54 <_strtod_l+0x144>
 8005fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fd6:	191a      	adds	r2, r3, r4
 8005fd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005fda:	9a05      	ldr	r2, [sp, #20]
 8005fdc:	5d1b      	ldrb	r3, [r3, r4]
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	d037      	beq.n	8006052 <_strtod_l+0x242>
 8005fe2:	9c05      	ldr	r4, [sp, #20]
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005fea:	2909      	cmp	r1, #9
 8005fec:	d913      	bls.n	8006016 <_strtod_l+0x206>
 8005fee:	2101      	movs	r1, #1
 8005ff0:	9104      	str	r1, [sp, #16]
 8005ff2:	e7c2      	b.n	8005f7a <_strtod_l+0x16a>
 8005ff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	2b30      	cmp	r3, #48	; 0x30
 8006000:	d0f8      	beq.n	8005ff4 <_strtod_l+0x1e4>
 8006002:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006006:	2a08      	cmp	r2, #8
 8006008:	f200 84e4 	bhi.w	80069d4 <_strtod_l+0xbc4>
 800600c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800600e:	9208      	str	r2, [sp, #32]
 8006010:	4602      	mov	r2, r0
 8006012:	2000      	movs	r0, #0
 8006014:	4604      	mov	r4, r0
 8006016:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800601a:	f100 0101 	add.w	r1, r0, #1
 800601e:	d012      	beq.n	8006046 <_strtod_l+0x236>
 8006020:	440a      	add	r2, r1
 8006022:	eb00 0c04 	add.w	ip, r0, r4
 8006026:	4621      	mov	r1, r4
 8006028:	270a      	movs	r7, #10
 800602a:	458c      	cmp	ip, r1
 800602c:	d113      	bne.n	8006056 <_strtod_l+0x246>
 800602e:	1821      	adds	r1, r4, r0
 8006030:	2908      	cmp	r1, #8
 8006032:	f104 0401 	add.w	r4, r4, #1
 8006036:	4404      	add	r4, r0
 8006038:	dc19      	bgt.n	800606e <_strtod_l+0x25e>
 800603a:	9b07      	ldr	r3, [sp, #28]
 800603c:	210a      	movs	r1, #10
 800603e:	fb01 e303 	mla	r3, r1, r3, lr
 8006042:	9307      	str	r3, [sp, #28]
 8006044:	2100      	movs	r1, #0
 8006046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006048:	1c58      	adds	r0, r3, #1
 800604a:	901b      	str	r0, [sp, #108]	; 0x6c
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	4608      	mov	r0, r1
 8006050:	e7c9      	b.n	8005fe6 <_strtod_l+0x1d6>
 8006052:	9805      	ldr	r0, [sp, #20]
 8006054:	e7d3      	b.n	8005ffe <_strtod_l+0x1ee>
 8006056:	2908      	cmp	r1, #8
 8006058:	f101 0101 	add.w	r1, r1, #1
 800605c:	dc03      	bgt.n	8006066 <_strtod_l+0x256>
 800605e:	9b07      	ldr	r3, [sp, #28]
 8006060:	437b      	muls	r3, r7
 8006062:	9307      	str	r3, [sp, #28]
 8006064:	e7e1      	b.n	800602a <_strtod_l+0x21a>
 8006066:	2910      	cmp	r1, #16
 8006068:	bfd8      	it	le
 800606a:	437d      	mulle	r5, r7
 800606c:	e7dd      	b.n	800602a <_strtod_l+0x21a>
 800606e:	2c10      	cmp	r4, #16
 8006070:	bfdc      	itt	le
 8006072:	210a      	movle	r1, #10
 8006074:	fb01 e505 	mlale	r5, r1, r5, lr
 8006078:	e7e4      	b.n	8006044 <_strtod_l+0x234>
 800607a:	2301      	movs	r3, #1
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	e781      	b.n	8005f84 <_strtod_l+0x174>
 8006080:	f04f 0c01 	mov.w	ip, #1
 8006084:	1cb3      	adds	r3, r6, #2
 8006086:	931b      	str	r3, [sp, #108]	; 0x6c
 8006088:	78b3      	ldrb	r3, [r6, #2]
 800608a:	e78a      	b.n	8005fa2 <_strtod_l+0x192>
 800608c:	f04f 0c00 	mov.w	ip, #0
 8006090:	e7f8      	b.n	8006084 <_strtod_l+0x274>
 8006092:	bf00      	nop
 8006094:	08008c80 	.word	0x08008c80
 8006098:	7ff00000 	.word	0x7ff00000
 800609c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800609e:	1c5f      	adds	r7, r3, #1
 80060a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d0f9      	beq.n	800609c <_strtod_l+0x28c>
 80060a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80060ac:	2f08      	cmp	r7, #8
 80060ae:	f63f af7d 	bhi.w	8005fac <_strtod_l+0x19c>
 80060b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80060b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060b8:	930a      	str	r3, [sp, #40]	; 0x28
 80060ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060bc:	1c5f      	adds	r7, r3, #1
 80060be:	971b      	str	r7, [sp, #108]	; 0x6c
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80060c6:	f1b8 0f09 	cmp.w	r8, #9
 80060ca:	d937      	bls.n	800613c <_strtod_l+0x32c>
 80060cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060ce:	1a7f      	subs	r7, r7, r1
 80060d0:	2f08      	cmp	r7, #8
 80060d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80060d6:	dc37      	bgt.n	8006148 <_strtod_l+0x338>
 80060d8:	45be      	cmp	lr, r7
 80060da:	bfa8      	it	ge
 80060dc:	46be      	movge	lr, r7
 80060de:	f1bc 0f00 	cmp.w	ip, #0
 80060e2:	d001      	beq.n	80060e8 <_strtod_l+0x2d8>
 80060e4:	f1ce 0e00 	rsb	lr, lr, #0
 80060e8:	2c00      	cmp	r4, #0
 80060ea:	d151      	bne.n	8006190 <_strtod_l+0x380>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f47f aece 	bne.w	8005e8e <_strtod_l+0x7e>
 80060f2:	9a06      	ldr	r2, [sp, #24]
 80060f4:	2a00      	cmp	r2, #0
 80060f6:	f47f aeca 	bne.w	8005e8e <_strtod_l+0x7e>
 80060fa:	9a04      	ldr	r2, [sp, #16]
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	f47f aee4 	bne.w	8005eca <_strtod_l+0xba>
 8006102:	2b4e      	cmp	r3, #78	; 0x4e
 8006104:	d027      	beq.n	8006156 <_strtod_l+0x346>
 8006106:	dc21      	bgt.n	800614c <_strtod_l+0x33c>
 8006108:	2b49      	cmp	r3, #73	; 0x49
 800610a:	f47f aede 	bne.w	8005eca <_strtod_l+0xba>
 800610e:	49a0      	ldr	r1, [pc, #640]	; (8006390 <_strtod_l+0x580>)
 8006110:	a81b      	add	r0, sp, #108	; 0x6c
 8006112:	f001 fdeb 	bl	8007cec <__match>
 8006116:	2800      	cmp	r0, #0
 8006118:	f43f aed7 	beq.w	8005eca <_strtod_l+0xba>
 800611c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800611e:	499d      	ldr	r1, [pc, #628]	; (8006394 <_strtod_l+0x584>)
 8006120:	3b01      	subs	r3, #1
 8006122:	a81b      	add	r0, sp, #108	; 0x6c
 8006124:	931b      	str	r3, [sp, #108]	; 0x6c
 8006126:	f001 fde1 	bl	8007cec <__match>
 800612a:	b910      	cbnz	r0, 8006132 <_strtod_l+0x322>
 800612c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800612e:	3301      	adds	r3, #1
 8006130:	931b      	str	r3, [sp, #108]	; 0x6c
 8006132:	f8df b274 	ldr.w	fp, [pc, #628]	; 80063a8 <_strtod_l+0x598>
 8006136:	f04f 0a00 	mov.w	sl, #0
 800613a:	e6a8      	b.n	8005e8e <_strtod_l+0x7e>
 800613c:	210a      	movs	r1, #10
 800613e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006142:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006146:	e7b8      	b.n	80060ba <_strtod_l+0x2aa>
 8006148:	46be      	mov	lr, r7
 800614a:	e7c8      	b.n	80060de <_strtod_l+0x2ce>
 800614c:	2b69      	cmp	r3, #105	; 0x69
 800614e:	d0de      	beq.n	800610e <_strtod_l+0x2fe>
 8006150:	2b6e      	cmp	r3, #110	; 0x6e
 8006152:	f47f aeba 	bne.w	8005eca <_strtod_l+0xba>
 8006156:	4990      	ldr	r1, [pc, #576]	; (8006398 <_strtod_l+0x588>)
 8006158:	a81b      	add	r0, sp, #108	; 0x6c
 800615a:	f001 fdc7 	bl	8007cec <__match>
 800615e:	2800      	cmp	r0, #0
 8006160:	f43f aeb3 	beq.w	8005eca <_strtod_l+0xba>
 8006164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b28      	cmp	r3, #40	; 0x28
 800616a:	d10e      	bne.n	800618a <_strtod_l+0x37a>
 800616c:	aa1e      	add	r2, sp, #120	; 0x78
 800616e:	498b      	ldr	r1, [pc, #556]	; (800639c <_strtod_l+0x58c>)
 8006170:	a81b      	add	r0, sp, #108	; 0x6c
 8006172:	f001 fdcf 	bl	8007d14 <__hexnan>
 8006176:	2805      	cmp	r0, #5
 8006178:	d107      	bne.n	800618a <_strtod_l+0x37a>
 800617a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800617c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006180:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006184:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006188:	e681      	b.n	8005e8e <_strtod_l+0x7e>
 800618a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80063b0 <_strtod_l+0x5a0>
 800618e:	e7d2      	b.n	8006136 <_strtod_l+0x326>
 8006190:	ebae 0302 	sub.w	r3, lr, r2
 8006194:	9306      	str	r3, [sp, #24]
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	9807      	ldr	r0, [sp, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bf08      	it	eq
 800619e:	4623      	moveq	r3, r4
 80061a0:	2c10      	cmp	r4, #16
 80061a2:	9305      	str	r3, [sp, #20]
 80061a4:	46a0      	mov	r8, r4
 80061a6:	bfa8      	it	ge
 80061a8:	f04f 0810 	movge.w	r8, #16
 80061ac:	f7fa f9aa 	bl	8000504 <__aeabi_ui2d>
 80061b0:	2c09      	cmp	r4, #9
 80061b2:	4682      	mov	sl, r0
 80061b4:	468b      	mov	fp, r1
 80061b6:	dc13      	bgt.n	80061e0 <_strtod_l+0x3d0>
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f43f ae67 	beq.w	8005e8e <_strtod_l+0x7e>
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	dd7a      	ble.n	80062ba <_strtod_l+0x4aa>
 80061c4:	2b16      	cmp	r3, #22
 80061c6:	dc61      	bgt.n	800628c <_strtod_l+0x47c>
 80061c8:	4a75      	ldr	r2, [pc, #468]	; (80063a0 <_strtod_l+0x590>)
 80061ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80061ce:	e9de 0100 	ldrd	r0, r1, [lr]
 80061d2:	4652      	mov	r2, sl
 80061d4:	465b      	mov	r3, fp
 80061d6:	f7fa fa0f 	bl	80005f8 <__aeabi_dmul>
 80061da:	4682      	mov	sl, r0
 80061dc:	468b      	mov	fp, r1
 80061de:	e656      	b.n	8005e8e <_strtod_l+0x7e>
 80061e0:	4b6f      	ldr	r3, [pc, #444]	; (80063a0 <_strtod_l+0x590>)
 80061e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80061e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80061ea:	f7fa fa05 	bl	80005f8 <__aeabi_dmul>
 80061ee:	4606      	mov	r6, r0
 80061f0:	4628      	mov	r0, r5
 80061f2:	460f      	mov	r7, r1
 80061f4:	f7fa f986 	bl	8000504 <__aeabi_ui2d>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4630      	mov	r0, r6
 80061fe:	4639      	mov	r1, r7
 8006200:	f7fa f844 	bl	800028c <__adddf3>
 8006204:	2c0f      	cmp	r4, #15
 8006206:	4682      	mov	sl, r0
 8006208:	468b      	mov	fp, r1
 800620a:	ddd5      	ble.n	80061b8 <_strtod_l+0x3a8>
 800620c:	9b06      	ldr	r3, [sp, #24]
 800620e:	eba4 0808 	sub.w	r8, r4, r8
 8006212:	4498      	add	r8, r3
 8006214:	f1b8 0f00 	cmp.w	r8, #0
 8006218:	f340 8096 	ble.w	8006348 <_strtod_l+0x538>
 800621c:	f018 030f 	ands.w	r3, r8, #15
 8006220:	d00a      	beq.n	8006238 <_strtod_l+0x428>
 8006222:	495f      	ldr	r1, [pc, #380]	; (80063a0 <_strtod_l+0x590>)
 8006224:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006228:	4652      	mov	r2, sl
 800622a:	465b      	mov	r3, fp
 800622c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006230:	f7fa f9e2 	bl	80005f8 <__aeabi_dmul>
 8006234:	4682      	mov	sl, r0
 8006236:	468b      	mov	fp, r1
 8006238:	f038 080f 	bics.w	r8, r8, #15
 800623c:	d073      	beq.n	8006326 <_strtod_l+0x516>
 800623e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006242:	dd47      	ble.n	80062d4 <_strtod_l+0x4c4>
 8006244:	2400      	movs	r4, #0
 8006246:	46a0      	mov	r8, r4
 8006248:	9407      	str	r4, [sp, #28]
 800624a:	9405      	str	r4, [sp, #20]
 800624c:	2322      	movs	r3, #34	; 0x22
 800624e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80063a8 <_strtod_l+0x598>
 8006252:	f8c9 3000 	str.w	r3, [r9]
 8006256:	f04f 0a00 	mov.w	sl, #0
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f43f ae16 	beq.w	8005e8e <_strtod_l+0x7e>
 8006262:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006264:	4648      	mov	r0, r9
 8006266:	f001 fe52 	bl	8007f0e <_Bfree>
 800626a:	9905      	ldr	r1, [sp, #20]
 800626c:	4648      	mov	r0, r9
 800626e:	f001 fe4e 	bl	8007f0e <_Bfree>
 8006272:	4641      	mov	r1, r8
 8006274:	4648      	mov	r0, r9
 8006276:	f001 fe4a 	bl	8007f0e <_Bfree>
 800627a:	9907      	ldr	r1, [sp, #28]
 800627c:	4648      	mov	r0, r9
 800627e:	f001 fe46 	bl	8007f0e <_Bfree>
 8006282:	4621      	mov	r1, r4
 8006284:	4648      	mov	r0, r9
 8006286:	f001 fe42 	bl	8007f0e <_Bfree>
 800628a:	e600      	b.n	8005e8e <_strtod_l+0x7e>
 800628c:	9a06      	ldr	r2, [sp, #24]
 800628e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006292:	4293      	cmp	r3, r2
 8006294:	dbba      	blt.n	800620c <_strtod_l+0x3fc>
 8006296:	4d42      	ldr	r5, [pc, #264]	; (80063a0 <_strtod_l+0x590>)
 8006298:	f1c4 040f 	rsb	r4, r4, #15
 800629c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80062a0:	4652      	mov	r2, sl
 80062a2:	465b      	mov	r3, fp
 80062a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062a8:	f7fa f9a6 	bl	80005f8 <__aeabi_dmul>
 80062ac:	9b06      	ldr	r3, [sp, #24]
 80062ae:	1b1c      	subs	r4, r3, r4
 80062b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80062b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062b8:	e78d      	b.n	80061d6 <_strtod_l+0x3c6>
 80062ba:	f113 0f16 	cmn.w	r3, #22
 80062be:	dba5      	blt.n	800620c <_strtod_l+0x3fc>
 80062c0:	4a37      	ldr	r2, [pc, #220]	; (80063a0 <_strtod_l+0x590>)
 80062c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80062c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80062ca:	4650      	mov	r0, sl
 80062cc:	4659      	mov	r1, fp
 80062ce:	f7fa fabd 	bl	800084c <__aeabi_ddiv>
 80062d2:	e782      	b.n	80061da <_strtod_l+0x3ca>
 80062d4:	2300      	movs	r3, #0
 80062d6:	4e33      	ldr	r6, [pc, #204]	; (80063a4 <_strtod_l+0x594>)
 80062d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80062dc:	4650      	mov	r0, sl
 80062de:	4659      	mov	r1, fp
 80062e0:	461d      	mov	r5, r3
 80062e2:	f1b8 0f01 	cmp.w	r8, #1
 80062e6:	dc21      	bgt.n	800632c <_strtod_l+0x51c>
 80062e8:	b10b      	cbz	r3, 80062ee <_strtod_l+0x4de>
 80062ea:	4682      	mov	sl, r0
 80062ec:	468b      	mov	fp, r1
 80062ee:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <_strtod_l+0x594>)
 80062f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80062f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80062f8:	4652      	mov	r2, sl
 80062fa:	465b      	mov	r3, fp
 80062fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006300:	f7fa f97a 	bl	80005f8 <__aeabi_dmul>
 8006304:	4b28      	ldr	r3, [pc, #160]	; (80063a8 <_strtod_l+0x598>)
 8006306:	460a      	mov	r2, r1
 8006308:	400b      	ands	r3, r1
 800630a:	4928      	ldr	r1, [pc, #160]	; (80063ac <_strtod_l+0x59c>)
 800630c:	428b      	cmp	r3, r1
 800630e:	4682      	mov	sl, r0
 8006310:	d898      	bhi.n	8006244 <_strtod_l+0x434>
 8006312:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006316:	428b      	cmp	r3, r1
 8006318:	bf86      	itte	hi
 800631a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80063b4 <_strtod_l+0x5a4>
 800631e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006322:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006326:	2300      	movs	r3, #0
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	e077      	b.n	800641c <_strtod_l+0x60c>
 800632c:	f018 0f01 	tst.w	r8, #1
 8006330:	d006      	beq.n	8006340 <_strtod_l+0x530>
 8006332:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7fa f95d 	bl	80005f8 <__aeabi_dmul>
 800633e:	2301      	movs	r3, #1
 8006340:	3501      	adds	r5, #1
 8006342:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006346:	e7cc      	b.n	80062e2 <_strtod_l+0x4d2>
 8006348:	d0ed      	beq.n	8006326 <_strtod_l+0x516>
 800634a:	f1c8 0800 	rsb	r8, r8, #0
 800634e:	f018 020f 	ands.w	r2, r8, #15
 8006352:	d00a      	beq.n	800636a <_strtod_l+0x55a>
 8006354:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <_strtod_l+0x590>)
 8006356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800635a:	4650      	mov	r0, sl
 800635c:	4659      	mov	r1, fp
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7fa fa73 	bl	800084c <__aeabi_ddiv>
 8006366:	4682      	mov	sl, r0
 8006368:	468b      	mov	fp, r1
 800636a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800636e:	d0da      	beq.n	8006326 <_strtod_l+0x516>
 8006370:	f1b8 0f1f 	cmp.w	r8, #31
 8006374:	dd20      	ble.n	80063b8 <_strtod_l+0x5a8>
 8006376:	2400      	movs	r4, #0
 8006378:	46a0      	mov	r8, r4
 800637a:	9407      	str	r4, [sp, #28]
 800637c:	9405      	str	r4, [sp, #20]
 800637e:	2322      	movs	r3, #34	; 0x22
 8006380:	f04f 0a00 	mov.w	sl, #0
 8006384:	f04f 0b00 	mov.w	fp, #0
 8006388:	f8c9 3000 	str.w	r3, [r9]
 800638c:	e765      	b.n	800625a <_strtod_l+0x44a>
 800638e:	bf00      	nop
 8006390:	08008c49 	.word	0x08008c49
 8006394:	08008cd3 	.word	0x08008cd3
 8006398:	08008c51 	.word	0x08008c51
 800639c:	08008c94 	.word	0x08008c94
 80063a0:	08008d10 	.word	0x08008d10
 80063a4:	08008ce8 	.word	0x08008ce8
 80063a8:	7ff00000 	.word	0x7ff00000
 80063ac:	7ca00000 	.word	0x7ca00000
 80063b0:	fff80000 	.word	0xfff80000
 80063b4:	7fefffff 	.word	0x7fefffff
 80063b8:	f018 0310 	ands.w	r3, r8, #16
 80063bc:	bf18      	it	ne
 80063be:	236a      	movne	r3, #106	; 0x6a
 80063c0:	4da0      	ldr	r5, [pc, #640]	; (8006644 <_strtod_l+0x834>)
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	4650      	mov	r0, sl
 80063c6:	4659      	mov	r1, fp
 80063c8:	2300      	movs	r3, #0
 80063ca:	f1b8 0f00 	cmp.w	r8, #0
 80063ce:	f300 810a 	bgt.w	80065e6 <_strtod_l+0x7d6>
 80063d2:	b10b      	cbz	r3, 80063d8 <_strtod_l+0x5c8>
 80063d4:	4682      	mov	sl, r0
 80063d6:	468b      	mov	fp, r1
 80063d8:	9b04      	ldr	r3, [sp, #16]
 80063da:	b1bb      	cbz	r3, 800640c <_strtod_l+0x5fc>
 80063dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80063e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	4659      	mov	r1, fp
 80063e8:	dd10      	ble.n	800640c <_strtod_l+0x5fc>
 80063ea:	2b1f      	cmp	r3, #31
 80063ec:	f340 8107 	ble.w	80065fe <_strtod_l+0x7ee>
 80063f0:	2b34      	cmp	r3, #52	; 0x34
 80063f2:	bfde      	ittt	le
 80063f4:	3b20      	suble	r3, #32
 80063f6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80063fa:	fa02 f303 	lslle.w	r3, r2, r3
 80063fe:	f04f 0a00 	mov.w	sl, #0
 8006402:	bfcc      	ite	gt
 8006404:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006408:	ea03 0b01 	andle.w	fp, r3, r1
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	4650      	mov	r0, sl
 8006412:	4659      	mov	r1, fp
 8006414:	f7fa fb58 	bl	8000ac8 <__aeabi_dcmpeq>
 8006418:	2800      	cmp	r0, #0
 800641a:	d1ac      	bne.n	8006376 <_strtod_l+0x566>
 800641c:	9b07      	ldr	r3, [sp, #28]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	9a05      	ldr	r2, [sp, #20]
 8006422:	9908      	ldr	r1, [sp, #32]
 8006424:	4623      	mov	r3, r4
 8006426:	4648      	mov	r0, r9
 8006428:	f001 fdc3 	bl	8007fb2 <__s2b>
 800642c:	9007      	str	r0, [sp, #28]
 800642e:	2800      	cmp	r0, #0
 8006430:	f43f af08 	beq.w	8006244 <_strtod_l+0x434>
 8006434:	9a06      	ldr	r2, [sp, #24]
 8006436:	9b06      	ldr	r3, [sp, #24]
 8006438:	2a00      	cmp	r2, #0
 800643a:	f1c3 0300 	rsb	r3, r3, #0
 800643e:	bfa8      	it	ge
 8006440:	2300      	movge	r3, #0
 8006442:	930e      	str	r3, [sp, #56]	; 0x38
 8006444:	2400      	movs	r4, #0
 8006446:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800644a:	9316      	str	r3, [sp, #88]	; 0x58
 800644c:	46a0      	mov	r8, r4
 800644e:	9b07      	ldr	r3, [sp, #28]
 8006450:	4648      	mov	r0, r9
 8006452:	6859      	ldr	r1, [r3, #4]
 8006454:	f001 fd27 	bl	8007ea6 <_Balloc>
 8006458:	9005      	str	r0, [sp, #20]
 800645a:	2800      	cmp	r0, #0
 800645c:	f43f aef6 	beq.w	800624c <_strtod_l+0x43c>
 8006460:	9b07      	ldr	r3, [sp, #28]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	3202      	adds	r2, #2
 8006466:	f103 010c 	add.w	r1, r3, #12
 800646a:	0092      	lsls	r2, r2, #2
 800646c:	300c      	adds	r0, #12
 800646e:	f001 fd0f 	bl	8007e90 <memcpy>
 8006472:	aa1e      	add	r2, sp, #120	; 0x78
 8006474:	a91d      	add	r1, sp, #116	; 0x74
 8006476:	ec4b ab10 	vmov	d0, sl, fp
 800647a:	4648      	mov	r0, r9
 800647c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006480:	f002 f852 	bl	8008528 <__d2b>
 8006484:	901c      	str	r0, [sp, #112]	; 0x70
 8006486:	2800      	cmp	r0, #0
 8006488:	f43f aee0 	beq.w	800624c <_strtod_l+0x43c>
 800648c:	2101      	movs	r1, #1
 800648e:	4648      	mov	r0, r9
 8006490:	f001 fe1b 	bl	80080ca <__i2b>
 8006494:	4680      	mov	r8, r0
 8006496:	2800      	cmp	r0, #0
 8006498:	f43f aed8 	beq.w	800624c <_strtod_l+0x43c>
 800649c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800649e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	bfab      	itete	ge
 80064a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80064a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80064a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80064aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80064ac:	bfac      	ite	ge
 80064ae:	18f7      	addge	r7, r6, r3
 80064b0:	1b9d      	sublt	r5, r3, r6
 80064b2:	9b04      	ldr	r3, [sp, #16]
 80064b4:	1af6      	subs	r6, r6, r3
 80064b6:	4416      	add	r6, r2
 80064b8:	4b63      	ldr	r3, [pc, #396]	; (8006648 <_strtod_l+0x838>)
 80064ba:	3e01      	subs	r6, #1
 80064bc:	429e      	cmp	r6, r3
 80064be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80064c2:	f280 80af 	bge.w	8006624 <_strtod_l+0x814>
 80064c6:	1b9b      	subs	r3, r3, r6
 80064c8:	2b1f      	cmp	r3, #31
 80064ca:	eba2 0203 	sub.w	r2, r2, r3
 80064ce:	f04f 0101 	mov.w	r1, #1
 80064d2:	f300 809b 	bgt.w	800660c <_strtod_l+0x7fc>
 80064d6:	fa01 f303 	lsl.w	r3, r1, r3
 80064da:	930f      	str	r3, [sp, #60]	; 0x3c
 80064dc:	2300      	movs	r3, #0
 80064de:	930a      	str	r3, [sp, #40]	; 0x28
 80064e0:	18be      	adds	r6, r7, r2
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	42b7      	cmp	r7, r6
 80064e6:	4415      	add	r5, r2
 80064e8:	441d      	add	r5, r3
 80064ea:	463b      	mov	r3, r7
 80064ec:	bfa8      	it	ge
 80064ee:	4633      	movge	r3, r6
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	bfa8      	it	ge
 80064f4:	462b      	movge	r3, r5
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bfc2      	ittt	gt
 80064fa:	1af6      	subgt	r6, r6, r3
 80064fc:	1aed      	subgt	r5, r5, r3
 80064fe:	1aff      	subgt	r7, r7, r3
 8006500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006502:	b1bb      	cbz	r3, 8006534 <_strtod_l+0x724>
 8006504:	4641      	mov	r1, r8
 8006506:	461a      	mov	r2, r3
 8006508:	4648      	mov	r0, r9
 800650a:	f001 fe7d 	bl	8008208 <__pow5mult>
 800650e:	4680      	mov	r8, r0
 8006510:	2800      	cmp	r0, #0
 8006512:	f43f ae9b 	beq.w	800624c <_strtod_l+0x43c>
 8006516:	4601      	mov	r1, r0
 8006518:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800651a:	4648      	mov	r0, r9
 800651c:	f001 fdde 	bl	80080dc <__multiply>
 8006520:	900c      	str	r0, [sp, #48]	; 0x30
 8006522:	2800      	cmp	r0, #0
 8006524:	f43f ae92 	beq.w	800624c <_strtod_l+0x43c>
 8006528:	991c      	ldr	r1, [sp, #112]	; 0x70
 800652a:	4648      	mov	r0, r9
 800652c:	f001 fcef 	bl	8007f0e <_Bfree>
 8006530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006532:	931c      	str	r3, [sp, #112]	; 0x70
 8006534:	2e00      	cmp	r6, #0
 8006536:	dc7a      	bgt.n	800662e <_strtod_l+0x81e>
 8006538:	9b06      	ldr	r3, [sp, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	dd08      	ble.n	8006550 <_strtod_l+0x740>
 800653e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006540:	9905      	ldr	r1, [sp, #20]
 8006542:	4648      	mov	r0, r9
 8006544:	f001 fe60 	bl	8008208 <__pow5mult>
 8006548:	9005      	str	r0, [sp, #20]
 800654a:	2800      	cmp	r0, #0
 800654c:	f43f ae7e 	beq.w	800624c <_strtod_l+0x43c>
 8006550:	2d00      	cmp	r5, #0
 8006552:	dd08      	ble.n	8006566 <_strtod_l+0x756>
 8006554:	462a      	mov	r2, r5
 8006556:	9905      	ldr	r1, [sp, #20]
 8006558:	4648      	mov	r0, r9
 800655a:	f001 fea3 	bl	80082a4 <__lshift>
 800655e:	9005      	str	r0, [sp, #20]
 8006560:	2800      	cmp	r0, #0
 8006562:	f43f ae73 	beq.w	800624c <_strtod_l+0x43c>
 8006566:	2f00      	cmp	r7, #0
 8006568:	dd08      	ble.n	800657c <_strtod_l+0x76c>
 800656a:	4641      	mov	r1, r8
 800656c:	463a      	mov	r2, r7
 800656e:	4648      	mov	r0, r9
 8006570:	f001 fe98 	bl	80082a4 <__lshift>
 8006574:	4680      	mov	r8, r0
 8006576:	2800      	cmp	r0, #0
 8006578:	f43f ae68 	beq.w	800624c <_strtod_l+0x43c>
 800657c:	9a05      	ldr	r2, [sp, #20]
 800657e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006580:	4648      	mov	r0, r9
 8006582:	f001 fefd 	bl	8008380 <__mdiff>
 8006586:	4604      	mov	r4, r0
 8006588:	2800      	cmp	r0, #0
 800658a:	f43f ae5f 	beq.w	800624c <_strtod_l+0x43c>
 800658e:	68c3      	ldr	r3, [r0, #12]
 8006590:	930c      	str	r3, [sp, #48]	; 0x30
 8006592:	2300      	movs	r3, #0
 8006594:	60c3      	str	r3, [r0, #12]
 8006596:	4641      	mov	r1, r8
 8006598:	f001 fed8 	bl	800834c <__mcmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	da55      	bge.n	800664c <_strtod_l+0x83c>
 80065a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065a2:	b9e3      	cbnz	r3, 80065de <_strtod_l+0x7ce>
 80065a4:	f1ba 0f00 	cmp.w	sl, #0
 80065a8:	d119      	bne.n	80065de <_strtod_l+0x7ce>
 80065aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065ae:	b9b3      	cbnz	r3, 80065de <_strtod_l+0x7ce>
 80065b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065b4:	0d1b      	lsrs	r3, r3, #20
 80065b6:	051b      	lsls	r3, r3, #20
 80065b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80065bc:	d90f      	bls.n	80065de <_strtod_l+0x7ce>
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	b913      	cbnz	r3, 80065c8 <_strtod_l+0x7b8>
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	dd0a      	ble.n	80065de <_strtod_l+0x7ce>
 80065c8:	4621      	mov	r1, r4
 80065ca:	2201      	movs	r2, #1
 80065cc:	4648      	mov	r0, r9
 80065ce:	f001 fe69 	bl	80082a4 <__lshift>
 80065d2:	4641      	mov	r1, r8
 80065d4:	4604      	mov	r4, r0
 80065d6:	f001 feb9 	bl	800834c <__mcmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	dc67      	bgt.n	80066ae <_strtod_l+0x89e>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d171      	bne.n	80066c8 <_strtod_l+0x8b8>
 80065e4:	e63d      	b.n	8006262 <_strtod_l+0x452>
 80065e6:	f018 0f01 	tst.w	r8, #1
 80065ea:	d004      	beq.n	80065f6 <_strtod_l+0x7e6>
 80065ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065f0:	f7fa f802 	bl	80005f8 <__aeabi_dmul>
 80065f4:	2301      	movs	r3, #1
 80065f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80065fa:	3508      	adds	r5, #8
 80065fc:	e6e5      	b.n	80063ca <_strtod_l+0x5ba>
 80065fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	ea03 0a0a 	and.w	sl, r3, sl
 800660a:	e6ff      	b.n	800640c <_strtod_l+0x5fc>
 800660c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006610:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006614:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006618:	36e2      	adds	r6, #226	; 0xe2
 800661a:	fa01 f306 	lsl.w	r3, r1, r6
 800661e:	930a      	str	r3, [sp, #40]	; 0x28
 8006620:	910f      	str	r1, [sp, #60]	; 0x3c
 8006622:	e75d      	b.n	80064e0 <_strtod_l+0x6d0>
 8006624:	2300      	movs	r3, #0
 8006626:	930a      	str	r3, [sp, #40]	; 0x28
 8006628:	2301      	movs	r3, #1
 800662a:	930f      	str	r3, [sp, #60]	; 0x3c
 800662c:	e758      	b.n	80064e0 <_strtod_l+0x6d0>
 800662e:	4632      	mov	r2, r6
 8006630:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006632:	4648      	mov	r0, r9
 8006634:	f001 fe36 	bl	80082a4 <__lshift>
 8006638:	901c      	str	r0, [sp, #112]	; 0x70
 800663a:	2800      	cmp	r0, #0
 800663c:	f47f af7c 	bne.w	8006538 <_strtod_l+0x728>
 8006640:	e604      	b.n	800624c <_strtod_l+0x43c>
 8006642:	bf00      	nop
 8006644:	08008ca8 	.word	0x08008ca8
 8006648:	fffffc02 	.word	0xfffffc02
 800664c:	465d      	mov	r5, fp
 800664e:	f040 8086 	bne.w	800675e <_strtod_l+0x94e>
 8006652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006658:	b32a      	cbz	r2, 80066a6 <_strtod_l+0x896>
 800665a:	4aaf      	ldr	r2, [pc, #700]	; (8006918 <_strtod_l+0xb08>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d153      	bne.n	8006708 <_strtod_l+0x8f8>
 8006660:	9b04      	ldr	r3, [sp, #16]
 8006662:	4650      	mov	r0, sl
 8006664:	b1d3      	cbz	r3, 800669c <_strtod_l+0x88c>
 8006666:	4aad      	ldr	r2, [pc, #692]	; (800691c <_strtod_l+0xb0c>)
 8006668:	402a      	ands	r2, r5
 800666a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800666e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006672:	d816      	bhi.n	80066a2 <_strtod_l+0x892>
 8006674:	0d12      	lsrs	r2, r2, #20
 8006676:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800667a:	fa01 f303 	lsl.w	r3, r1, r3
 800667e:	4298      	cmp	r0, r3
 8006680:	d142      	bne.n	8006708 <_strtod_l+0x8f8>
 8006682:	4ba7      	ldr	r3, [pc, #668]	; (8006920 <_strtod_l+0xb10>)
 8006684:	429d      	cmp	r5, r3
 8006686:	d102      	bne.n	800668e <_strtod_l+0x87e>
 8006688:	3001      	adds	r0, #1
 800668a:	f43f addf 	beq.w	800624c <_strtod_l+0x43c>
 800668e:	4ba3      	ldr	r3, [pc, #652]	; (800691c <_strtod_l+0xb0c>)
 8006690:	402b      	ands	r3, r5
 8006692:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006696:	f04f 0a00 	mov.w	sl, #0
 800669a:	e7a0      	b.n	80065de <_strtod_l+0x7ce>
 800669c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a0:	e7ed      	b.n	800667e <_strtod_l+0x86e>
 80066a2:	460b      	mov	r3, r1
 80066a4:	e7eb      	b.n	800667e <_strtod_l+0x86e>
 80066a6:	bb7b      	cbnz	r3, 8006708 <_strtod_l+0x8f8>
 80066a8:	f1ba 0f00 	cmp.w	sl, #0
 80066ac:	d12c      	bne.n	8006708 <_strtod_l+0x8f8>
 80066ae:	9904      	ldr	r1, [sp, #16]
 80066b0:	4a9a      	ldr	r2, [pc, #616]	; (800691c <_strtod_l+0xb0c>)
 80066b2:	465b      	mov	r3, fp
 80066b4:	b1f1      	cbz	r1, 80066f4 <_strtod_l+0x8e4>
 80066b6:	ea02 010b 	and.w	r1, r2, fp
 80066ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80066be:	dc19      	bgt.n	80066f4 <_strtod_l+0x8e4>
 80066c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80066c4:	f77f ae5b 	ble.w	800637e <_strtod_l+0x56e>
 80066c8:	4a96      	ldr	r2, [pc, #600]	; (8006924 <_strtod_l+0xb14>)
 80066ca:	2300      	movs	r3, #0
 80066cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80066d0:	4650      	mov	r0, sl
 80066d2:	4659      	mov	r1, fp
 80066d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80066d8:	f7f9 ff8e 	bl	80005f8 <__aeabi_dmul>
 80066dc:	4682      	mov	sl, r0
 80066de:	468b      	mov	fp, r1
 80066e0:	2900      	cmp	r1, #0
 80066e2:	f47f adbe 	bne.w	8006262 <_strtod_l+0x452>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f47f adbb 	bne.w	8006262 <_strtod_l+0x452>
 80066ec:	2322      	movs	r3, #34	; 0x22
 80066ee:	f8c9 3000 	str.w	r3, [r9]
 80066f2:	e5b6      	b.n	8006262 <_strtod_l+0x452>
 80066f4:	4013      	ands	r3, r2
 80066f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80066fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80066fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006702:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006706:	e76a      	b.n	80065de <_strtod_l+0x7ce>
 8006708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670a:	b193      	cbz	r3, 8006732 <_strtod_l+0x922>
 800670c:	422b      	tst	r3, r5
 800670e:	f43f af66 	beq.w	80065de <_strtod_l+0x7ce>
 8006712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006714:	9a04      	ldr	r2, [sp, #16]
 8006716:	4650      	mov	r0, sl
 8006718:	4659      	mov	r1, fp
 800671a:	b173      	cbz	r3, 800673a <_strtod_l+0x92a>
 800671c:	f7ff fb5a 	bl	8005dd4 <sulp>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006728:	f7f9 fdb0 	bl	800028c <__adddf3>
 800672c:	4682      	mov	sl, r0
 800672e:	468b      	mov	fp, r1
 8006730:	e755      	b.n	80065de <_strtod_l+0x7ce>
 8006732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006734:	ea13 0f0a 	tst.w	r3, sl
 8006738:	e7e9      	b.n	800670e <_strtod_l+0x8fe>
 800673a:	f7ff fb4b 	bl	8005dd4 <sulp>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006746:	f7f9 fd9f 	bl	8000288 <__aeabi_dsub>
 800674a:	2200      	movs	r2, #0
 800674c:	2300      	movs	r3, #0
 800674e:	4682      	mov	sl, r0
 8006750:	468b      	mov	fp, r1
 8006752:	f7fa f9b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006756:	2800      	cmp	r0, #0
 8006758:	f47f ae11 	bne.w	800637e <_strtod_l+0x56e>
 800675c:	e73f      	b.n	80065de <_strtod_l+0x7ce>
 800675e:	4641      	mov	r1, r8
 8006760:	4620      	mov	r0, r4
 8006762:	f001 ff30 	bl	80085c6 <__ratio>
 8006766:	ec57 6b10 	vmov	r6, r7, d0
 800676a:	2200      	movs	r2, #0
 800676c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006770:	ee10 0a10 	vmov	r0, s0
 8006774:	4639      	mov	r1, r7
 8006776:	f7fa f9bb 	bl	8000af0 <__aeabi_dcmple>
 800677a:	2800      	cmp	r0, #0
 800677c:	d077      	beq.n	800686e <_strtod_l+0xa5e>
 800677e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006780:	2b00      	cmp	r3, #0
 8006782:	d04a      	beq.n	800681a <_strtod_l+0xa0a>
 8006784:	4b68      	ldr	r3, [pc, #416]	; (8006928 <_strtod_l+0xb18>)
 8006786:	2200      	movs	r2, #0
 8006788:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800678c:	4f66      	ldr	r7, [pc, #408]	; (8006928 <_strtod_l+0xb18>)
 800678e:	2600      	movs	r6, #0
 8006790:	4b62      	ldr	r3, [pc, #392]	; (800691c <_strtod_l+0xb0c>)
 8006792:	402b      	ands	r3, r5
 8006794:	930f      	str	r3, [sp, #60]	; 0x3c
 8006796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006798:	4b64      	ldr	r3, [pc, #400]	; (800692c <_strtod_l+0xb1c>)
 800679a:	429a      	cmp	r2, r3
 800679c:	f040 80ce 	bne.w	800693c <_strtod_l+0xb2c>
 80067a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80067ac:	ec4b ab10 	vmov	d0, sl, fp
 80067b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80067b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067b8:	f001 fe40 	bl	800843c <__ulp>
 80067bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067c0:	ec53 2b10 	vmov	r2, r3, d0
 80067c4:	f7f9 ff18 	bl	80005f8 <__aeabi_dmul>
 80067c8:	4652      	mov	r2, sl
 80067ca:	465b      	mov	r3, fp
 80067cc:	f7f9 fd5e 	bl	800028c <__adddf3>
 80067d0:	460b      	mov	r3, r1
 80067d2:	4952      	ldr	r1, [pc, #328]	; (800691c <_strtod_l+0xb0c>)
 80067d4:	4a56      	ldr	r2, [pc, #344]	; (8006930 <_strtod_l+0xb20>)
 80067d6:	4019      	ands	r1, r3
 80067d8:	4291      	cmp	r1, r2
 80067da:	4682      	mov	sl, r0
 80067dc:	d95b      	bls.n	8006896 <_strtod_l+0xa86>
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d103      	bne.n	80067f0 <_strtod_l+0x9e0>
 80067e8:	9b08      	ldr	r3, [sp, #32]
 80067ea:	3301      	adds	r3, #1
 80067ec:	f43f ad2e 	beq.w	800624c <_strtod_l+0x43c>
 80067f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006920 <_strtod_l+0xb10>
 80067f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80067f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067fa:	4648      	mov	r0, r9
 80067fc:	f001 fb87 	bl	8007f0e <_Bfree>
 8006800:	9905      	ldr	r1, [sp, #20]
 8006802:	4648      	mov	r0, r9
 8006804:	f001 fb83 	bl	8007f0e <_Bfree>
 8006808:	4641      	mov	r1, r8
 800680a:	4648      	mov	r0, r9
 800680c:	f001 fb7f 	bl	8007f0e <_Bfree>
 8006810:	4621      	mov	r1, r4
 8006812:	4648      	mov	r0, r9
 8006814:	f001 fb7b 	bl	8007f0e <_Bfree>
 8006818:	e619      	b.n	800644e <_strtod_l+0x63e>
 800681a:	f1ba 0f00 	cmp.w	sl, #0
 800681e:	d11a      	bne.n	8006856 <_strtod_l+0xa46>
 8006820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006824:	b9eb      	cbnz	r3, 8006862 <_strtod_l+0xa52>
 8006826:	2200      	movs	r2, #0
 8006828:	4b3f      	ldr	r3, [pc, #252]	; (8006928 <_strtod_l+0xb18>)
 800682a:	4630      	mov	r0, r6
 800682c:	4639      	mov	r1, r7
 800682e:	f7fa f955 	bl	8000adc <__aeabi_dcmplt>
 8006832:	b9c8      	cbnz	r0, 8006868 <_strtod_l+0xa58>
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	2200      	movs	r2, #0
 800683a:	4b3e      	ldr	r3, [pc, #248]	; (8006934 <_strtod_l+0xb24>)
 800683c:	f7f9 fedc 	bl	80005f8 <__aeabi_dmul>
 8006840:	4606      	mov	r6, r0
 8006842:	460f      	mov	r7, r1
 8006844:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006848:	9618      	str	r6, [sp, #96]	; 0x60
 800684a:	9319      	str	r3, [sp, #100]	; 0x64
 800684c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006850:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006854:	e79c      	b.n	8006790 <_strtod_l+0x980>
 8006856:	f1ba 0f01 	cmp.w	sl, #1
 800685a:	d102      	bne.n	8006862 <_strtod_l+0xa52>
 800685c:	2d00      	cmp	r5, #0
 800685e:	f43f ad8e 	beq.w	800637e <_strtod_l+0x56e>
 8006862:	2200      	movs	r2, #0
 8006864:	4b34      	ldr	r3, [pc, #208]	; (8006938 <_strtod_l+0xb28>)
 8006866:	e78f      	b.n	8006788 <_strtod_l+0x978>
 8006868:	2600      	movs	r6, #0
 800686a:	4f32      	ldr	r7, [pc, #200]	; (8006934 <_strtod_l+0xb24>)
 800686c:	e7ea      	b.n	8006844 <_strtod_l+0xa34>
 800686e:	4b31      	ldr	r3, [pc, #196]	; (8006934 <_strtod_l+0xb24>)
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	2200      	movs	r2, #0
 8006876:	f7f9 febf 	bl	80005f8 <__aeabi_dmul>
 800687a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800687c:	4606      	mov	r6, r0
 800687e:	460f      	mov	r7, r1
 8006880:	b933      	cbnz	r3, 8006890 <_strtod_l+0xa80>
 8006882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006886:	9010      	str	r0, [sp, #64]	; 0x40
 8006888:	9311      	str	r3, [sp, #68]	; 0x44
 800688a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800688e:	e7df      	b.n	8006850 <_strtod_l+0xa40>
 8006890:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006894:	e7f9      	b.n	800688a <_strtod_l+0xa7a>
 8006896:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1ab      	bne.n	80067f8 <_strtod_l+0x9e8>
 80068a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80068a4:	0d1b      	lsrs	r3, r3, #20
 80068a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068a8:	051b      	lsls	r3, r3, #20
 80068aa:	429a      	cmp	r2, r3
 80068ac:	465d      	mov	r5, fp
 80068ae:	d1a3      	bne.n	80067f8 <_strtod_l+0x9e8>
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7fa f950 	bl	8000b58 <__aeabi_d2iz>
 80068b8:	f7f9 fe34 	bl	8000524 <__aeabi_i2d>
 80068bc:	460b      	mov	r3, r1
 80068be:	4602      	mov	r2, r0
 80068c0:	4639      	mov	r1, r7
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7f9 fce0 	bl	8000288 <__aeabi_dsub>
 80068c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068ca:	4606      	mov	r6, r0
 80068cc:	460f      	mov	r7, r1
 80068ce:	b933      	cbnz	r3, 80068de <_strtod_l+0xace>
 80068d0:	f1ba 0f00 	cmp.w	sl, #0
 80068d4:	d103      	bne.n	80068de <_strtod_l+0xace>
 80068d6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80068da:	2d00      	cmp	r5, #0
 80068dc:	d06d      	beq.n	80069ba <_strtod_l+0xbaa>
 80068de:	a30a      	add	r3, pc, #40	; (adr r3, 8006908 <_strtod_l+0xaf8>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7fa f8f8 	bl	8000adc <__aeabi_dcmplt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f47f acb8 	bne.w	8006262 <_strtod_l+0x452>
 80068f2:	a307      	add	r3, pc, #28	; (adr r3, 8006910 <_strtod_l+0xb00>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	4630      	mov	r0, r6
 80068fa:	4639      	mov	r1, r7
 80068fc:	f7fa f90c 	bl	8000b18 <__aeabi_dcmpgt>
 8006900:	2800      	cmp	r0, #0
 8006902:	f43f af79 	beq.w	80067f8 <_strtod_l+0x9e8>
 8006906:	e4ac      	b.n	8006262 <_strtod_l+0x452>
 8006908:	94a03595 	.word	0x94a03595
 800690c:	3fdfffff 	.word	0x3fdfffff
 8006910:	35afe535 	.word	0x35afe535
 8006914:	3fe00000 	.word	0x3fe00000
 8006918:	000fffff 	.word	0x000fffff
 800691c:	7ff00000 	.word	0x7ff00000
 8006920:	7fefffff 	.word	0x7fefffff
 8006924:	39500000 	.word	0x39500000
 8006928:	3ff00000 	.word	0x3ff00000
 800692c:	7fe00000 	.word	0x7fe00000
 8006930:	7c9fffff 	.word	0x7c9fffff
 8006934:	3fe00000 	.word	0x3fe00000
 8006938:	bff00000 	.word	0xbff00000
 800693c:	9b04      	ldr	r3, [sp, #16]
 800693e:	b333      	cbz	r3, 800698e <_strtod_l+0xb7e>
 8006940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006942:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006946:	d822      	bhi.n	800698e <_strtod_l+0xb7e>
 8006948:	a327      	add	r3, pc, #156	; (adr r3, 80069e8 <_strtod_l+0xbd8>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	4630      	mov	r0, r6
 8006950:	4639      	mov	r1, r7
 8006952:	f7fa f8cd 	bl	8000af0 <__aeabi_dcmple>
 8006956:	b1a0      	cbz	r0, 8006982 <_strtod_l+0xb72>
 8006958:	4639      	mov	r1, r7
 800695a:	4630      	mov	r0, r6
 800695c:	f7fa f924 	bl	8000ba8 <__aeabi_d2uiz>
 8006960:	2800      	cmp	r0, #0
 8006962:	bf08      	it	eq
 8006964:	2001      	moveq	r0, #1
 8006966:	f7f9 fdcd 	bl	8000504 <__aeabi_ui2d>
 800696a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	bb03      	cbnz	r3, 80069b4 <_strtod_l+0xba4>
 8006972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006976:	9012      	str	r0, [sp, #72]	; 0x48
 8006978:	9313      	str	r3, [sp, #76]	; 0x4c
 800697a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800697e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006986:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	930b      	str	r3, [sp, #44]	; 0x2c
 800698e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006992:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006996:	f001 fd51 	bl	800843c <__ulp>
 800699a:	4650      	mov	r0, sl
 800699c:	ec53 2b10 	vmov	r2, r3, d0
 80069a0:	4659      	mov	r1, fp
 80069a2:	f7f9 fe29 	bl	80005f8 <__aeabi_dmul>
 80069a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069aa:	f7f9 fc6f 	bl	800028c <__adddf3>
 80069ae:	4682      	mov	sl, r0
 80069b0:	468b      	mov	fp, r1
 80069b2:	e772      	b.n	800689a <_strtod_l+0xa8a>
 80069b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80069b8:	e7df      	b.n	800697a <_strtod_l+0xb6a>
 80069ba:	a30d      	add	r3, pc, #52	; (adr r3, 80069f0 <_strtod_l+0xbe0>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7fa f88c 	bl	8000adc <__aeabi_dcmplt>
 80069c4:	e79c      	b.n	8006900 <_strtod_l+0xaf0>
 80069c6:	2300      	movs	r3, #0
 80069c8:	930d      	str	r3, [sp, #52]	; 0x34
 80069ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	f7ff ba61 	b.w	8005e96 <_strtod_l+0x86>
 80069d4:	2b65      	cmp	r3, #101	; 0x65
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f43f ab4e 	beq.w	800607a <_strtod_l+0x26a>
 80069de:	2101      	movs	r1, #1
 80069e0:	4614      	mov	r4, r2
 80069e2:	9104      	str	r1, [sp, #16]
 80069e4:	f7ff bacb 	b.w	8005f7e <_strtod_l+0x16e>
 80069e8:	ffc00000 	.word	0xffc00000
 80069ec:	41dfffff 	.word	0x41dfffff
 80069f0:	94a03595 	.word	0x94a03595
 80069f4:	3fcfffff 	.word	0x3fcfffff

080069f8 <_strtod_r>:
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <_strtod_r+0x18>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	b410      	push	{r4}
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	4c04      	ldr	r4, [pc, #16]	; (8006a14 <_strtod_r+0x1c>)
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bf08      	it	eq
 8006a06:	4623      	moveq	r3, r4
 8006a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a0c:	f7ff ba00 	b.w	8005e10 <_strtod_l>
 8006a10:	20000018 	.word	0x20000018
 8006a14:	2000007c 	.word	0x2000007c

08006a18 <strtod>:
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <strtod+0x20>)
 8006a1a:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <strtod+0x24>)
 8006a1c:	b410      	push	{r4}
 8006a1e:	681c      	ldr	r4, [r3, #0]
 8006a20:	6a23      	ldr	r3, [r4, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf08      	it	eq
 8006a26:	4613      	moveq	r3, r2
 8006a28:	460a      	mov	r2, r1
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a32:	f7ff b9ed 	b.w	8005e10 <_strtod_l>
 8006a36:	bf00      	nop
 8006a38:	20000018 	.word	0x20000018
 8006a3c:	2000007c 	.word	0x2000007c

08006a40 <_strtol_l.isra.0>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4680      	mov	r8, r0
 8006a46:	4689      	mov	r9, r1
 8006a48:	4692      	mov	sl, r2
 8006a4a:	461e      	mov	r6, r3
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	463d      	mov	r5, r7
 8006a50:	9808      	ldr	r0, [sp, #32]
 8006a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a56:	f001 f9ed 	bl	8007e34 <__locale_ctype_ptr_l>
 8006a5a:	4420      	add	r0, r4
 8006a5c:	7843      	ldrb	r3, [r0, #1]
 8006a5e:	f013 0308 	ands.w	r3, r3, #8
 8006a62:	d132      	bne.n	8006aca <_strtol_l.isra.0+0x8a>
 8006a64:	2c2d      	cmp	r4, #45	; 0x2d
 8006a66:	d132      	bne.n	8006ace <_strtol_l.isra.0+0x8e>
 8006a68:	787c      	ldrb	r4, [r7, #1]
 8006a6a:	1cbd      	adds	r5, r7, #2
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	d05d      	beq.n	8006b2e <_strtol_l.isra.0+0xee>
 8006a72:	2e10      	cmp	r6, #16
 8006a74:	d109      	bne.n	8006a8a <_strtol_l.isra.0+0x4a>
 8006a76:	2c30      	cmp	r4, #48	; 0x30
 8006a78:	d107      	bne.n	8006a8a <_strtol_l.isra.0+0x4a>
 8006a7a:	782b      	ldrb	r3, [r5, #0]
 8006a7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a80:	2b58      	cmp	r3, #88	; 0x58
 8006a82:	d14f      	bne.n	8006b24 <_strtol_l.isra.0+0xe4>
 8006a84:	786c      	ldrb	r4, [r5, #1]
 8006a86:	2610      	movs	r6, #16
 8006a88:	3502      	adds	r5, #2
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	bf14      	ite	ne
 8006a8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006a92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006a96:	2700      	movs	r7, #0
 8006a98:	fbb1 fcf6 	udiv	ip, r1, r6
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006aa2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	d817      	bhi.n	8006ada <_strtol_l.isra.0+0x9a>
 8006aaa:	461c      	mov	r4, r3
 8006aac:	42a6      	cmp	r6, r4
 8006aae:	dd23      	ble.n	8006af8 <_strtol_l.isra.0+0xb8>
 8006ab0:	1c7b      	adds	r3, r7, #1
 8006ab2:	d007      	beq.n	8006ac4 <_strtol_l.isra.0+0x84>
 8006ab4:	4584      	cmp	ip, r0
 8006ab6:	d31c      	bcc.n	8006af2 <_strtol_l.isra.0+0xb2>
 8006ab8:	d101      	bne.n	8006abe <_strtol_l.isra.0+0x7e>
 8006aba:	45a6      	cmp	lr, r4
 8006abc:	db19      	blt.n	8006af2 <_strtol_l.isra.0+0xb2>
 8006abe:	fb00 4006 	mla	r0, r0, r6, r4
 8006ac2:	2701      	movs	r7, #1
 8006ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ac8:	e7eb      	b.n	8006aa2 <_strtol_l.isra.0+0x62>
 8006aca:	462f      	mov	r7, r5
 8006acc:	e7bf      	b.n	8006a4e <_strtol_l.isra.0+0xe>
 8006ace:	2c2b      	cmp	r4, #43	; 0x2b
 8006ad0:	bf04      	itt	eq
 8006ad2:	1cbd      	addeq	r5, r7, #2
 8006ad4:	787c      	ldrbeq	r4, [r7, #1]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	e7c9      	b.n	8006a6e <_strtol_l.isra.0+0x2e>
 8006ada:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006ade:	2b19      	cmp	r3, #25
 8006ae0:	d801      	bhi.n	8006ae6 <_strtol_l.isra.0+0xa6>
 8006ae2:	3c37      	subs	r4, #55	; 0x37
 8006ae4:	e7e2      	b.n	8006aac <_strtol_l.isra.0+0x6c>
 8006ae6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006aea:	2b19      	cmp	r3, #25
 8006aec:	d804      	bhi.n	8006af8 <_strtol_l.isra.0+0xb8>
 8006aee:	3c57      	subs	r4, #87	; 0x57
 8006af0:	e7dc      	b.n	8006aac <_strtol_l.isra.0+0x6c>
 8006af2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006af6:	e7e5      	b.n	8006ac4 <_strtol_l.isra.0+0x84>
 8006af8:	1c7b      	adds	r3, r7, #1
 8006afa:	d108      	bne.n	8006b0e <_strtol_l.isra.0+0xce>
 8006afc:	2322      	movs	r3, #34	; 0x22
 8006afe:	f8c8 3000 	str.w	r3, [r8]
 8006b02:	4608      	mov	r0, r1
 8006b04:	f1ba 0f00 	cmp.w	sl, #0
 8006b08:	d107      	bne.n	8006b1a <_strtol_l.isra.0+0xda>
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	b102      	cbz	r2, 8006b12 <_strtol_l.isra.0+0xd2>
 8006b10:	4240      	negs	r0, r0
 8006b12:	f1ba 0f00 	cmp.w	sl, #0
 8006b16:	d0f8      	beq.n	8006b0a <_strtol_l.isra.0+0xca>
 8006b18:	b10f      	cbz	r7, 8006b1e <_strtol_l.isra.0+0xde>
 8006b1a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006b1e:	f8ca 9000 	str.w	r9, [sl]
 8006b22:	e7f2      	b.n	8006b0a <_strtol_l.isra.0+0xca>
 8006b24:	2430      	movs	r4, #48	; 0x30
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	d1af      	bne.n	8006a8a <_strtol_l.isra.0+0x4a>
 8006b2a:	2608      	movs	r6, #8
 8006b2c:	e7ad      	b.n	8006a8a <_strtol_l.isra.0+0x4a>
 8006b2e:	2c30      	cmp	r4, #48	; 0x30
 8006b30:	d0a3      	beq.n	8006a7a <_strtol_l.isra.0+0x3a>
 8006b32:	260a      	movs	r6, #10
 8006b34:	e7a9      	b.n	8006a8a <_strtol_l.isra.0+0x4a>
	...

08006b38 <_strtol_r>:
 8006b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b3a:	4c06      	ldr	r4, [pc, #24]	; (8006b54 <_strtol_r+0x1c>)
 8006b3c:	4d06      	ldr	r5, [pc, #24]	; (8006b58 <_strtol_r+0x20>)
 8006b3e:	6824      	ldr	r4, [r4, #0]
 8006b40:	6a24      	ldr	r4, [r4, #32]
 8006b42:	2c00      	cmp	r4, #0
 8006b44:	bf08      	it	eq
 8006b46:	462c      	moveq	r4, r5
 8006b48:	9400      	str	r4, [sp, #0]
 8006b4a:	f7ff ff79 	bl	8006a40 <_strtol_l.isra.0>
 8006b4e:	b003      	add	sp, #12
 8006b50:	bd30      	pop	{r4, r5, pc}
 8006b52:	bf00      	nop
 8006b54:	20000018 	.word	0x20000018
 8006b58:	2000007c 	.word	0x2000007c

08006b5c <quorem>:
 8006b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b60:	6903      	ldr	r3, [r0, #16]
 8006b62:	690c      	ldr	r4, [r1, #16]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	4680      	mov	r8, r0
 8006b68:	f2c0 8082 	blt.w	8006c70 <quorem+0x114>
 8006b6c:	3c01      	subs	r4, #1
 8006b6e:	f101 0714 	add.w	r7, r1, #20
 8006b72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006b76:	f100 0614 	add.w	r6, r0, #20
 8006b7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006b7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006b82:	eb06 030c 	add.w	r3, r6, ip
 8006b86:	3501      	adds	r5, #1
 8006b88:	eb07 090c 	add.w	r9, r7, ip
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006b92:	b395      	cbz	r5, 8006bfa <quorem+0x9e>
 8006b94:	f04f 0a00 	mov.w	sl, #0
 8006b98:	4638      	mov	r0, r7
 8006b9a:	46b6      	mov	lr, r6
 8006b9c:	46d3      	mov	fp, sl
 8006b9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ba2:	b293      	uxth	r3, r2
 8006ba4:	fb05 a303 	mla	r3, r5, r3, sl
 8006ba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	ebab 0303 	sub.w	r3, fp, r3
 8006bb2:	0c12      	lsrs	r2, r2, #16
 8006bb4:	f8de b000 	ldr.w	fp, [lr]
 8006bb8:	fb05 a202 	mla	r2, r5, r2, sl
 8006bbc:	fa13 f38b 	uxtah	r3, r3, fp
 8006bc0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006bc4:	fa1f fb82 	uxth.w	fp, r2
 8006bc8:	f8de 2000 	ldr.w	r2, [lr]
 8006bcc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bda:	4581      	cmp	r9, r0
 8006bdc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006be0:	f84e 3b04 	str.w	r3, [lr], #4
 8006be4:	d2db      	bcs.n	8006b9e <quorem+0x42>
 8006be6:	f856 300c 	ldr.w	r3, [r6, ip]
 8006bea:	b933      	cbnz	r3, 8006bfa <quorem+0x9e>
 8006bec:	9b01      	ldr	r3, [sp, #4]
 8006bee:	3b04      	subs	r3, #4
 8006bf0:	429e      	cmp	r6, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	d330      	bcc.n	8006c58 <quorem+0xfc>
 8006bf6:	f8c8 4010 	str.w	r4, [r8, #16]
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	f001 fba6 	bl	800834c <__mcmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	db25      	blt.n	8006c50 <quorem+0xf4>
 8006c04:	3501      	adds	r5, #1
 8006c06:	4630      	mov	r0, r6
 8006c08:	f04f 0c00 	mov.w	ip, #0
 8006c0c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006c10:	f8d0 e000 	ldr.w	lr, [r0]
 8006c14:	b293      	uxth	r3, r2
 8006c16:	ebac 0303 	sub.w	r3, ip, r3
 8006c1a:	0c12      	lsrs	r2, r2, #16
 8006c1c:	fa13 f38e 	uxtah	r3, r3, lr
 8006c20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c2e:	45b9      	cmp	r9, r7
 8006c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c34:	f840 3b04 	str.w	r3, [r0], #4
 8006c38:	d2e8      	bcs.n	8006c0c <quorem+0xb0>
 8006c3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006c3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006c42:	b92a      	cbnz	r2, 8006c50 <quorem+0xf4>
 8006c44:	3b04      	subs	r3, #4
 8006c46:	429e      	cmp	r6, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	d30b      	bcc.n	8006c64 <quorem+0x108>
 8006c4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c50:	4628      	mov	r0, r5
 8006c52:	b003      	add	sp, #12
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	3b04      	subs	r3, #4
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d1ca      	bne.n	8006bf6 <quorem+0x9a>
 8006c60:	3c01      	subs	r4, #1
 8006c62:	e7c5      	b.n	8006bf0 <quorem+0x94>
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	3b04      	subs	r3, #4
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d1ef      	bne.n	8006c4c <quorem+0xf0>
 8006c6c:	3c01      	subs	r4, #1
 8006c6e:	e7ea      	b.n	8006c46 <quorem+0xea>
 8006c70:	2000      	movs	r0, #0
 8006c72:	e7ee      	b.n	8006c52 <quorem+0xf6>
 8006c74:	0000      	movs	r0, r0
	...

08006c78 <_dtoa_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	ec57 6b10 	vmov	r6, r7, d0
 8006c80:	b097      	sub	sp, #92	; 0x5c
 8006c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c84:	9106      	str	r1, [sp, #24]
 8006c86:	4604      	mov	r4, r0
 8006c88:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c90:	e9cd 6700 	strd	r6, r7, [sp]
 8006c94:	b93d      	cbnz	r5, 8006ca6 <_dtoa_r+0x2e>
 8006c96:	2010      	movs	r0, #16
 8006c98:	f001 f8e0 	bl	8007e5c <malloc>
 8006c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ca2:	6005      	str	r5, [r0, #0]
 8006ca4:	60c5      	str	r5, [r0, #12]
 8006ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	b151      	cbz	r1, 8006cc2 <_dtoa_r+0x4a>
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	604a      	str	r2, [r1, #4]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4093      	lsls	r3, r2
 8006cb4:	608b      	str	r3, [r1, #8]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f001 f929 	bl	8007f0e <_Bfree>
 8006cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	1e3b      	subs	r3, r7, #0
 8006cc4:	bfbb      	ittet	lt
 8006cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	9301      	strlt	r3, [sp, #4]
 8006ccc:	2300      	movge	r3, #0
 8006cce:	2201      	movlt	r2, #1
 8006cd0:	bfac      	ite	ge
 8006cd2:	f8c8 3000 	strge.w	r3, [r8]
 8006cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8006cda:	4baf      	ldr	r3, [pc, #700]	; (8006f98 <_dtoa_r+0x320>)
 8006cdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ce0:	ea33 0308 	bics.w	r3, r3, r8
 8006ce4:	d114      	bne.n	8006d10 <_dtoa_r+0x98>
 8006ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	b923      	cbnz	r3, 8006cfc <_dtoa_r+0x84>
 8006cf2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f000 8542 	beq.w	8007780 <_dtoa_r+0xb08>
 8006cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006fac <_dtoa_r+0x334>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8544 	beq.w	8007790 <_dtoa_r+0xb18>
 8006d08:	f10b 0303 	add.w	r3, fp, #3
 8006d0c:	f000 bd3e 	b.w	800778c <_dtoa_r+0xb14>
 8006d10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d14:	2200      	movs	r2, #0
 8006d16:	2300      	movs	r3, #0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d20:	4681      	mov	r9, r0
 8006d22:	b168      	cbz	r0, 8006d40 <_dtoa_r+0xc8>
 8006d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d26:	2301      	movs	r3, #1
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8524 	beq.w	800777a <_dtoa_r+0xb02>
 8006d32:	4b9a      	ldr	r3, [pc, #616]	; (8006f9c <_dtoa_r+0x324>)
 8006d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d36:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	f000 bd28 	b.w	8007790 <_dtoa_r+0xb18>
 8006d40:	aa14      	add	r2, sp, #80	; 0x50
 8006d42:	a915      	add	r1, sp, #84	; 0x54
 8006d44:	ec47 6b10 	vmov	d0, r6, r7
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f001 fbed 	bl	8008528 <__d2b>
 8006d4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d52:	9004      	str	r0, [sp, #16]
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	d07c      	beq.n	8006e52 <_dtoa_r+0x1da>
 8006d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006d60:	46b2      	mov	sl, r6
 8006d62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4b8b      	ldr	r3, [pc, #556]	; (8006fa0 <_dtoa_r+0x328>)
 8006d72:	4650      	mov	r0, sl
 8006d74:	4659      	mov	r1, fp
 8006d76:	f7f9 fa87 	bl	8000288 <__aeabi_dsub>
 8006d7a:	a381      	add	r3, pc, #516	; (adr r3, 8006f80 <_dtoa_r+0x308>)
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f7f9 fc3a 	bl	80005f8 <__aeabi_dmul>
 8006d84:	a380      	add	r3, pc, #512	; (adr r3, 8006f88 <_dtoa_r+0x310>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f7f9 fa7f 	bl	800028c <__adddf3>
 8006d8e:	4606      	mov	r6, r0
 8006d90:	4628      	mov	r0, r5
 8006d92:	460f      	mov	r7, r1
 8006d94:	f7f9 fbc6 	bl	8000524 <__aeabi_i2d>
 8006d98:	a37d      	add	r3, pc, #500	; (adr r3, 8006f90 <_dtoa_r+0x318>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f7f9 fc2b 	bl	80005f8 <__aeabi_dmul>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4630      	mov	r0, r6
 8006da8:	4639      	mov	r1, r7
 8006daa:	f7f9 fa6f 	bl	800028c <__adddf3>
 8006dae:	4606      	mov	r6, r0
 8006db0:	460f      	mov	r7, r1
 8006db2:	f7f9 fed1 	bl	8000b58 <__aeabi_d2iz>
 8006db6:	2200      	movs	r2, #0
 8006db8:	4682      	mov	sl, r0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	f7f9 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8006dc4:	b148      	cbz	r0, 8006dda <_dtoa_r+0x162>
 8006dc6:	4650      	mov	r0, sl
 8006dc8:	f7f9 fbac 	bl	8000524 <__aeabi_i2d>
 8006dcc:	4632      	mov	r2, r6
 8006dce:	463b      	mov	r3, r7
 8006dd0:	f7f9 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dd4:	b908      	cbnz	r0, 8006dda <_dtoa_r+0x162>
 8006dd6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006dda:	f1ba 0f16 	cmp.w	sl, #22
 8006dde:	d859      	bhi.n	8006e94 <_dtoa_r+0x21c>
 8006de0:	4970      	ldr	r1, [pc, #448]	; (8006fa4 <_dtoa_r+0x32c>)
 8006de2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dee:	f7f9 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d050      	beq.n	8006e98 <_dtoa_r+0x220>
 8006df6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e00:	1b5d      	subs	r5, r3, r5
 8006e02:	f1b5 0801 	subs.w	r8, r5, #1
 8006e06:	bf49      	itett	mi
 8006e08:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e0c:	2300      	movpl	r3, #0
 8006e0e:	9305      	strmi	r3, [sp, #20]
 8006e10:	f04f 0800 	movmi.w	r8, #0
 8006e14:	bf58      	it	pl
 8006e16:	9305      	strpl	r3, [sp, #20]
 8006e18:	f1ba 0f00 	cmp.w	sl, #0
 8006e1c:	db3e      	blt.n	8006e9c <_dtoa_r+0x224>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	44d0      	add	r8, sl
 8006e22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e26:	9307      	str	r3, [sp, #28]
 8006e28:	9b06      	ldr	r3, [sp, #24]
 8006e2a:	2b09      	cmp	r3, #9
 8006e2c:	f200 8090 	bhi.w	8006f50 <_dtoa_r+0x2d8>
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	bfc4      	itt	gt
 8006e34:	3b04      	subgt	r3, #4
 8006e36:	9306      	strgt	r3, [sp, #24]
 8006e38:	9b06      	ldr	r3, [sp, #24]
 8006e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006e3e:	bfcc      	ite	gt
 8006e40:	2500      	movgt	r5, #0
 8006e42:	2501      	movle	r5, #1
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	f200 808f 	bhi.w	8006f68 <_dtoa_r+0x2f0>
 8006e4a:	e8df f003 	tbb	[pc, r3]
 8006e4e:	7f7d      	.short	0x7f7d
 8006e50:	7131      	.short	0x7131
 8006e52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006e56:	441d      	add	r5, r3
 8006e58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006e5c:	2820      	cmp	r0, #32
 8006e5e:	dd13      	ble.n	8006e88 <_dtoa_r+0x210>
 8006e60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006e64:	9b00      	ldr	r3, [sp, #0]
 8006e66:	fa08 f800 	lsl.w	r8, r8, r0
 8006e6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006e6e:	fa23 f000 	lsr.w	r0, r3, r0
 8006e72:	ea48 0000 	orr.w	r0, r8, r0
 8006e76:	f7f9 fb45 	bl	8000504 <__aeabi_ui2d>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4682      	mov	sl, r0
 8006e7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006e82:	3d01      	subs	r5, #1
 8006e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e86:	e772      	b.n	8006d6e <_dtoa_r+0xf6>
 8006e88:	9b00      	ldr	r3, [sp, #0]
 8006e8a:	f1c0 0020 	rsb	r0, r0, #32
 8006e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e92:	e7f0      	b.n	8006e76 <_dtoa_r+0x1fe>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e7b1      	b.n	8006dfc <_dtoa_r+0x184>
 8006e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e9a:	e7b0      	b.n	8006dfe <_dtoa_r+0x186>
 8006e9c:	9b05      	ldr	r3, [sp, #20]
 8006e9e:	eba3 030a 	sub.w	r3, r3, sl
 8006ea2:	9305      	str	r3, [sp, #20]
 8006ea4:	f1ca 0300 	rsb	r3, sl, #0
 8006ea8:	9307      	str	r3, [sp, #28]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	930e      	str	r3, [sp, #56]	; 0x38
 8006eae:	e7bb      	b.n	8006e28 <_dtoa_r+0x1b0>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd59      	ble.n	8006f6e <_dtoa_r+0x2f6>
 8006eba:	9302      	str	r3, [sp, #8]
 8006ebc:	4699      	mov	r9, r3
 8006ebe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	6072      	str	r2, [r6, #4]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	f102 0014 	add.w	r0, r2, #20
 8006eca:	4298      	cmp	r0, r3
 8006ecc:	6871      	ldr	r1, [r6, #4]
 8006ece:	d953      	bls.n	8006f78 <_dtoa_r+0x300>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 ffe8 	bl	8007ea6 <_Balloc>
 8006ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed8:	6030      	str	r0, [r6, #0]
 8006eda:	f1b9 0f0e 	cmp.w	r9, #14
 8006ede:	f8d3 b000 	ldr.w	fp, [r3]
 8006ee2:	f200 80e6 	bhi.w	80070b2 <_dtoa_r+0x43a>
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	f000 80e3 	beq.w	80070b2 <_dtoa_r+0x43a>
 8006eec:	ed9d 7b00 	vldr	d7, [sp]
 8006ef0:	f1ba 0f00 	cmp.w	sl, #0
 8006ef4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006ef8:	dd74      	ble.n	8006fe4 <_dtoa_r+0x36c>
 8006efa:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <_dtoa_r+0x32c>)
 8006efc:	f00a 030f 	and.w	r3, sl, #15
 8006f00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f04:	ed93 7b00 	vldr	d7, [r3]
 8006f08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006f0c:	06f0      	lsls	r0, r6, #27
 8006f0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f12:	d565      	bpl.n	8006fe0 <_dtoa_r+0x368>
 8006f14:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <_dtoa_r+0x330>)
 8006f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f1e:	f7f9 fc95 	bl	800084c <__aeabi_ddiv>
 8006f22:	e9cd 0100 	strd	r0, r1, [sp]
 8006f26:	f006 060f 	and.w	r6, r6, #15
 8006f2a:	2503      	movs	r5, #3
 8006f2c:	4f1e      	ldr	r7, [pc, #120]	; (8006fa8 <_dtoa_r+0x330>)
 8006f2e:	e04c      	b.n	8006fca <_dtoa_r+0x352>
 8006f30:	2301      	movs	r3, #1
 8006f32:	930a      	str	r3, [sp, #40]	; 0x28
 8006f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f36:	4453      	add	r3, sl
 8006f38:	f103 0901 	add.w	r9, r3, #1
 8006f3c:	9302      	str	r3, [sp, #8]
 8006f3e:	464b      	mov	r3, r9
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	bfb8      	it	lt
 8006f44:	2301      	movlt	r3, #1
 8006f46:	e7ba      	b.n	8006ebe <_dtoa_r+0x246>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e7b2      	b.n	8006eb2 <_dtoa_r+0x23a>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	e7f0      	b.n	8006f32 <_dtoa_r+0x2ba>
 8006f50:	2501      	movs	r5, #1
 8006f52:	2300      	movs	r3, #0
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	950a      	str	r5, [sp, #40]	; 0x28
 8006f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f5c:	9302      	str	r3, [sp, #8]
 8006f5e:	4699      	mov	r9, r3
 8006f60:	2200      	movs	r2, #0
 8006f62:	2312      	movs	r3, #18
 8006f64:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f66:	e7aa      	b.n	8006ebe <_dtoa_r+0x246>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f6c:	e7f4      	b.n	8006f58 <_dtoa_r+0x2e0>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	9302      	str	r3, [sp, #8]
 8006f72:	4699      	mov	r9, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	e7f5      	b.n	8006f64 <_dtoa_r+0x2ec>
 8006f78:	3101      	adds	r1, #1
 8006f7a:	6071      	str	r1, [r6, #4]
 8006f7c:	0052      	lsls	r2, r2, #1
 8006f7e:	e7a2      	b.n	8006ec6 <_dtoa_r+0x24e>
 8006f80:	636f4361 	.word	0x636f4361
 8006f84:	3fd287a7 	.word	0x3fd287a7
 8006f88:	8b60c8b3 	.word	0x8b60c8b3
 8006f8c:	3fc68a28 	.word	0x3fc68a28
 8006f90:	509f79fb 	.word	0x509f79fb
 8006f94:	3fd34413 	.word	0x3fd34413
 8006f98:	7ff00000 	.word	0x7ff00000
 8006f9c:	08008c55 	.word	0x08008c55
 8006fa0:	3ff80000 	.word	0x3ff80000
 8006fa4:	08008d10 	.word	0x08008d10
 8006fa8:	08008ce8 	.word	0x08008ce8
 8006fac:	08008cd9 	.word	0x08008cd9
 8006fb0:	07f1      	lsls	r1, r6, #31
 8006fb2:	d508      	bpl.n	8006fc6 <_dtoa_r+0x34e>
 8006fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbc:	f7f9 fb1c 	bl	80005f8 <__aeabi_dmul>
 8006fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fc4:	3501      	adds	r5, #1
 8006fc6:	1076      	asrs	r6, r6, #1
 8006fc8:	3708      	adds	r7, #8
 8006fca:	2e00      	cmp	r6, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <_dtoa_r+0x338>
 8006fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd6:	f7f9 fc39 	bl	800084c <__aeabi_ddiv>
 8006fda:	e9cd 0100 	strd	r0, r1, [sp]
 8006fde:	e01a      	b.n	8007016 <_dtoa_r+0x39e>
 8006fe0:	2502      	movs	r5, #2
 8006fe2:	e7a3      	b.n	8006f2c <_dtoa_r+0x2b4>
 8006fe4:	f000 80a0 	beq.w	8007128 <_dtoa_r+0x4b0>
 8006fe8:	f1ca 0600 	rsb	r6, sl, #0
 8006fec:	4b9f      	ldr	r3, [pc, #636]	; (800726c <_dtoa_r+0x5f4>)
 8006fee:	4fa0      	ldr	r7, [pc, #640]	; (8007270 <_dtoa_r+0x5f8>)
 8006ff0:	f006 020f 	and.w	r2, r6, #15
 8006ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007000:	f7f9 fafa 	bl	80005f8 <__aeabi_dmul>
 8007004:	e9cd 0100 	strd	r0, r1, [sp]
 8007008:	1136      	asrs	r6, r6, #4
 800700a:	2300      	movs	r3, #0
 800700c:	2502      	movs	r5, #2
 800700e:	2e00      	cmp	r6, #0
 8007010:	d17f      	bne.n	8007112 <_dtoa_r+0x49a>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e1      	bne.n	8006fda <_dtoa_r+0x362>
 8007016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8087 	beq.w	800712c <_dtoa_r+0x4b4>
 800701e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007022:	2200      	movs	r2, #0
 8007024:	4b93      	ldr	r3, [pc, #588]	; (8007274 <_dtoa_r+0x5fc>)
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 fd57 	bl	8000adc <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	d07c      	beq.n	800712c <_dtoa_r+0x4b4>
 8007032:	f1b9 0f00 	cmp.w	r9, #0
 8007036:	d079      	beq.n	800712c <_dtoa_r+0x4b4>
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd35      	ble.n	80070aa <_dtoa_r+0x432>
 800703e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007042:	9308      	str	r3, [sp, #32]
 8007044:	4639      	mov	r1, r7
 8007046:	2200      	movs	r2, #0
 8007048:	4b8b      	ldr	r3, [pc, #556]	; (8007278 <_dtoa_r+0x600>)
 800704a:	4630      	mov	r0, r6
 800704c:	f7f9 fad4 	bl	80005f8 <__aeabi_dmul>
 8007050:	e9cd 0100 	strd	r0, r1, [sp]
 8007054:	9f02      	ldr	r7, [sp, #8]
 8007056:	3501      	adds	r5, #1
 8007058:	4628      	mov	r0, r5
 800705a:	f7f9 fa63 	bl	8000524 <__aeabi_i2d>
 800705e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007062:	f7f9 fac9 	bl	80005f8 <__aeabi_dmul>
 8007066:	2200      	movs	r2, #0
 8007068:	4b84      	ldr	r3, [pc, #528]	; (800727c <_dtoa_r+0x604>)
 800706a:	f7f9 f90f 	bl	800028c <__adddf3>
 800706e:	4605      	mov	r5, r0
 8007070:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007074:	2f00      	cmp	r7, #0
 8007076:	d15d      	bne.n	8007134 <_dtoa_r+0x4bc>
 8007078:	2200      	movs	r2, #0
 800707a:	4b81      	ldr	r3, [pc, #516]	; (8007280 <_dtoa_r+0x608>)
 800707c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007080:	f7f9 f902 	bl	8000288 <__aeabi_dsub>
 8007084:	462a      	mov	r2, r5
 8007086:	4633      	mov	r3, r6
 8007088:	e9cd 0100 	strd	r0, r1, [sp]
 800708c:	f7f9 fd44 	bl	8000b18 <__aeabi_dcmpgt>
 8007090:	2800      	cmp	r0, #0
 8007092:	f040 8288 	bne.w	80075a6 <_dtoa_r+0x92e>
 8007096:	462a      	mov	r2, r5
 8007098:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800709c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070a0:	f7f9 fd1c 	bl	8000adc <__aeabi_dcmplt>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	f040 827c 	bne.w	80075a2 <_dtoa_r+0x92a>
 80070aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070ae:	e9cd 2300 	strd	r2, r3, [sp]
 80070b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f2c0 8150 	blt.w	800735a <_dtoa_r+0x6e2>
 80070ba:	f1ba 0f0e 	cmp.w	sl, #14
 80070be:	f300 814c 	bgt.w	800735a <_dtoa_r+0x6e2>
 80070c2:	4b6a      	ldr	r3, [pc, #424]	; (800726c <_dtoa_r+0x5f4>)
 80070c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070c8:	ed93 7b00 	vldr	d7, [r3]
 80070cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070d4:	f280 80d8 	bge.w	8007288 <_dtoa_r+0x610>
 80070d8:	f1b9 0f00 	cmp.w	r9, #0
 80070dc:	f300 80d4 	bgt.w	8007288 <_dtoa_r+0x610>
 80070e0:	f040 825e 	bne.w	80075a0 <_dtoa_r+0x928>
 80070e4:	2200      	movs	r2, #0
 80070e6:	4b66      	ldr	r3, [pc, #408]	; (8007280 <_dtoa_r+0x608>)
 80070e8:	ec51 0b17 	vmov	r0, r1, d7
 80070ec:	f7f9 fa84 	bl	80005f8 <__aeabi_dmul>
 80070f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070f4:	f7f9 fd06 	bl	8000b04 <__aeabi_dcmpge>
 80070f8:	464f      	mov	r7, r9
 80070fa:	464e      	mov	r6, r9
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f040 8234 	bne.w	800756a <_dtoa_r+0x8f2>
 8007102:	2331      	movs	r3, #49	; 0x31
 8007104:	f10b 0501 	add.w	r5, fp, #1
 8007108:	f88b 3000 	strb.w	r3, [fp]
 800710c:	f10a 0a01 	add.w	sl, sl, #1
 8007110:	e22f      	b.n	8007572 <_dtoa_r+0x8fa>
 8007112:	07f2      	lsls	r2, r6, #31
 8007114:	d505      	bpl.n	8007122 <_dtoa_r+0x4aa>
 8007116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800711a:	f7f9 fa6d 	bl	80005f8 <__aeabi_dmul>
 800711e:	3501      	adds	r5, #1
 8007120:	2301      	movs	r3, #1
 8007122:	1076      	asrs	r6, r6, #1
 8007124:	3708      	adds	r7, #8
 8007126:	e772      	b.n	800700e <_dtoa_r+0x396>
 8007128:	2502      	movs	r5, #2
 800712a:	e774      	b.n	8007016 <_dtoa_r+0x39e>
 800712c:	f8cd a020 	str.w	sl, [sp, #32]
 8007130:	464f      	mov	r7, r9
 8007132:	e791      	b.n	8007058 <_dtoa_r+0x3e0>
 8007134:	4b4d      	ldr	r3, [pc, #308]	; (800726c <_dtoa_r+0x5f4>)
 8007136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800713a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d047      	beq.n	80071d4 <_dtoa_r+0x55c>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	2000      	movs	r0, #0
 800714a:	494e      	ldr	r1, [pc, #312]	; (8007284 <_dtoa_r+0x60c>)
 800714c:	f7f9 fb7e 	bl	800084c <__aeabi_ddiv>
 8007150:	462a      	mov	r2, r5
 8007152:	4633      	mov	r3, r6
 8007154:	f7f9 f898 	bl	8000288 <__aeabi_dsub>
 8007158:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800715c:	465d      	mov	r5, fp
 800715e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007162:	f7f9 fcf9 	bl	8000b58 <__aeabi_d2iz>
 8007166:	4606      	mov	r6, r0
 8007168:	f7f9 f9dc 	bl	8000524 <__aeabi_i2d>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007174:	f7f9 f888 	bl	8000288 <__aeabi_dsub>
 8007178:	3630      	adds	r6, #48	; 0x30
 800717a:	f805 6b01 	strb.w	r6, [r5], #1
 800717e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007182:	e9cd 0100 	strd	r0, r1, [sp]
 8007186:	f7f9 fca9 	bl	8000adc <__aeabi_dcmplt>
 800718a:	2800      	cmp	r0, #0
 800718c:	d163      	bne.n	8007256 <_dtoa_r+0x5de>
 800718e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007192:	2000      	movs	r0, #0
 8007194:	4937      	ldr	r1, [pc, #220]	; (8007274 <_dtoa_r+0x5fc>)
 8007196:	f7f9 f877 	bl	8000288 <__aeabi_dsub>
 800719a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800719e:	f7f9 fc9d 	bl	8000adc <__aeabi_dcmplt>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	f040 80b7 	bne.w	8007316 <_dtoa_r+0x69e>
 80071a8:	eba5 030b 	sub.w	r3, r5, fp
 80071ac:	429f      	cmp	r7, r3
 80071ae:	f77f af7c 	ble.w	80070aa <_dtoa_r+0x432>
 80071b2:	2200      	movs	r2, #0
 80071b4:	4b30      	ldr	r3, [pc, #192]	; (8007278 <_dtoa_r+0x600>)
 80071b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071ba:	f7f9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80071be:	2200      	movs	r2, #0
 80071c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071c4:	4b2c      	ldr	r3, [pc, #176]	; (8007278 <_dtoa_r+0x600>)
 80071c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ca:	f7f9 fa15 	bl	80005f8 <__aeabi_dmul>
 80071ce:	e9cd 0100 	strd	r0, r1, [sp]
 80071d2:	e7c4      	b.n	800715e <_dtoa_r+0x4e6>
 80071d4:	462a      	mov	r2, r5
 80071d6:	4633      	mov	r3, r6
 80071d8:	f7f9 fa0e 	bl	80005f8 <__aeabi_dmul>
 80071dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071e0:	eb0b 0507 	add.w	r5, fp, r7
 80071e4:	465e      	mov	r6, fp
 80071e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ea:	f7f9 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80071ee:	4607      	mov	r7, r0
 80071f0:	f7f9 f998 	bl	8000524 <__aeabi_i2d>
 80071f4:	3730      	adds	r7, #48	; 0x30
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071fe:	f7f9 f843 	bl	8000288 <__aeabi_dsub>
 8007202:	f806 7b01 	strb.w	r7, [r6], #1
 8007206:	42ae      	cmp	r6, r5
 8007208:	e9cd 0100 	strd	r0, r1, [sp]
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	d126      	bne.n	8007260 <_dtoa_r+0x5e8>
 8007212:	4b1c      	ldr	r3, [pc, #112]	; (8007284 <_dtoa_r+0x60c>)
 8007214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007218:	f7f9 f838 	bl	800028c <__adddf3>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007224:	f7f9 fc78 	bl	8000b18 <__aeabi_dcmpgt>
 8007228:	2800      	cmp	r0, #0
 800722a:	d174      	bne.n	8007316 <_dtoa_r+0x69e>
 800722c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007230:	2000      	movs	r0, #0
 8007232:	4914      	ldr	r1, [pc, #80]	; (8007284 <_dtoa_r+0x60c>)
 8007234:	f7f9 f828 	bl	8000288 <__aeabi_dsub>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007240:	f7f9 fc4c 	bl	8000adc <__aeabi_dcmplt>
 8007244:	2800      	cmp	r0, #0
 8007246:	f43f af30 	beq.w	80070aa <_dtoa_r+0x432>
 800724a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800724e:	2b30      	cmp	r3, #48	; 0x30
 8007250:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007254:	d002      	beq.n	800725c <_dtoa_r+0x5e4>
 8007256:	f8dd a020 	ldr.w	sl, [sp, #32]
 800725a:	e04a      	b.n	80072f2 <_dtoa_r+0x67a>
 800725c:	4615      	mov	r5, r2
 800725e:	e7f4      	b.n	800724a <_dtoa_r+0x5d2>
 8007260:	4b05      	ldr	r3, [pc, #20]	; (8007278 <_dtoa_r+0x600>)
 8007262:	f7f9 f9c9 	bl	80005f8 <__aeabi_dmul>
 8007266:	e9cd 0100 	strd	r0, r1, [sp]
 800726a:	e7bc      	b.n	80071e6 <_dtoa_r+0x56e>
 800726c:	08008d10 	.word	0x08008d10
 8007270:	08008ce8 	.word	0x08008ce8
 8007274:	3ff00000 	.word	0x3ff00000
 8007278:	40240000 	.word	0x40240000
 800727c:	401c0000 	.word	0x401c0000
 8007280:	40140000 	.word	0x40140000
 8007284:	3fe00000 	.word	0x3fe00000
 8007288:	e9dd 6700 	ldrd	r6, r7, [sp]
 800728c:	465d      	mov	r5, fp
 800728e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f9 fad9 	bl	800084c <__aeabi_ddiv>
 800729a:	f7f9 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800729e:	4680      	mov	r8, r0
 80072a0:	f7f9 f940 	bl	8000524 <__aeabi_i2d>
 80072a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072a8:	f7f9 f9a6 	bl	80005f8 <__aeabi_dmul>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4630      	mov	r0, r6
 80072b2:	4639      	mov	r1, r7
 80072b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80072b8:	f7f8 ffe6 	bl	8000288 <__aeabi_dsub>
 80072bc:	f805 6b01 	strb.w	r6, [r5], #1
 80072c0:	eba5 060b 	sub.w	r6, r5, fp
 80072c4:	45b1      	cmp	r9, r6
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	d139      	bne.n	8007340 <_dtoa_r+0x6c8>
 80072cc:	f7f8 ffde 	bl	800028c <__adddf3>
 80072d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d4:	4606      	mov	r6, r0
 80072d6:	460f      	mov	r7, r1
 80072d8:	f7f9 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 80072dc:	b9c8      	cbnz	r0, 8007312 <_dtoa_r+0x69a>
 80072de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072e2:	4630      	mov	r0, r6
 80072e4:	4639      	mov	r1, r7
 80072e6:	f7f9 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ea:	b110      	cbz	r0, 80072f2 <_dtoa_r+0x67a>
 80072ec:	f018 0f01 	tst.w	r8, #1
 80072f0:	d10f      	bne.n	8007312 <_dtoa_r+0x69a>
 80072f2:	9904      	ldr	r1, [sp, #16]
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 fe0a 	bl	8007f0e <_Bfree>
 80072fa:	2300      	movs	r3, #0
 80072fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072fe:	702b      	strb	r3, [r5, #0]
 8007300:	f10a 0301 	add.w	r3, sl, #1
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8241 	beq.w	8007790 <_dtoa_r+0xb18>
 800730e:	601d      	str	r5, [r3, #0]
 8007310:	e23e      	b.n	8007790 <_dtoa_r+0xb18>
 8007312:	f8cd a020 	str.w	sl, [sp, #32]
 8007316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800731a:	2a39      	cmp	r2, #57	; 0x39
 800731c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007320:	d108      	bne.n	8007334 <_dtoa_r+0x6bc>
 8007322:	459b      	cmp	fp, r3
 8007324:	d10a      	bne.n	800733c <_dtoa_r+0x6c4>
 8007326:	9b08      	ldr	r3, [sp, #32]
 8007328:	3301      	adds	r3, #1
 800732a:	9308      	str	r3, [sp, #32]
 800732c:	2330      	movs	r3, #48	; 0x30
 800732e:	f88b 3000 	strb.w	r3, [fp]
 8007332:	465b      	mov	r3, fp
 8007334:	781a      	ldrb	r2, [r3, #0]
 8007336:	3201      	adds	r2, #1
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	e78c      	b.n	8007256 <_dtoa_r+0x5de>
 800733c:	461d      	mov	r5, r3
 800733e:	e7ea      	b.n	8007316 <_dtoa_r+0x69e>
 8007340:	2200      	movs	r2, #0
 8007342:	4b9b      	ldr	r3, [pc, #620]	; (80075b0 <_dtoa_r+0x938>)
 8007344:	f7f9 f958 	bl	80005f8 <__aeabi_dmul>
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	f7f9 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007354:	2800      	cmp	r0, #0
 8007356:	d09a      	beq.n	800728e <_dtoa_r+0x616>
 8007358:	e7cb      	b.n	80072f2 <_dtoa_r+0x67a>
 800735a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800735c:	2a00      	cmp	r2, #0
 800735e:	f000 808b 	beq.w	8007478 <_dtoa_r+0x800>
 8007362:	9a06      	ldr	r2, [sp, #24]
 8007364:	2a01      	cmp	r2, #1
 8007366:	dc6e      	bgt.n	8007446 <_dtoa_r+0x7ce>
 8007368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800736a:	2a00      	cmp	r2, #0
 800736c:	d067      	beq.n	800743e <_dtoa_r+0x7c6>
 800736e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007372:	9f07      	ldr	r7, [sp, #28]
 8007374:	9d05      	ldr	r5, [sp, #20]
 8007376:	9a05      	ldr	r2, [sp, #20]
 8007378:	2101      	movs	r1, #1
 800737a:	441a      	add	r2, r3
 800737c:	4620      	mov	r0, r4
 800737e:	9205      	str	r2, [sp, #20]
 8007380:	4498      	add	r8, r3
 8007382:	f000 fea2 	bl	80080ca <__i2b>
 8007386:	4606      	mov	r6, r0
 8007388:	2d00      	cmp	r5, #0
 800738a:	dd0c      	ble.n	80073a6 <_dtoa_r+0x72e>
 800738c:	f1b8 0f00 	cmp.w	r8, #0
 8007390:	dd09      	ble.n	80073a6 <_dtoa_r+0x72e>
 8007392:	4545      	cmp	r5, r8
 8007394:	9a05      	ldr	r2, [sp, #20]
 8007396:	462b      	mov	r3, r5
 8007398:	bfa8      	it	ge
 800739a:	4643      	movge	r3, r8
 800739c:	1ad2      	subs	r2, r2, r3
 800739e:	9205      	str	r2, [sp, #20]
 80073a0:	1aed      	subs	r5, r5, r3
 80073a2:	eba8 0803 	sub.w	r8, r8, r3
 80073a6:	9b07      	ldr	r3, [sp, #28]
 80073a8:	b1eb      	cbz	r3, 80073e6 <_dtoa_r+0x76e>
 80073aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d067      	beq.n	8007480 <_dtoa_r+0x808>
 80073b0:	b18f      	cbz	r7, 80073d6 <_dtoa_r+0x75e>
 80073b2:	4631      	mov	r1, r6
 80073b4:	463a      	mov	r2, r7
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 ff26 	bl	8008208 <__pow5mult>
 80073bc:	9a04      	ldr	r2, [sp, #16]
 80073be:	4601      	mov	r1, r0
 80073c0:	4606      	mov	r6, r0
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fe8a 	bl	80080dc <__multiply>
 80073c8:	9904      	ldr	r1, [sp, #16]
 80073ca:	9008      	str	r0, [sp, #32]
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fd9e 	bl	8007f0e <_Bfree>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	1bda      	subs	r2, r3, r7
 80073da:	d004      	beq.n	80073e6 <_dtoa_r+0x76e>
 80073dc:	9904      	ldr	r1, [sp, #16]
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 ff12 	bl	8008208 <__pow5mult>
 80073e4:	9004      	str	r0, [sp, #16]
 80073e6:	2101      	movs	r1, #1
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fe6e 	bl	80080ca <__i2b>
 80073ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f0:	4607      	mov	r7, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 81d0 	beq.w	8007798 <_dtoa_r+0xb20>
 80073f8:	461a      	mov	r2, r3
 80073fa:	4601      	mov	r1, r0
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 ff03 	bl	8008208 <__pow5mult>
 8007402:	9b06      	ldr	r3, [sp, #24]
 8007404:	2b01      	cmp	r3, #1
 8007406:	4607      	mov	r7, r0
 8007408:	dc40      	bgt.n	800748c <_dtoa_r+0x814>
 800740a:	9b00      	ldr	r3, [sp, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d139      	bne.n	8007484 <_dtoa_r+0x80c>
 8007410:	9b01      	ldr	r3, [sp, #4]
 8007412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007416:	2b00      	cmp	r3, #0
 8007418:	d136      	bne.n	8007488 <_dtoa_r+0x810>
 800741a:	9b01      	ldr	r3, [sp, #4]
 800741c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	051b      	lsls	r3, r3, #20
 8007424:	b12b      	cbz	r3, 8007432 <_dtoa_r+0x7ba>
 8007426:	9b05      	ldr	r3, [sp, #20]
 8007428:	3301      	adds	r3, #1
 800742a:	9305      	str	r3, [sp, #20]
 800742c:	f108 0801 	add.w	r8, r8, #1
 8007430:	2301      	movs	r3, #1
 8007432:	9307      	str	r3, [sp, #28]
 8007434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007436:	2b00      	cmp	r3, #0
 8007438:	d12a      	bne.n	8007490 <_dtoa_r+0x818>
 800743a:	2001      	movs	r0, #1
 800743c:	e030      	b.n	80074a0 <_dtoa_r+0x828>
 800743e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007440:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007444:	e795      	b.n	8007372 <_dtoa_r+0x6fa>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800744c:	42bb      	cmp	r3, r7
 800744e:	bfbf      	itttt	lt
 8007450:	9b07      	ldrlt	r3, [sp, #28]
 8007452:	9707      	strlt	r7, [sp, #28]
 8007454:	1afa      	sublt	r2, r7, r3
 8007456:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007458:	bfbb      	ittet	lt
 800745a:	189b      	addlt	r3, r3, r2
 800745c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800745e:	1bdf      	subge	r7, r3, r7
 8007460:	2700      	movlt	r7, #0
 8007462:	f1b9 0f00 	cmp.w	r9, #0
 8007466:	bfb5      	itete	lt
 8007468:	9b05      	ldrlt	r3, [sp, #20]
 800746a:	9d05      	ldrge	r5, [sp, #20]
 800746c:	eba3 0509 	sublt.w	r5, r3, r9
 8007470:	464b      	movge	r3, r9
 8007472:	bfb8      	it	lt
 8007474:	2300      	movlt	r3, #0
 8007476:	e77e      	b.n	8007376 <_dtoa_r+0x6fe>
 8007478:	9f07      	ldr	r7, [sp, #28]
 800747a:	9d05      	ldr	r5, [sp, #20]
 800747c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800747e:	e783      	b.n	8007388 <_dtoa_r+0x710>
 8007480:	9a07      	ldr	r2, [sp, #28]
 8007482:	e7ab      	b.n	80073dc <_dtoa_r+0x764>
 8007484:	2300      	movs	r3, #0
 8007486:	e7d4      	b.n	8007432 <_dtoa_r+0x7ba>
 8007488:	9b00      	ldr	r3, [sp, #0]
 800748a:	e7d2      	b.n	8007432 <_dtoa_r+0x7ba>
 800748c:	2300      	movs	r3, #0
 800748e:	9307      	str	r3, [sp, #28]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007496:	6918      	ldr	r0, [r3, #16]
 8007498:	f000 fdc9 	bl	800802e <__hi0bits>
 800749c:	f1c0 0020 	rsb	r0, r0, #32
 80074a0:	4440      	add	r0, r8
 80074a2:	f010 001f 	ands.w	r0, r0, #31
 80074a6:	d047      	beq.n	8007538 <_dtoa_r+0x8c0>
 80074a8:	f1c0 0320 	rsb	r3, r0, #32
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	dd3b      	ble.n	8007528 <_dtoa_r+0x8b0>
 80074b0:	9b05      	ldr	r3, [sp, #20]
 80074b2:	f1c0 001c 	rsb	r0, r0, #28
 80074b6:	4403      	add	r3, r0
 80074b8:	9305      	str	r3, [sp, #20]
 80074ba:	4405      	add	r5, r0
 80074bc:	4480      	add	r8, r0
 80074be:	9b05      	ldr	r3, [sp, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dd05      	ble.n	80074d0 <_dtoa_r+0x858>
 80074c4:	461a      	mov	r2, r3
 80074c6:	9904      	ldr	r1, [sp, #16]
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 feeb 	bl	80082a4 <__lshift>
 80074ce:	9004      	str	r0, [sp, #16]
 80074d0:	f1b8 0f00 	cmp.w	r8, #0
 80074d4:	dd05      	ble.n	80074e2 <_dtoa_r+0x86a>
 80074d6:	4639      	mov	r1, r7
 80074d8:	4642      	mov	r2, r8
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 fee2 	bl	80082a4 <__lshift>
 80074e0:	4607      	mov	r7, r0
 80074e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074e4:	b353      	cbz	r3, 800753c <_dtoa_r+0x8c4>
 80074e6:	4639      	mov	r1, r7
 80074e8:	9804      	ldr	r0, [sp, #16]
 80074ea:	f000 ff2f 	bl	800834c <__mcmp>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	da24      	bge.n	800753c <_dtoa_r+0x8c4>
 80074f2:	2300      	movs	r3, #0
 80074f4:	220a      	movs	r2, #10
 80074f6:	9904      	ldr	r1, [sp, #16]
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fd1f 	bl	8007f3c <__multadd>
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	9004      	str	r0, [sp, #16]
 8007502:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 814d 	beq.w	80077a6 <_dtoa_r+0xb2e>
 800750c:	2300      	movs	r3, #0
 800750e:	4631      	mov	r1, r6
 8007510:	220a      	movs	r2, #10
 8007512:	4620      	mov	r0, r4
 8007514:	f000 fd12 	bl	8007f3c <__multadd>
 8007518:	9b02      	ldr	r3, [sp, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	4606      	mov	r6, r0
 800751e:	dc4f      	bgt.n	80075c0 <_dtoa_r+0x948>
 8007520:	9b06      	ldr	r3, [sp, #24]
 8007522:	2b02      	cmp	r3, #2
 8007524:	dd4c      	ble.n	80075c0 <_dtoa_r+0x948>
 8007526:	e011      	b.n	800754c <_dtoa_r+0x8d4>
 8007528:	d0c9      	beq.n	80074be <_dtoa_r+0x846>
 800752a:	9a05      	ldr	r2, [sp, #20]
 800752c:	331c      	adds	r3, #28
 800752e:	441a      	add	r2, r3
 8007530:	9205      	str	r2, [sp, #20]
 8007532:	441d      	add	r5, r3
 8007534:	4498      	add	r8, r3
 8007536:	e7c2      	b.n	80074be <_dtoa_r+0x846>
 8007538:	4603      	mov	r3, r0
 800753a:	e7f6      	b.n	800752a <_dtoa_r+0x8b2>
 800753c:	f1b9 0f00 	cmp.w	r9, #0
 8007540:	dc38      	bgt.n	80075b4 <_dtoa_r+0x93c>
 8007542:	9b06      	ldr	r3, [sp, #24]
 8007544:	2b02      	cmp	r3, #2
 8007546:	dd35      	ble.n	80075b4 <_dtoa_r+0x93c>
 8007548:	f8cd 9008 	str.w	r9, [sp, #8]
 800754c:	9b02      	ldr	r3, [sp, #8]
 800754e:	b963      	cbnz	r3, 800756a <_dtoa_r+0x8f2>
 8007550:	4639      	mov	r1, r7
 8007552:	2205      	movs	r2, #5
 8007554:	4620      	mov	r0, r4
 8007556:	f000 fcf1 	bl	8007f3c <__multadd>
 800755a:	4601      	mov	r1, r0
 800755c:	4607      	mov	r7, r0
 800755e:	9804      	ldr	r0, [sp, #16]
 8007560:	f000 fef4 	bl	800834c <__mcmp>
 8007564:	2800      	cmp	r0, #0
 8007566:	f73f adcc 	bgt.w	8007102 <_dtoa_r+0x48a>
 800756a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800756c:	465d      	mov	r5, fp
 800756e:	ea6f 0a03 	mvn.w	sl, r3
 8007572:	f04f 0900 	mov.w	r9, #0
 8007576:	4639      	mov	r1, r7
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fcc8 	bl	8007f0e <_Bfree>
 800757e:	2e00      	cmp	r6, #0
 8007580:	f43f aeb7 	beq.w	80072f2 <_dtoa_r+0x67a>
 8007584:	f1b9 0f00 	cmp.w	r9, #0
 8007588:	d005      	beq.n	8007596 <_dtoa_r+0x91e>
 800758a:	45b1      	cmp	r9, r6
 800758c:	d003      	beq.n	8007596 <_dtoa_r+0x91e>
 800758e:	4649      	mov	r1, r9
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fcbc 	bl	8007f0e <_Bfree>
 8007596:	4631      	mov	r1, r6
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fcb8 	bl	8007f0e <_Bfree>
 800759e:	e6a8      	b.n	80072f2 <_dtoa_r+0x67a>
 80075a0:	2700      	movs	r7, #0
 80075a2:	463e      	mov	r6, r7
 80075a4:	e7e1      	b.n	800756a <_dtoa_r+0x8f2>
 80075a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80075aa:	463e      	mov	r6, r7
 80075ac:	e5a9      	b.n	8007102 <_dtoa_r+0x48a>
 80075ae:	bf00      	nop
 80075b0:	40240000 	.word	0x40240000
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 80fa 	beq.w	80077b4 <_dtoa_r+0xb3c>
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	dd05      	ble.n	80075d0 <_dtoa_r+0x958>
 80075c4:	4631      	mov	r1, r6
 80075c6:	462a      	mov	r2, r5
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fe6b 	bl	80082a4 <__lshift>
 80075ce:	4606      	mov	r6, r0
 80075d0:	9b07      	ldr	r3, [sp, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d04c      	beq.n	8007670 <_dtoa_r+0x9f8>
 80075d6:	6871      	ldr	r1, [r6, #4]
 80075d8:	4620      	mov	r0, r4
 80075da:	f000 fc64 	bl	8007ea6 <_Balloc>
 80075de:	6932      	ldr	r2, [r6, #16]
 80075e0:	3202      	adds	r2, #2
 80075e2:	4605      	mov	r5, r0
 80075e4:	0092      	lsls	r2, r2, #2
 80075e6:	f106 010c 	add.w	r1, r6, #12
 80075ea:	300c      	adds	r0, #12
 80075ec:	f000 fc50 	bl	8007e90 <memcpy>
 80075f0:	2201      	movs	r2, #1
 80075f2:	4629      	mov	r1, r5
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fe55 	bl	80082a4 <__lshift>
 80075fa:	9b00      	ldr	r3, [sp, #0]
 80075fc:	f8cd b014 	str.w	fp, [sp, #20]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	46b1      	mov	r9, r6
 8007606:	9307      	str	r3, [sp, #28]
 8007608:	4606      	mov	r6, r0
 800760a:	4639      	mov	r1, r7
 800760c:	9804      	ldr	r0, [sp, #16]
 800760e:	f7ff faa5 	bl	8006b5c <quorem>
 8007612:	4649      	mov	r1, r9
 8007614:	4605      	mov	r5, r0
 8007616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800761a:	9804      	ldr	r0, [sp, #16]
 800761c:	f000 fe96 	bl	800834c <__mcmp>
 8007620:	4632      	mov	r2, r6
 8007622:	9000      	str	r0, [sp, #0]
 8007624:	4639      	mov	r1, r7
 8007626:	4620      	mov	r0, r4
 8007628:	f000 feaa 	bl	8008380 <__mdiff>
 800762c:	68c3      	ldr	r3, [r0, #12]
 800762e:	4602      	mov	r2, r0
 8007630:	bb03      	cbnz	r3, 8007674 <_dtoa_r+0x9fc>
 8007632:	4601      	mov	r1, r0
 8007634:	9008      	str	r0, [sp, #32]
 8007636:	9804      	ldr	r0, [sp, #16]
 8007638:	f000 fe88 	bl	800834c <__mcmp>
 800763c:	9a08      	ldr	r2, [sp, #32]
 800763e:	4603      	mov	r3, r0
 8007640:	4611      	mov	r1, r2
 8007642:	4620      	mov	r0, r4
 8007644:	9308      	str	r3, [sp, #32]
 8007646:	f000 fc62 	bl	8007f0e <_Bfree>
 800764a:	9b08      	ldr	r3, [sp, #32]
 800764c:	b9a3      	cbnz	r3, 8007678 <_dtoa_r+0xa00>
 800764e:	9a06      	ldr	r2, [sp, #24]
 8007650:	b992      	cbnz	r2, 8007678 <_dtoa_r+0xa00>
 8007652:	9a07      	ldr	r2, [sp, #28]
 8007654:	b982      	cbnz	r2, 8007678 <_dtoa_r+0xa00>
 8007656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800765a:	d029      	beq.n	80076b0 <_dtoa_r+0xa38>
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	dd01      	ble.n	8007666 <_dtoa_r+0x9ee>
 8007662:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007666:	9b05      	ldr	r3, [sp, #20]
 8007668:	1c5d      	adds	r5, r3, #1
 800766a:	f883 8000 	strb.w	r8, [r3]
 800766e:	e782      	b.n	8007576 <_dtoa_r+0x8fe>
 8007670:	4630      	mov	r0, r6
 8007672:	e7c2      	b.n	80075fa <_dtoa_r+0x982>
 8007674:	2301      	movs	r3, #1
 8007676:	e7e3      	b.n	8007640 <_dtoa_r+0x9c8>
 8007678:	9a00      	ldr	r2, [sp, #0]
 800767a:	2a00      	cmp	r2, #0
 800767c:	db04      	blt.n	8007688 <_dtoa_r+0xa10>
 800767e:	d125      	bne.n	80076cc <_dtoa_r+0xa54>
 8007680:	9a06      	ldr	r2, [sp, #24]
 8007682:	bb1a      	cbnz	r2, 80076cc <_dtoa_r+0xa54>
 8007684:	9a07      	ldr	r2, [sp, #28]
 8007686:	bb0a      	cbnz	r2, 80076cc <_dtoa_r+0xa54>
 8007688:	2b00      	cmp	r3, #0
 800768a:	ddec      	ble.n	8007666 <_dtoa_r+0x9ee>
 800768c:	2201      	movs	r2, #1
 800768e:	9904      	ldr	r1, [sp, #16]
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fe07 	bl	80082a4 <__lshift>
 8007696:	4639      	mov	r1, r7
 8007698:	9004      	str	r0, [sp, #16]
 800769a:	f000 fe57 	bl	800834c <__mcmp>
 800769e:	2800      	cmp	r0, #0
 80076a0:	dc03      	bgt.n	80076aa <_dtoa_r+0xa32>
 80076a2:	d1e0      	bne.n	8007666 <_dtoa_r+0x9ee>
 80076a4:	f018 0f01 	tst.w	r8, #1
 80076a8:	d0dd      	beq.n	8007666 <_dtoa_r+0x9ee>
 80076aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076ae:	d1d8      	bne.n	8007662 <_dtoa_r+0x9ea>
 80076b0:	9b05      	ldr	r3, [sp, #20]
 80076b2:	9a05      	ldr	r2, [sp, #20]
 80076b4:	1c5d      	adds	r5, r3, #1
 80076b6:	2339      	movs	r3, #57	; 0x39
 80076b8:	7013      	strb	r3, [r2, #0]
 80076ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076be:	2b39      	cmp	r3, #57	; 0x39
 80076c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80076c4:	d04f      	beq.n	8007766 <_dtoa_r+0xaee>
 80076c6:	3301      	adds	r3, #1
 80076c8:	7013      	strb	r3, [r2, #0]
 80076ca:	e754      	b.n	8007576 <_dtoa_r+0x8fe>
 80076cc:	9a05      	ldr	r2, [sp, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f102 0501 	add.w	r5, r2, #1
 80076d4:	dd06      	ble.n	80076e4 <_dtoa_r+0xa6c>
 80076d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076da:	d0e9      	beq.n	80076b0 <_dtoa_r+0xa38>
 80076dc:	f108 0801 	add.w	r8, r8, #1
 80076e0:	9b05      	ldr	r3, [sp, #20]
 80076e2:	e7c2      	b.n	800766a <_dtoa_r+0x9f2>
 80076e4:	9a02      	ldr	r2, [sp, #8]
 80076e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80076ea:	eba5 030b 	sub.w	r3, r5, fp
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d021      	beq.n	8007736 <_dtoa_r+0xabe>
 80076f2:	2300      	movs	r3, #0
 80076f4:	220a      	movs	r2, #10
 80076f6:	9904      	ldr	r1, [sp, #16]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 fc1f 	bl	8007f3c <__multadd>
 80076fe:	45b1      	cmp	r9, r6
 8007700:	9004      	str	r0, [sp, #16]
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	f04f 020a 	mov.w	r2, #10
 800770a:	4649      	mov	r1, r9
 800770c:	4620      	mov	r0, r4
 800770e:	d105      	bne.n	800771c <_dtoa_r+0xaa4>
 8007710:	f000 fc14 	bl	8007f3c <__multadd>
 8007714:	4681      	mov	r9, r0
 8007716:	4606      	mov	r6, r0
 8007718:	9505      	str	r5, [sp, #20]
 800771a:	e776      	b.n	800760a <_dtoa_r+0x992>
 800771c:	f000 fc0e 	bl	8007f3c <__multadd>
 8007720:	4631      	mov	r1, r6
 8007722:	4681      	mov	r9, r0
 8007724:	2300      	movs	r3, #0
 8007726:	220a      	movs	r2, #10
 8007728:	4620      	mov	r0, r4
 800772a:	f000 fc07 	bl	8007f3c <__multadd>
 800772e:	4606      	mov	r6, r0
 8007730:	e7f2      	b.n	8007718 <_dtoa_r+0xaa0>
 8007732:	f04f 0900 	mov.w	r9, #0
 8007736:	2201      	movs	r2, #1
 8007738:	9904      	ldr	r1, [sp, #16]
 800773a:	4620      	mov	r0, r4
 800773c:	f000 fdb2 	bl	80082a4 <__lshift>
 8007740:	4639      	mov	r1, r7
 8007742:	9004      	str	r0, [sp, #16]
 8007744:	f000 fe02 	bl	800834c <__mcmp>
 8007748:	2800      	cmp	r0, #0
 800774a:	dcb6      	bgt.n	80076ba <_dtoa_r+0xa42>
 800774c:	d102      	bne.n	8007754 <_dtoa_r+0xadc>
 800774e:	f018 0f01 	tst.w	r8, #1
 8007752:	d1b2      	bne.n	80076ba <_dtoa_r+0xa42>
 8007754:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007758:	2b30      	cmp	r3, #48	; 0x30
 800775a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800775e:	f47f af0a 	bne.w	8007576 <_dtoa_r+0x8fe>
 8007762:	4615      	mov	r5, r2
 8007764:	e7f6      	b.n	8007754 <_dtoa_r+0xadc>
 8007766:	4593      	cmp	fp, r2
 8007768:	d105      	bne.n	8007776 <_dtoa_r+0xafe>
 800776a:	2331      	movs	r3, #49	; 0x31
 800776c:	f10a 0a01 	add.w	sl, sl, #1
 8007770:	f88b 3000 	strb.w	r3, [fp]
 8007774:	e6ff      	b.n	8007576 <_dtoa_r+0x8fe>
 8007776:	4615      	mov	r5, r2
 8007778:	e79f      	b.n	80076ba <_dtoa_r+0xa42>
 800777a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80077e0 <_dtoa_r+0xb68>
 800777e:	e007      	b.n	8007790 <_dtoa_r+0xb18>
 8007780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007782:	f8df b060 	ldr.w	fp, [pc, #96]	; 80077e4 <_dtoa_r+0xb6c>
 8007786:	b11b      	cbz	r3, 8007790 <_dtoa_r+0xb18>
 8007788:	f10b 0308 	add.w	r3, fp, #8
 800778c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	4658      	mov	r0, fp
 8007792:	b017      	add	sp, #92	; 0x5c
 8007794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007798:	9b06      	ldr	r3, [sp, #24]
 800779a:	2b01      	cmp	r3, #1
 800779c:	f77f ae35 	ble.w	800740a <_dtoa_r+0x792>
 80077a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	e649      	b.n	800743a <_dtoa_r+0x7c2>
 80077a6:	9b02      	ldr	r3, [sp, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dc03      	bgt.n	80077b4 <_dtoa_r+0xb3c>
 80077ac:	9b06      	ldr	r3, [sp, #24]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	f73f aecc 	bgt.w	800754c <_dtoa_r+0x8d4>
 80077b4:	465d      	mov	r5, fp
 80077b6:	4639      	mov	r1, r7
 80077b8:	9804      	ldr	r0, [sp, #16]
 80077ba:	f7ff f9cf 	bl	8006b5c <quorem>
 80077be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80077c2:	f805 8b01 	strb.w	r8, [r5], #1
 80077c6:	9a02      	ldr	r2, [sp, #8]
 80077c8:	eba5 030b 	sub.w	r3, r5, fp
 80077cc:	429a      	cmp	r2, r3
 80077ce:	ddb0      	ble.n	8007732 <_dtoa_r+0xaba>
 80077d0:	2300      	movs	r3, #0
 80077d2:	220a      	movs	r2, #10
 80077d4:	9904      	ldr	r1, [sp, #16]
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 fbb0 	bl	8007f3c <__multadd>
 80077dc:	9004      	str	r0, [sp, #16]
 80077de:	e7ea      	b.n	80077b6 <_dtoa_r+0xb3e>
 80077e0:	08008c54 	.word	0x08008c54
 80077e4:	08008cd0 	.word	0x08008cd0

080077e8 <rshift>:
 80077e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ea:	6906      	ldr	r6, [r0, #16]
 80077ec:	114b      	asrs	r3, r1, #5
 80077ee:	429e      	cmp	r6, r3
 80077f0:	f100 0414 	add.w	r4, r0, #20
 80077f4:	dd30      	ble.n	8007858 <rshift+0x70>
 80077f6:	f011 011f 	ands.w	r1, r1, #31
 80077fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80077fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007802:	d108      	bne.n	8007816 <rshift+0x2e>
 8007804:	4621      	mov	r1, r4
 8007806:	42b2      	cmp	r2, r6
 8007808:	460b      	mov	r3, r1
 800780a:	d211      	bcs.n	8007830 <rshift+0x48>
 800780c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007810:	f841 3b04 	str.w	r3, [r1], #4
 8007814:	e7f7      	b.n	8007806 <rshift+0x1e>
 8007816:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800781a:	f1c1 0c20 	rsb	ip, r1, #32
 800781e:	40cd      	lsrs	r5, r1
 8007820:	3204      	adds	r2, #4
 8007822:	4623      	mov	r3, r4
 8007824:	42b2      	cmp	r2, r6
 8007826:	4617      	mov	r7, r2
 8007828:	d30c      	bcc.n	8007844 <rshift+0x5c>
 800782a:	601d      	str	r5, [r3, #0]
 800782c:	b105      	cbz	r5, 8007830 <rshift+0x48>
 800782e:	3304      	adds	r3, #4
 8007830:	1b1a      	subs	r2, r3, r4
 8007832:	42a3      	cmp	r3, r4
 8007834:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007838:	bf08      	it	eq
 800783a:	2300      	moveq	r3, #0
 800783c:	6102      	str	r2, [r0, #16]
 800783e:	bf08      	it	eq
 8007840:	6143      	streq	r3, [r0, #20]
 8007842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007844:	683f      	ldr	r7, [r7, #0]
 8007846:	fa07 f70c 	lsl.w	r7, r7, ip
 800784a:	433d      	orrs	r5, r7
 800784c:	f843 5b04 	str.w	r5, [r3], #4
 8007850:	f852 5b04 	ldr.w	r5, [r2], #4
 8007854:	40cd      	lsrs	r5, r1
 8007856:	e7e5      	b.n	8007824 <rshift+0x3c>
 8007858:	4623      	mov	r3, r4
 800785a:	e7e9      	b.n	8007830 <rshift+0x48>

0800785c <__hexdig_fun>:
 800785c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007860:	2b09      	cmp	r3, #9
 8007862:	d802      	bhi.n	800786a <__hexdig_fun+0xe>
 8007864:	3820      	subs	r0, #32
 8007866:	b2c0      	uxtb	r0, r0
 8007868:	4770      	bx	lr
 800786a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800786e:	2b05      	cmp	r3, #5
 8007870:	d801      	bhi.n	8007876 <__hexdig_fun+0x1a>
 8007872:	3847      	subs	r0, #71	; 0x47
 8007874:	e7f7      	b.n	8007866 <__hexdig_fun+0xa>
 8007876:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800787a:	2b05      	cmp	r3, #5
 800787c:	d801      	bhi.n	8007882 <__hexdig_fun+0x26>
 800787e:	3827      	subs	r0, #39	; 0x27
 8007880:	e7f1      	b.n	8007866 <__hexdig_fun+0xa>
 8007882:	2000      	movs	r0, #0
 8007884:	4770      	bx	lr

08007886 <__gethex>:
 8007886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788a:	b08b      	sub	sp, #44	; 0x2c
 800788c:	468a      	mov	sl, r1
 800788e:	9002      	str	r0, [sp, #8]
 8007890:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007892:	9306      	str	r3, [sp, #24]
 8007894:	4690      	mov	r8, r2
 8007896:	f000 fad0 	bl	8007e3a <__localeconv_l>
 800789a:	6803      	ldr	r3, [r0, #0]
 800789c:	9303      	str	r3, [sp, #12]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7f8 fc96 	bl	80001d0 <strlen>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	9001      	str	r0, [sp, #4]
 80078a8:	4403      	add	r3, r0
 80078aa:	f04f 0b00 	mov.w	fp, #0
 80078ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80078b2:	9307      	str	r3, [sp, #28]
 80078b4:	f8da 3000 	ldr.w	r3, [sl]
 80078b8:	3302      	adds	r3, #2
 80078ba:	461f      	mov	r7, r3
 80078bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078c0:	2830      	cmp	r0, #48	; 0x30
 80078c2:	d06c      	beq.n	800799e <__gethex+0x118>
 80078c4:	f7ff ffca 	bl	800785c <__hexdig_fun>
 80078c8:	4604      	mov	r4, r0
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d16a      	bne.n	80079a4 <__gethex+0x11e>
 80078ce:	9a01      	ldr	r2, [sp, #4]
 80078d0:	9903      	ldr	r1, [sp, #12]
 80078d2:	4638      	mov	r0, r7
 80078d4:	f001 f8fe 	bl	8008ad4 <strncmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d166      	bne.n	80079aa <__gethex+0x124>
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	5cf8      	ldrb	r0, [r7, r3]
 80078e0:	18fe      	adds	r6, r7, r3
 80078e2:	f7ff ffbb 	bl	800785c <__hexdig_fun>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d062      	beq.n	80079b0 <__gethex+0x12a>
 80078ea:	4633      	mov	r3, r6
 80078ec:	7818      	ldrb	r0, [r3, #0]
 80078ee:	2830      	cmp	r0, #48	; 0x30
 80078f0:	461f      	mov	r7, r3
 80078f2:	f103 0301 	add.w	r3, r3, #1
 80078f6:	d0f9      	beq.n	80078ec <__gethex+0x66>
 80078f8:	f7ff ffb0 	bl	800785c <__hexdig_fun>
 80078fc:	fab0 f580 	clz	r5, r0
 8007900:	096d      	lsrs	r5, r5, #5
 8007902:	4634      	mov	r4, r6
 8007904:	f04f 0b01 	mov.w	fp, #1
 8007908:	463a      	mov	r2, r7
 800790a:	4616      	mov	r6, r2
 800790c:	3201      	adds	r2, #1
 800790e:	7830      	ldrb	r0, [r6, #0]
 8007910:	f7ff ffa4 	bl	800785c <__hexdig_fun>
 8007914:	2800      	cmp	r0, #0
 8007916:	d1f8      	bne.n	800790a <__gethex+0x84>
 8007918:	9a01      	ldr	r2, [sp, #4]
 800791a:	9903      	ldr	r1, [sp, #12]
 800791c:	4630      	mov	r0, r6
 800791e:	f001 f8d9 	bl	8008ad4 <strncmp>
 8007922:	b950      	cbnz	r0, 800793a <__gethex+0xb4>
 8007924:	b954      	cbnz	r4, 800793c <__gethex+0xb6>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	18f4      	adds	r4, r6, r3
 800792a:	4622      	mov	r2, r4
 800792c:	4616      	mov	r6, r2
 800792e:	3201      	adds	r2, #1
 8007930:	7830      	ldrb	r0, [r6, #0]
 8007932:	f7ff ff93 	bl	800785c <__hexdig_fun>
 8007936:	2800      	cmp	r0, #0
 8007938:	d1f8      	bne.n	800792c <__gethex+0xa6>
 800793a:	b10c      	cbz	r4, 8007940 <__gethex+0xba>
 800793c:	1ba4      	subs	r4, r4, r6
 800793e:	00a4      	lsls	r4, r4, #2
 8007940:	7833      	ldrb	r3, [r6, #0]
 8007942:	2b50      	cmp	r3, #80	; 0x50
 8007944:	d001      	beq.n	800794a <__gethex+0xc4>
 8007946:	2b70      	cmp	r3, #112	; 0x70
 8007948:	d140      	bne.n	80079cc <__gethex+0x146>
 800794a:	7873      	ldrb	r3, [r6, #1]
 800794c:	2b2b      	cmp	r3, #43	; 0x2b
 800794e:	d031      	beq.n	80079b4 <__gethex+0x12e>
 8007950:	2b2d      	cmp	r3, #45	; 0x2d
 8007952:	d033      	beq.n	80079bc <__gethex+0x136>
 8007954:	1c71      	adds	r1, r6, #1
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	7808      	ldrb	r0, [r1, #0]
 800795c:	f7ff ff7e 	bl	800785c <__hexdig_fun>
 8007960:	1e43      	subs	r3, r0, #1
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b18      	cmp	r3, #24
 8007966:	d831      	bhi.n	80079cc <__gethex+0x146>
 8007968:	f1a0 0210 	sub.w	r2, r0, #16
 800796c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007970:	f7ff ff74 	bl	800785c <__hexdig_fun>
 8007974:	1e43      	subs	r3, r0, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b18      	cmp	r3, #24
 800797a:	d922      	bls.n	80079c2 <__gethex+0x13c>
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	d000      	beq.n	8007984 <__gethex+0xfe>
 8007982:	4252      	negs	r2, r2
 8007984:	4414      	add	r4, r2
 8007986:	f8ca 1000 	str.w	r1, [sl]
 800798a:	b30d      	cbz	r5, 80079d0 <__gethex+0x14a>
 800798c:	f1bb 0f00 	cmp.w	fp, #0
 8007990:	bf0c      	ite	eq
 8007992:	2706      	moveq	r7, #6
 8007994:	2700      	movne	r7, #0
 8007996:	4638      	mov	r0, r7
 8007998:	b00b      	add	sp, #44	; 0x2c
 800799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799e:	f10b 0b01 	add.w	fp, fp, #1
 80079a2:	e78a      	b.n	80078ba <__gethex+0x34>
 80079a4:	2500      	movs	r5, #0
 80079a6:	462c      	mov	r4, r5
 80079a8:	e7ae      	b.n	8007908 <__gethex+0x82>
 80079aa:	463e      	mov	r6, r7
 80079ac:	2501      	movs	r5, #1
 80079ae:	e7c7      	b.n	8007940 <__gethex+0xba>
 80079b0:	4604      	mov	r4, r0
 80079b2:	e7fb      	b.n	80079ac <__gethex+0x126>
 80079b4:	f04f 0900 	mov.w	r9, #0
 80079b8:	1cb1      	adds	r1, r6, #2
 80079ba:	e7ce      	b.n	800795a <__gethex+0xd4>
 80079bc:	f04f 0901 	mov.w	r9, #1
 80079c0:	e7fa      	b.n	80079b8 <__gethex+0x132>
 80079c2:	230a      	movs	r3, #10
 80079c4:	fb03 0202 	mla	r2, r3, r2, r0
 80079c8:	3a10      	subs	r2, #16
 80079ca:	e7cf      	b.n	800796c <__gethex+0xe6>
 80079cc:	4631      	mov	r1, r6
 80079ce:	e7da      	b.n	8007986 <__gethex+0x100>
 80079d0:	1bf3      	subs	r3, r6, r7
 80079d2:	3b01      	subs	r3, #1
 80079d4:	4629      	mov	r1, r5
 80079d6:	2b07      	cmp	r3, #7
 80079d8:	dc49      	bgt.n	8007a6e <__gethex+0x1e8>
 80079da:	9802      	ldr	r0, [sp, #8]
 80079dc:	f000 fa63 	bl	8007ea6 <_Balloc>
 80079e0:	9b01      	ldr	r3, [sp, #4]
 80079e2:	f100 0914 	add.w	r9, r0, #20
 80079e6:	f04f 0b00 	mov.w	fp, #0
 80079ea:	f1c3 0301 	rsb	r3, r3, #1
 80079ee:	4605      	mov	r5, r0
 80079f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80079f4:	46da      	mov	sl, fp
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	42b7      	cmp	r7, r6
 80079fa:	d33b      	bcc.n	8007a74 <__gethex+0x1ee>
 80079fc:	9804      	ldr	r0, [sp, #16]
 80079fe:	f840 ab04 	str.w	sl, [r0], #4
 8007a02:	eba0 0009 	sub.w	r0, r0, r9
 8007a06:	1080      	asrs	r0, r0, #2
 8007a08:	6128      	str	r0, [r5, #16]
 8007a0a:	0147      	lsls	r7, r0, #5
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	f000 fb0e 	bl	800802e <__hi0bits>
 8007a12:	f8d8 6000 	ldr.w	r6, [r8]
 8007a16:	1a3f      	subs	r7, r7, r0
 8007a18:	42b7      	cmp	r7, r6
 8007a1a:	dd64      	ble.n	8007ae6 <__gethex+0x260>
 8007a1c:	1bbf      	subs	r7, r7, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 fe1d 	bl	8008660 <__any_on>
 8007a26:	4682      	mov	sl, r0
 8007a28:	b178      	cbz	r0, 8007a4a <__gethex+0x1c4>
 8007a2a:	1e7b      	subs	r3, r7, #1
 8007a2c:	1159      	asrs	r1, r3, #5
 8007a2e:	f003 021f 	and.w	r2, r3, #31
 8007a32:	f04f 0a01 	mov.w	sl, #1
 8007a36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a3a:	fa0a f202 	lsl.w	r2, sl, r2
 8007a3e:	420a      	tst	r2, r1
 8007a40:	d003      	beq.n	8007a4a <__gethex+0x1c4>
 8007a42:	4553      	cmp	r3, sl
 8007a44:	dc46      	bgt.n	8007ad4 <__gethex+0x24e>
 8007a46:	f04f 0a02 	mov.w	sl, #2
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f7ff fecb 	bl	80077e8 <rshift>
 8007a52:	443c      	add	r4, r7
 8007a54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	da52      	bge.n	8007b02 <__gethex+0x27c>
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	9802      	ldr	r0, [sp, #8]
 8007a60:	f000 fa55 	bl	8007f0e <_Bfree>
 8007a64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a66:	2300      	movs	r3, #0
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	27a3      	movs	r7, #163	; 0xa3
 8007a6c:	e793      	b.n	8007996 <__gethex+0x110>
 8007a6e:	3101      	adds	r1, #1
 8007a70:	105b      	asrs	r3, r3, #1
 8007a72:	e7b0      	b.n	80079d6 <__gethex+0x150>
 8007a74:	1e73      	subs	r3, r6, #1
 8007a76:	9305      	str	r3, [sp, #20]
 8007a78:	9a07      	ldr	r2, [sp, #28]
 8007a7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <__gethex+0x22e>
 8007a82:	f1bb 0f20 	cmp.w	fp, #32
 8007a86:	d107      	bne.n	8007a98 <__gethex+0x212>
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	f8c3 a000 	str.w	sl, [r3]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	f04f 0a00 	mov.w	sl, #0
 8007a94:	9304      	str	r3, [sp, #16]
 8007a96:	46d3      	mov	fp, sl
 8007a98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a9c:	f7ff fede 	bl	800785c <__hexdig_fun>
 8007aa0:	f000 000f 	and.w	r0, r0, #15
 8007aa4:	fa00 f00b 	lsl.w	r0, r0, fp
 8007aa8:	ea4a 0a00 	orr.w	sl, sl, r0
 8007aac:	f10b 0b04 	add.w	fp, fp, #4
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	e00d      	b.n	8007ad0 <__gethex+0x24a>
 8007ab4:	9b05      	ldr	r3, [sp, #20]
 8007ab6:	9a08      	ldr	r2, [sp, #32]
 8007ab8:	4413      	add	r3, r2
 8007aba:	42bb      	cmp	r3, r7
 8007abc:	d3e1      	bcc.n	8007a82 <__gethex+0x1fc>
 8007abe:	4618      	mov	r0, r3
 8007ac0:	9a01      	ldr	r2, [sp, #4]
 8007ac2:	9903      	ldr	r1, [sp, #12]
 8007ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac6:	f001 f805 	bl	8008ad4 <strncmp>
 8007aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d1d8      	bne.n	8007a82 <__gethex+0x1fc>
 8007ad0:	461e      	mov	r6, r3
 8007ad2:	e791      	b.n	80079f8 <__gethex+0x172>
 8007ad4:	1eb9      	subs	r1, r7, #2
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f000 fdc2 	bl	8008660 <__any_on>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d0b2      	beq.n	8007a46 <__gethex+0x1c0>
 8007ae0:	f04f 0a03 	mov.w	sl, #3
 8007ae4:	e7b1      	b.n	8007a4a <__gethex+0x1c4>
 8007ae6:	da09      	bge.n	8007afc <__gethex+0x276>
 8007ae8:	1bf7      	subs	r7, r6, r7
 8007aea:	4629      	mov	r1, r5
 8007aec:	463a      	mov	r2, r7
 8007aee:	9802      	ldr	r0, [sp, #8]
 8007af0:	f000 fbd8 	bl	80082a4 <__lshift>
 8007af4:	1be4      	subs	r4, r4, r7
 8007af6:	4605      	mov	r5, r0
 8007af8:	f100 0914 	add.w	r9, r0, #20
 8007afc:	f04f 0a00 	mov.w	sl, #0
 8007b00:	e7a8      	b.n	8007a54 <__gethex+0x1ce>
 8007b02:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b06:	42a0      	cmp	r0, r4
 8007b08:	dd6a      	ble.n	8007be0 <__gethex+0x35a>
 8007b0a:	1b04      	subs	r4, r0, r4
 8007b0c:	42a6      	cmp	r6, r4
 8007b0e:	dc2e      	bgt.n	8007b6e <__gethex+0x2e8>
 8007b10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d022      	beq.n	8007b5e <__gethex+0x2d8>
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d024      	beq.n	8007b66 <__gethex+0x2e0>
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d115      	bne.n	8007b4c <__gethex+0x2c6>
 8007b20:	42a6      	cmp	r6, r4
 8007b22:	d113      	bne.n	8007b4c <__gethex+0x2c6>
 8007b24:	2e01      	cmp	r6, #1
 8007b26:	dc0b      	bgt.n	8007b40 <__gethex+0x2ba>
 8007b28:	9a06      	ldr	r2, [sp, #24]
 8007b2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	2301      	movs	r3, #1
 8007b32:	612b      	str	r3, [r5, #16]
 8007b34:	f8c9 3000 	str.w	r3, [r9]
 8007b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b3a:	2762      	movs	r7, #98	; 0x62
 8007b3c:	601d      	str	r5, [r3, #0]
 8007b3e:	e72a      	b.n	8007996 <__gethex+0x110>
 8007b40:	1e71      	subs	r1, r6, #1
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 fd8c 	bl	8008660 <__any_on>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d1ed      	bne.n	8007b28 <__gethex+0x2a2>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	9802      	ldr	r0, [sp, #8]
 8007b50:	f000 f9dd 	bl	8007f0e <_Bfree>
 8007b54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b56:	2300      	movs	r3, #0
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	2750      	movs	r7, #80	; 0x50
 8007b5c:	e71b      	b.n	8007996 <__gethex+0x110>
 8007b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0e1      	beq.n	8007b28 <__gethex+0x2a2>
 8007b64:	e7f2      	b.n	8007b4c <__gethex+0x2c6>
 8007b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1dd      	bne.n	8007b28 <__gethex+0x2a2>
 8007b6c:	e7ee      	b.n	8007b4c <__gethex+0x2c6>
 8007b6e:	1e67      	subs	r7, r4, #1
 8007b70:	f1ba 0f00 	cmp.w	sl, #0
 8007b74:	d131      	bne.n	8007bda <__gethex+0x354>
 8007b76:	b127      	cbz	r7, 8007b82 <__gethex+0x2fc>
 8007b78:	4639      	mov	r1, r7
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f000 fd70 	bl	8008660 <__any_on>
 8007b80:	4682      	mov	sl, r0
 8007b82:	117a      	asrs	r2, r7, #5
 8007b84:	2301      	movs	r3, #1
 8007b86:	f007 071f 	and.w	r7, r7, #31
 8007b8a:	fa03 f707 	lsl.w	r7, r3, r7
 8007b8e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007b92:	4621      	mov	r1, r4
 8007b94:	421f      	tst	r7, r3
 8007b96:	4628      	mov	r0, r5
 8007b98:	bf18      	it	ne
 8007b9a:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b9e:	1b36      	subs	r6, r6, r4
 8007ba0:	f7ff fe22 	bl	80077e8 <rshift>
 8007ba4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007ba8:	2702      	movs	r7, #2
 8007baa:	f1ba 0f00 	cmp.w	sl, #0
 8007bae:	d048      	beq.n	8007c42 <__gethex+0x3bc>
 8007bb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d015      	beq.n	8007be4 <__gethex+0x35e>
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d017      	beq.n	8007bec <__gethex+0x366>
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d109      	bne.n	8007bd4 <__gethex+0x34e>
 8007bc0:	f01a 0f02 	tst.w	sl, #2
 8007bc4:	d006      	beq.n	8007bd4 <__gethex+0x34e>
 8007bc6:	f8d9 3000 	ldr.w	r3, [r9]
 8007bca:	ea4a 0a03 	orr.w	sl, sl, r3
 8007bce:	f01a 0f01 	tst.w	sl, #1
 8007bd2:	d10e      	bne.n	8007bf2 <__gethex+0x36c>
 8007bd4:	f047 0710 	orr.w	r7, r7, #16
 8007bd8:	e033      	b.n	8007c42 <__gethex+0x3bc>
 8007bda:	f04f 0a01 	mov.w	sl, #1
 8007bde:	e7d0      	b.n	8007b82 <__gethex+0x2fc>
 8007be0:	2701      	movs	r7, #1
 8007be2:	e7e2      	b.n	8007baa <__gethex+0x324>
 8007be4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007be6:	f1c3 0301 	rsb	r3, r3, #1
 8007bea:	9315      	str	r3, [sp, #84]	; 0x54
 8007bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0f0      	beq.n	8007bd4 <__gethex+0x34e>
 8007bf2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007bf6:	f105 0314 	add.w	r3, r5, #20
 8007bfa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007bfe:	eb03 010a 	add.w	r1, r3, sl
 8007c02:	f04f 0c00 	mov.w	ip, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007c10:	d01c      	beq.n	8007c4c <__gethex+0x3c6>
 8007c12:	3201      	adds	r2, #1
 8007c14:	6002      	str	r2, [r0, #0]
 8007c16:	2f02      	cmp	r7, #2
 8007c18:	f105 0314 	add.w	r3, r5, #20
 8007c1c:	d138      	bne.n	8007c90 <__gethex+0x40a>
 8007c1e:	f8d8 2000 	ldr.w	r2, [r8]
 8007c22:	3a01      	subs	r2, #1
 8007c24:	42b2      	cmp	r2, r6
 8007c26:	d10a      	bne.n	8007c3e <__gethex+0x3b8>
 8007c28:	1171      	asrs	r1, r6, #5
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f006 061f 	and.w	r6, r6, #31
 8007c30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c34:	fa02 f606 	lsl.w	r6, r2, r6
 8007c38:	421e      	tst	r6, r3
 8007c3a:	bf18      	it	ne
 8007c3c:	4617      	movne	r7, r2
 8007c3e:	f047 0720 	orr.w	r7, r7, #32
 8007c42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c44:	601d      	str	r5, [r3, #0]
 8007c46:	9b06      	ldr	r3, [sp, #24]
 8007c48:	601c      	str	r4, [r3, #0]
 8007c4a:	e6a4      	b.n	8007996 <__gethex+0x110>
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c52:	d8d8      	bhi.n	8007c06 <__gethex+0x380>
 8007c54:	68ab      	ldr	r3, [r5, #8]
 8007c56:	4599      	cmp	r9, r3
 8007c58:	db12      	blt.n	8007c80 <__gethex+0x3fa>
 8007c5a:	6869      	ldr	r1, [r5, #4]
 8007c5c:	9802      	ldr	r0, [sp, #8]
 8007c5e:	3101      	adds	r1, #1
 8007c60:	f000 f921 	bl	8007ea6 <_Balloc>
 8007c64:	692a      	ldr	r2, [r5, #16]
 8007c66:	3202      	adds	r2, #2
 8007c68:	f105 010c 	add.w	r1, r5, #12
 8007c6c:	4683      	mov	fp, r0
 8007c6e:	0092      	lsls	r2, r2, #2
 8007c70:	300c      	adds	r0, #12
 8007c72:	f000 f90d 	bl	8007e90 <memcpy>
 8007c76:	4629      	mov	r1, r5
 8007c78:	9802      	ldr	r0, [sp, #8]
 8007c7a:	f000 f948 	bl	8007f0e <_Bfree>
 8007c7e:	465d      	mov	r5, fp
 8007c80:	692b      	ldr	r3, [r5, #16]
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c88:	612a      	str	r2, [r5, #16]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	615a      	str	r2, [r3, #20]
 8007c8e:	e7c2      	b.n	8007c16 <__gethex+0x390>
 8007c90:	692a      	ldr	r2, [r5, #16]
 8007c92:	454a      	cmp	r2, r9
 8007c94:	dd0b      	ble.n	8007cae <__gethex+0x428>
 8007c96:	2101      	movs	r1, #1
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f7ff fda5 	bl	80077e8 <rshift>
 8007c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ca2:	3401      	adds	r4, #1
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	f6ff aed9 	blt.w	8007a5c <__gethex+0x1d6>
 8007caa:	2701      	movs	r7, #1
 8007cac:	e7c7      	b.n	8007c3e <__gethex+0x3b8>
 8007cae:	f016 061f 	ands.w	r6, r6, #31
 8007cb2:	d0fa      	beq.n	8007caa <__gethex+0x424>
 8007cb4:	449a      	add	sl, r3
 8007cb6:	f1c6 0620 	rsb	r6, r6, #32
 8007cba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007cbe:	f000 f9b6 	bl	800802e <__hi0bits>
 8007cc2:	42b0      	cmp	r0, r6
 8007cc4:	dbe7      	blt.n	8007c96 <__gethex+0x410>
 8007cc6:	e7f0      	b.n	8007caa <__gethex+0x424>

08007cc8 <L_shift>:
 8007cc8:	f1c2 0208 	rsb	r2, r2, #8
 8007ccc:	0092      	lsls	r2, r2, #2
 8007cce:	b570      	push	{r4, r5, r6, lr}
 8007cd0:	f1c2 0620 	rsb	r6, r2, #32
 8007cd4:	6843      	ldr	r3, [r0, #4]
 8007cd6:	6804      	ldr	r4, [r0, #0]
 8007cd8:	fa03 f506 	lsl.w	r5, r3, r6
 8007cdc:	432c      	orrs	r4, r5
 8007cde:	40d3      	lsrs	r3, r2
 8007ce0:	6004      	str	r4, [r0, #0]
 8007ce2:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ce6:	4288      	cmp	r0, r1
 8007ce8:	d3f4      	bcc.n	8007cd4 <L_shift+0xc>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}

08007cec <__match>:
 8007cec:	b530      	push	{r4, r5, lr}
 8007cee:	6803      	ldr	r3, [r0, #0]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cf6:	b914      	cbnz	r4, 8007cfe <__match+0x12>
 8007cf8:	6003      	str	r3, [r0, #0]
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	bd30      	pop	{r4, r5, pc}
 8007cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d06:	2d19      	cmp	r5, #25
 8007d08:	bf98      	it	ls
 8007d0a:	3220      	addls	r2, #32
 8007d0c:	42a2      	cmp	r2, r4
 8007d0e:	d0f0      	beq.n	8007cf2 <__match+0x6>
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7f3      	b.n	8007cfc <__match+0x10>

08007d14 <__hexnan>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	680b      	ldr	r3, [r1, #0]
 8007d1a:	6801      	ldr	r1, [r0, #0]
 8007d1c:	115f      	asrs	r7, r3, #5
 8007d1e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007d22:	f013 031f 	ands.w	r3, r3, #31
 8007d26:	b087      	sub	sp, #28
 8007d28:	bf18      	it	ne
 8007d2a:	3704      	addne	r7, #4
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	1f3e      	subs	r6, r7, #4
 8007d30:	4682      	mov	sl, r0
 8007d32:	4690      	mov	r8, r2
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f847 5c04 	str.w	r5, [r7, #-4]
 8007d3a:	46b1      	mov	r9, r6
 8007d3c:	4634      	mov	r4, r6
 8007d3e:	9502      	str	r5, [sp, #8]
 8007d40:	46ab      	mov	fp, r5
 8007d42:	784a      	ldrb	r2, [r1, #1]
 8007d44:	1c4b      	adds	r3, r1, #1
 8007d46:	9303      	str	r3, [sp, #12]
 8007d48:	b342      	cbz	r2, 8007d9c <__hexnan+0x88>
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	9105      	str	r1, [sp, #20]
 8007d4e:	9204      	str	r2, [sp, #16]
 8007d50:	f7ff fd84 	bl	800785c <__hexdig_fun>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d143      	bne.n	8007de0 <__hexnan+0xcc>
 8007d58:	9a04      	ldr	r2, [sp, #16]
 8007d5a:	9905      	ldr	r1, [sp, #20]
 8007d5c:	2a20      	cmp	r2, #32
 8007d5e:	d818      	bhi.n	8007d92 <__hexnan+0x7e>
 8007d60:	9b02      	ldr	r3, [sp, #8]
 8007d62:	459b      	cmp	fp, r3
 8007d64:	dd13      	ble.n	8007d8e <__hexnan+0x7a>
 8007d66:	454c      	cmp	r4, r9
 8007d68:	d206      	bcs.n	8007d78 <__hexnan+0x64>
 8007d6a:	2d07      	cmp	r5, #7
 8007d6c:	dc04      	bgt.n	8007d78 <__hexnan+0x64>
 8007d6e:	462a      	mov	r2, r5
 8007d70:	4649      	mov	r1, r9
 8007d72:	4620      	mov	r0, r4
 8007d74:	f7ff ffa8 	bl	8007cc8 <L_shift>
 8007d78:	4544      	cmp	r4, r8
 8007d7a:	d944      	bls.n	8007e06 <__hexnan+0xf2>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f1a4 0904 	sub.w	r9, r4, #4
 8007d82:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d86:	f8cd b008 	str.w	fp, [sp, #8]
 8007d8a:	464c      	mov	r4, r9
 8007d8c:	461d      	mov	r5, r3
 8007d8e:	9903      	ldr	r1, [sp, #12]
 8007d90:	e7d7      	b.n	8007d42 <__hexnan+0x2e>
 8007d92:	2a29      	cmp	r2, #41	; 0x29
 8007d94:	d14a      	bne.n	8007e2c <__hexnan+0x118>
 8007d96:	3102      	adds	r1, #2
 8007d98:	f8ca 1000 	str.w	r1, [sl]
 8007d9c:	f1bb 0f00 	cmp.w	fp, #0
 8007da0:	d044      	beq.n	8007e2c <__hexnan+0x118>
 8007da2:	454c      	cmp	r4, r9
 8007da4:	d206      	bcs.n	8007db4 <__hexnan+0xa0>
 8007da6:	2d07      	cmp	r5, #7
 8007da8:	dc04      	bgt.n	8007db4 <__hexnan+0xa0>
 8007daa:	462a      	mov	r2, r5
 8007dac:	4649      	mov	r1, r9
 8007dae:	4620      	mov	r0, r4
 8007db0:	f7ff ff8a 	bl	8007cc8 <L_shift>
 8007db4:	4544      	cmp	r4, r8
 8007db6:	d928      	bls.n	8007e0a <__hexnan+0xf6>
 8007db8:	4643      	mov	r3, r8
 8007dba:	f854 2b04 	ldr.w	r2, [r4], #4
 8007dbe:	f843 2b04 	str.w	r2, [r3], #4
 8007dc2:	42a6      	cmp	r6, r4
 8007dc4:	d2f9      	bcs.n	8007dba <__hexnan+0xa6>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f843 2b04 	str.w	r2, [r3], #4
 8007dcc:	429e      	cmp	r6, r3
 8007dce:	d2fb      	bcs.n	8007dc8 <__hexnan+0xb4>
 8007dd0:	6833      	ldr	r3, [r6, #0]
 8007dd2:	b91b      	cbnz	r3, 8007ddc <__hexnan+0xc8>
 8007dd4:	4546      	cmp	r6, r8
 8007dd6:	d127      	bne.n	8007e28 <__hexnan+0x114>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	2005      	movs	r0, #5
 8007dde:	e026      	b.n	8007e2e <__hexnan+0x11a>
 8007de0:	3501      	adds	r5, #1
 8007de2:	2d08      	cmp	r5, #8
 8007de4:	f10b 0b01 	add.w	fp, fp, #1
 8007de8:	dd06      	ble.n	8007df8 <__hexnan+0xe4>
 8007dea:	4544      	cmp	r4, r8
 8007dec:	d9cf      	bls.n	8007d8e <__hexnan+0x7a>
 8007dee:	2300      	movs	r3, #0
 8007df0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007df4:	2501      	movs	r5, #1
 8007df6:	3c04      	subs	r4, #4
 8007df8:	6822      	ldr	r2, [r4, #0]
 8007dfa:	f000 000f 	and.w	r0, r0, #15
 8007dfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007e02:	6020      	str	r0, [r4, #0]
 8007e04:	e7c3      	b.n	8007d8e <__hexnan+0x7a>
 8007e06:	2508      	movs	r5, #8
 8007e08:	e7c1      	b.n	8007d8e <__hexnan+0x7a>
 8007e0a:	9b01      	ldr	r3, [sp, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0df      	beq.n	8007dd0 <__hexnan+0xbc>
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e14:	f1c3 0320 	rsb	r3, r3, #32
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007e20:	401a      	ands	r2, r3
 8007e22:	f847 2c04 	str.w	r2, [r7, #-4]
 8007e26:	e7d3      	b.n	8007dd0 <__hexnan+0xbc>
 8007e28:	3e04      	subs	r6, #4
 8007e2a:	e7d1      	b.n	8007dd0 <__hexnan+0xbc>
 8007e2c:	2004      	movs	r0, #4
 8007e2e:	b007      	add	sp, #28
 8007e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e34 <__locale_ctype_ptr_l>:
 8007e34:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007e38:	4770      	bx	lr

08007e3a <__localeconv_l>:
 8007e3a:	30f0      	adds	r0, #240	; 0xf0
 8007e3c:	4770      	bx	lr
	...

08007e40 <_localeconv_r>:
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <_localeconv_r+0x14>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6a18      	ldr	r0, [r3, #32]
 8007e46:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <_localeconv_r+0x18>)
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	bf08      	it	eq
 8007e4c:	4618      	moveq	r0, r3
 8007e4e:	30f0      	adds	r0, #240	; 0xf0
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000018 	.word	0x20000018
 8007e58:	2000007c 	.word	0x2000007c

08007e5c <malloc>:
 8007e5c:	4b02      	ldr	r3, [pc, #8]	; (8007e68 <malloc+0xc>)
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	f000 bc7b 	b.w	800875c <_malloc_r>
 8007e66:	bf00      	nop
 8007e68:	20000018 	.word	0x20000018

08007e6c <__ascii_mbtowc>:
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	b901      	cbnz	r1, 8007e72 <__ascii_mbtowc+0x6>
 8007e70:	a901      	add	r1, sp, #4
 8007e72:	b142      	cbz	r2, 8007e86 <__ascii_mbtowc+0x1a>
 8007e74:	b14b      	cbz	r3, 8007e8a <__ascii_mbtowc+0x1e>
 8007e76:	7813      	ldrb	r3, [r2, #0]
 8007e78:	600b      	str	r3, [r1, #0]
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	1c10      	adds	r0, r2, #0
 8007e7e:	bf18      	it	ne
 8007e80:	2001      	movne	r0, #1
 8007e82:	b002      	add	sp, #8
 8007e84:	4770      	bx	lr
 8007e86:	4610      	mov	r0, r2
 8007e88:	e7fb      	b.n	8007e82 <__ascii_mbtowc+0x16>
 8007e8a:	f06f 0001 	mvn.w	r0, #1
 8007e8e:	e7f8      	b.n	8007e82 <__ascii_mbtowc+0x16>

08007e90 <memcpy>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	1e43      	subs	r3, r0, #1
 8007e94:	440a      	add	r2, r1
 8007e96:	4291      	cmp	r1, r2
 8007e98:	d100      	bne.n	8007e9c <memcpy+0xc>
 8007e9a:	bd10      	pop	{r4, pc}
 8007e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea4:	e7f7      	b.n	8007e96 <memcpy+0x6>

08007ea6 <_Balloc>:
 8007ea6:	b570      	push	{r4, r5, r6, lr}
 8007ea8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007eaa:	4604      	mov	r4, r0
 8007eac:	460e      	mov	r6, r1
 8007eae:	b93d      	cbnz	r5, 8007ec0 <_Balloc+0x1a>
 8007eb0:	2010      	movs	r0, #16
 8007eb2:	f7ff ffd3 	bl	8007e5c <malloc>
 8007eb6:	6260      	str	r0, [r4, #36]	; 0x24
 8007eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ebc:	6005      	str	r5, [r0, #0]
 8007ebe:	60c5      	str	r5, [r0, #12]
 8007ec0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ec2:	68eb      	ldr	r3, [r5, #12]
 8007ec4:	b183      	cbz	r3, 8007ee8 <_Balloc+0x42>
 8007ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007ece:	b9b8      	cbnz	r0, 8007f00 <_Balloc+0x5a>
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	fa01 f506 	lsl.w	r5, r1, r6
 8007ed6:	1d6a      	adds	r2, r5, #5
 8007ed8:	0092      	lsls	r2, r2, #2
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fbe1 	bl	80086a2 <_calloc_r>
 8007ee0:	b160      	cbz	r0, 8007efc <_Balloc+0x56>
 8007ee2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007ee6:	e00e      	b.n	8007f06 <_Balloc+0x60>
 8007ee8:	2221      	movs	r2, #33	; 0x21
 8007eea:	2104      	movs	r1, #4
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fbd8 	bl	80086a2 <_calloc_r>
 8007ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef4:	60e8      	str	r0, [r5, #12]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e4      	bne.n	8007ec6 <_Balloc+0x20>
 8007efc:	2000      	movs	r0, #0
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	6802      	ldr	r2, [r0, #0]
 8007f02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007f06:	2300      	movs	r3, #0
 8007f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f0c:	e7f7      	b.n	8007efe <_Balloc+0x58>

08007f0e <_Bfree>:
 8007f0e:	b570      	push	{r4, r5, r6, lr}
 8007f10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f12:	4606      	mov	r6, r0
 8007f14:	460d      	mov	r5, r1
 8007f16:	b93c      	cbnz	r4, 8007f28 <_Bfree+0x1a>
 8007f18:	2010      	movs	r0, #16
 8007f1a:	f7ff ff9f 	bl	8007e5c <malloc>
 8007f1e:	6270      	str	r0, [r6, #36]	; 0x24
 8007f20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f24:	6004      	str	r4, [r0, #0]
 8007f26:	60c4      	str	r4, [r0, #12]
 8007f28:	b13d      	cbz	r5, 8007f3a <_Bfree+0x2c>
 8007f2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007f2c:	686a      	ldr	r2, [r5, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f34:	6029      	str	r1, [r5, #0]
 8007f36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}

08007f3c <__multadd>:
 8007f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	690d      	ldr	r5, [r1, #16]
 8007f42:	461f      	mov	r7, r3
 8007f44:	4606      	mov	r6, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	f101 0c14 	add.w	ip, r1, #20
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8dc 0000 	ldr.w	r0, [ip]
 8007f52:	b281      	uxth	r1, r0
 8007f54:	fb02 7101 	mla	r1, r2, r1, r7
 8007f58:	0c0f      	lsrs	r7, r1, #16
 8007f5a:	0c00      	lsrs	r0, r0, #16
 8007f5c:	fb02 7000 	mla	r0, r2, r0, r7
 8007f60:	b289      	uxth	r1, r1
 8007f62:	3301      	adds	r3, #1
 8007f64:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007f68:	429d      	cmp	r5, r3
 8007f6a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007f6e:	f84c 1b04 	str.w	r1, [ip], #4
 8007f72:	dcec      	bgt.n	8007f4e <__multadd+0x12>
 8007f74:	b1d7      	cbz	r7, 8007fac <__multadd+0x70>
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	dc12      	bgt.n	8007fa2 <__multadd+0x66>
 8007f7c:	6861      	ldr	r1, [r4, #4]
 8007f7e:	4630      	mov	r0, r6
 8007f80:	3101      	adds	r1, #1
 8007f82:	f7ff ff90 	bl	8007ea6 <_Balloc>
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	3202      	adds	r2, #2
 8007f8a:	f104 010c 	add.w	r1, r4, #12
 8007f8e:	4680      	mov	r8, r0
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	300c      	adds	r0, #12
 8007f94:	f7ff ff7c 	bl	8007e90 <memcpy>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ffb7 	bl	8007f0e <_Bfree>
 8007fa0:	4644      	mov	r4, r8
 8007fa2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fa6:	3501      	adds	r5, #1
 8007fa8:	615f      	str	r7, [r3, #20]
 8007faa:	6125      	str	r5, [r4, #16]
 8007fac:	4620      	mov	r0, r4
 8007fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007fb2 <__s2b>:
 8007fb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4615      	mov	r5, r2
 8007fba:	461f      	mov	r7, r3
 8007fbc:	2209      	movs	r2, #9
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	2201      	movs	r2, #1
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	db20      	blt.n	8008010 <__s2b+0x5e>
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ff69 	bl	8007ea6 <_Balloc>
 8007fd4:	9b08      	ldr	r3, [sp, #32]
 8007fd6:	6143      	str	r3, [r0, #20]
 8007fd8:	2d09      	cmp	r5, #9
 8007fda:	f04f 0301 	mov.w	r3, #1
 8007fde:	6103      	str	r3, [r0, #16]
 8007fe0:	dd19      	ble.n	8008016 <__s2b+0x64>
 8007fe2:	f104 0809 	add.w	r8, r4, #9
 8007fe6:	46c1      	mov	r9, r8
 8007fe8:	442c      	add	r4, r5
 8007fea:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007fee:	4601      	mov	r1, r0
 8007ff0:	3b30      	subs	r3, #48	; 0x30
 8007ff2:	220a      	movs	r2, #10
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff ffa1 	bl	8007f3c <__multadd>
 8007ffa:	45a1      	cmp	r9, r4
 8007ffc:	d1f5      	bne.n	8007fea <__s2b+0x38>
 8007ffe:	eb08 0405 	add.w	r4, r8, r5
 8008002:	3c08      	subs	r4, #8
 8008004:	1b2d      	subs	r5, r5, r4
 8008006:	1963      	adds	r3, r4, r5
 8008008:	42bb      	cmp	r3, r7
 800800a:	db07      	blt.n	800801c <__s2b+0x6a>
 800800c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008010:	0052      	lsls	r2, r2, #1
 8008012:	3101      	adds	r1, #1
 8008014:	e7d9      	b.n	8007fca <__s2b+0x18>
 8008016:	340a      	adds	r4, #10
 8008018:	2509      	movs	r5, #9
 800801a:	e7f3      	b.n	8008004 <__s2b+0x52>
 800801c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008020:	4601      	mov	r1, r0
 8008022:	3b30      	subs	r3, #48	; 0x30
 8008024:	220a      	movs	r2, #10
 8008026:	4630      	mov	r0, r6
 8008028:	f7ff ff88 	bl	8007f3c <__multadd>
 800802c:	e7eb      	b.n	8008006 <__s2b+0x54>

0800802e <__hi0bits>:
 800802e:	0c02      	lsrs	r2, r0, #16
 8008030:	0412      	lsls	r2, r2, #16
 8008032:	4603      	mov	r3, r0
 8008034:	b9b2      	cbnz	r2, 8008064 <__hi0bits+0x36>
 8008036:	0403      	lsls	r3, r0, #16
 8008038:	2010      	movs	r0, #16
 800803a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800803e:	bf04      	itt	eq
 8008040:	021b      	lsleq	r3, r3, #8
 8008042:	3008      	addeq	r0, #8
 8008044:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008048:	bf04      	itt	eq
 800804a:	011b      	lsleq	r3, r3, #4
 800804c:	3004      	addeq	r0, #4
 800804e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008052:	bf04      	itt	eq
 8008054:	009b      	lsleq	r3, r3, #2
 8008056:	3002      	addeq	r0, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	db06      	blt.n	800806a <__hi0bits+0x3c>
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	d503      	bpl.n	8008068 <__hi0bits+0x3a>
 8008060:	3001      	adds	r0, #1
 8008062:	4770      	bx	lr
 8008064:	2000      	movs	r0, #0
 8008066:	e7e8      	b.n	800803a <__hi0bits+0xc>
 8008068:	2020      	movs	r0, #32
 800806a:	4770      	bx	lr

0800806c <__lo0bits>:
 800806c:	6803      	ldr	r3, [r0, #0]
 800806e:	f013 0207 	ands.w	r2, r3, #7
 8008072:	4601      	mov	r1, r0
 8008074:	d00b      	beq.n	800808e <__lo0bits+0x22>
 8008076:	07da      	lsls	r2, r3, #31
 8008078:	d423      	bmi.n	80080c2 <__lo0bits+0x56>
 800807a:	0798      	lsls	r0, r3, #30
 800807c:	bf49      	itett	mi
 800807e:	085b      	lsrmi	r3, r3, #1
 8008080:	089b      	lsrpl	r3, r3, #2
 8008082:	2001      	movmi	r0, #1
 8008084:	600b      	strmi	r3, [r1, #0]
 8008086:	bf5c      	itt	pl
 8008088:	600b      	strpl	r3, [r1, #0]
 800808a:	2002      	movpl	r0, #2
 800808c:	4770      	bx	lr
 800808e:	b298      	uxth	r0, r3
 8008090:	b9a8      	cbnz	r0, 80080be <__lo0bits+0x52>
 8008092:	0c1b      	lsrs	r3, r3, #16
 8008094:	2010      	movs	r0, #16
 8008096:	f013 0fff 	tst.w	r3, #255	; 0xff
 800809a:	bf04      	itt	eq
 800809c:	0a1b      	lsreq	r3, r3, #8
 800809e:	3008      	addeq	r0, #8
 80080a0:	071a      	lsls	r2, r3, #28
 80080a2:	bf04      	itt	eq
 80080a4:	091b      	lsreq	r3, r3, #4
 80080a6:	3004      	addeq	r0, #4
 80080a8:	079a      	lsls	r2, r3, #30
 80080aa:	bf04      	itt	eq
 80080ac:	089b      	lsreq	r3, r3, #2
 80080ae:	3002      	addeq	r0, #2
 80080b0:	07da      	lsls	r2, r3, #31
 80080b2:	d402      	bmi.n	80080ba <__lo0bits+0x4e>
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	d006      	beq.n	80080c6 <__lo0bits+0x5a>
 80080b8:	3001      	adds	r0, #1
 80080ba:	600b      	str	r3, [r1, #0]
 80080bc:	4770      	bx	lr
 80080be:	4610      	mov	r0, r2
 80080c0:	e7e9      	b.n	8008096 <__lo0bits+0x2a>
 80080c2:	2000      	movs	r0, #0
 80080c4:	4770      	bx	lr
 80080c6:	2020      	movs	r0, #32
 80080c8:	4770      	bx	lr

080080ca <__i2b>:
 80080ca:	b510      	push	{r4, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	2101      	movs	r1, #1
 80080d0:	f7ff fee9 	bl	8007ea6 <_Balloc>
 80080d4:	2201      	movs	r2, #1
 80080d6:	6144      	str	r4, [r0, #20]
 80080d8:	6102      	str	r2, [r0, #16]
 80080da:	bd10      	pop	{r4, pc}

080080dc <__multiply>:
 80080dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	4614      	mov	r4, r2
 80080e2:	690a      	ldr	r2, [r1, #16]
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	bfb8      	it	lt
 80080ea:	460b      	movlt	r3, r1
 80080ec:	4688      	mov	r8, r1
 80080ee:	bfbc      	itt	lt
 80080f0:	46a0      	movlt	r8, r4
 80080f2:	461c      	movlt	r4, r3
 80080f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80080fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008100:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008104:	eb07 0609 	add.w	r6, r7, r9
 8008108:	42b3      	cmp	r3, r6
 800810a:	bfb8      	it	lt
 800810c:	3101      	addlt	r1, #1
 800810e:	f7ff feca 	bl	8007ea6 <_Balloc>
 8008112:	f100 0514 	add.w	r5, r0, #20
 8008116:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800811a:	462b      	mov	r3, r5
 800811c:	2200      	movs	r2, #0
 800811e:	4573      	cmp	r3, lr
 8008120:	d316      	bcc.n	8008150 <__multiply+0x74>
 8008122:	f104 0214 	add.w	r2, r4, #20
 8008126:	f108 0114 	add.w	r1, r8, #20
 800812a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800812e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	9b00      	ldr	r3, [sp, #0]
 8008136:	9201      	str	r2, [sp, #4]
 8008138:	4293      	cmp	r3, r2
 800813a:	d80c      	bhi.n	8008156 <__multiply+0x7a>
 800813c:	2e00      	cmp	r6, #0
 800813e:	dd03      	ble.n	8008148 <__multiply+0x6c>
 8008140:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008144:	2b00      	cmp	r3, #0
 8008146:	d05d      	beq.n	8008204 <__multiply+0x128>
 8008148:	6106      	str	r6, [r0, #16]
 800814a:	b003      	add	sp, #12
 800814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008150:	f843 2b04 	str.w	r2, [r3], #4
 8008154:	e7e3      	b.n	800811e <__multiply+0x42>
 8008156:	f8b2 b000 	ldrh.w	fp, [r2]
 800815a:	f1bb 0f00 	cmp.w	fp, #0
 800815e:	d023      	beq.n	80081a8 <__multiply+0xcc>
 8008160:	4689      	mov	r9, r1
 8008162:	46ac      	mov	ip, r5
 8008164:	f04f 0800 	mov.w	r8, #0
 8008168:	f859 4b04 	ldr.w	r4, [r9], #4
 800816c:	f8dc a000 	ldr.w	sl, [ip]
 8008170:	b2a3      	uxth	r3, r4
 8008172:	fa1f fa8a 	uxth.w	sl, sl
 8008176:	fb0b a303 	mla	r3, fp, r3, sl
 800817a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800817e:	f8dc 4000 	ldr.w	r4, [ip]
 8008182:	4443      	add	r3, r8
 8008184:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008188:	fb0b 840a 	mla	r4, fp, sl, r8
 800818c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008190:	46e2      	mov	sl, ip
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008198:	454f      	cmp	r7, r9
 800819a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800819e:	f84a 3b04 	str.w	r3, [sl], #4
 80081a2:	d82b      	bhi.n	80081fc <__multiply+0x120>
 80081a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80081ae:	3204      	adds	r2, #4
 80081b0:	f1ba 0f00 	cmp.w	sl, #0
 80081b4:	d020      	beq.n	80081f8 <__multiply+0x11c>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	4689      	mov	r9, r1
 80081ba:	46a8      	mov	r8, r5
 80081bc:	f04f 0b00 	mov.w	fp, #0
 80081c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80081c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80081c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80081cc:	445c      	add	r4, fp
 80081ce:	46c4      	mov	ip, r8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081d6:	f84c 3b04 	str.w	r3, [ip], #4
 80081da:	f859 3b04 	ldr.w	r3, [r9], #4
 80081de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	fb0a b303 	mla	r3, sl, r3, fp
 80081e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80081ec:	454f      	cmp	r7, r9
 80081ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80081f2:	d805      	bhi.n	8008200 <__multiply+0x124>
 80081f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80081f8:	3504      	adds	r5, #4
 80081fa:	e79b      	b.n	8008134 <__multiply+0x58>
 80081fc:	46d4      	mov	ip, sl
 80081fe:	e7b3      	b.n	8008168 <__multiply+0x8c>
 8008200:	46e0      	mov	r8, ip
 8008202:	e7dd      	b.n	80081c0 <__multiply+0xe4>
 8008204:	3e01      	subs	r6, #1
 8008206:	e799      	b.n	800813c <__multiply+0x60>

08008208 <__pow5mult>:
 8008208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800820c:	4615      	mov	r5, r2
 800820e:	f012 0203 	ands.w	r2, r2, #3
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	d007      	beq.n	8008228 <__pow5mult+0x20>
 8008218:	3a01      	subs	r2, #1
 800821a:	4c21      	ldr	r4, [pc, #132]	; (80082a0 <__pow5mult+0x98>)
 800821c:	2300      	movs	r3, #0
 800821e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008222:	f7ff fe8b 	bl	8007f3c <__multadd>
 8008226:	4607      	mov	r7, r0
 8008228:	10ad      	asrs	r5, r5, #2
 800822a:	d035      	beq.n	8008298 <__pow5mult+0x90>
 800822c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800822e:	b93c      	cbnz	r4, 8008240 <__pow5mult+0x38>
 8008230:	2010      	movs	r0, #16
 8008232:	f7ff fe13 	bl	8007e5c <malloc>
 8008236:	6270      	str	r0, [r6, #36]	; 0x24
 8008238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800823c:	6004      	str	r4, [r0, #0]
 800823e:	60c4      	str	r4, [r0, #12]
 8008240:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008248:	b94c      	cbnz	r4, 800825e <__pow5mult+0x56>
 800824a:	f240 2171 	movw	r1, #625	; 0x271
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ff3b 	bl	80080ca <__i2b>
 8008254:	2300      	movs	r3, #0
 8008256:	f8c8 0008 	str.w	r0, [r8, #8]
 800825a:	4604      	mov	r4, r0
 800825c:	6003      	str	r3, [r0, #0]
 800825e:	f04f 0800 	mov.w	r8, #0
 8008262:	07eb      	lsls	r3, r5, #31
 8008264:	d50a      	bpl.n	800827c <__pow5mult+0x74>
 8008266:	4639      	mov	r1, r7
 8008268:	4622      	mov	r2, r4
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ff36 	bl	80080dc <__multiply>
 8008270:	4639      	mov	r1, r7
 8008272:	4681      	mov	r9, r0
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff fe4a 	bl	8007f0e <_Bfree>
 800827a:	464f      	mov	r7, r9
 800827c:	106d      	asrs	r5, r5, #1
 800827e:	d00b      	beq.n	8008298 <__pow5mult+0x90>
 8008280:	6820      	ldr	r0, [r4, #0]
 8008282:	b938      	cbnz	r0, 8008294 <__pow5mult+0x8c>
 8008284:	4622      	mov	r2, r4
 8008286:	4621      	mov	r1, r4
 8008288:	4630      	mov	r0, r6
 800828a:	f7ff ff27 	bl	80080dc <__multiply>
 800828e:	6020      	str	r0, [r4, #0]
 8008290:	f8c0 8000 	str.w	r8, [r0]
 8008294:	4604      	mov	r4, r0
 8008296:	e7e4      	b.n	8008262 <__pow5mult+0x5a>
 8008298:	4638      	mov	r0, r7
 800829a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829e:	bf00      	nop
 80082a0:	08008dd8 	.word	0x08008dd8

080082a4 <__lshift>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	460c      	mov	r4, r1
 80082aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	6849      	ldr	r1, [r1, #4]
 80082b2:	eb0a 0903 	add.w	r9, sl, r3
 80082b6:	68a3      	ldr	r3, [r4, #8]
 80082b8:	4607      	mov	r7, r0
 80082ba:	4616      	mov	r6, r2
 80082bc:	f109 0501 	add.w	r5, r9, #1
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	db32      	blt.n	800832a <__lshift+0x86>
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff fdee 	bl	8007ea6 <_Balloc>
 80082ca:	2300      	movs	r3, #0
 80082cc:	4680      	mov	r8, r0
 80082ce:	f100 0114 	add.w	r1, r0, #20
 80082d2:	461a      	mov	r2, r3
 80082d4:	4553      	cmp	r3, sl
 80082d6:	db2b      	blt.n	8008330 <__lshift+0x8c>
 80082d8:	6920      	ldr	r0, [r4, #16]
 80082da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082de:	f104 0314 	add.w	r3, r4, #20
 80082e2:	f016 021f 	ands.w	r2, r6, #31
 80082e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082ee:	d025      	beq.n	800833c <__lshift+0x98>
 80082f0:	f1c2 0e20 	rsb	lr, r2, #32
 80082f4:	2000      	movs	r0, #0
 80082f6:	681e      	ldr	r6, [r3, #0]
 80082f8:	468a      	mov	sl, r1
 80082fa:	4096      	lsls	r6, r2
 80082fc:	4330      	orrs	r0, r6
 80082fe:	f84a 0b04 	str.w	r0, [sl], #4
 8008302:	f853 0b04 	ldr.w	r0, [r3], #4
 8008306:	459c      	cmp	ip, r3
 8008308:	fa20 f00e 	lsr.w	r0, r0, lr
 800830c:	d814      	bhi.n	8008338 <__lshift+0x94>
 800830e:	6048      	str	r0, [r1, #4]
 8008310:	b108      	cbz	r0, 8008316 <__lshift+0x72>
 8008312:	f109 0502 	add.w	r5, r9, #2
 8008316:	3d01      	subs	r5, #1
 8008318:	4638      	mov	r0, r7
 800831a:	f8c8 5010 	str.w	r5, [r8, #16]
 800831e:	4621      	mov	r1, r4
 8008320:	f7ff fdf5 	bl	8007f0e <_Bfree>
 8008324:	4640      	mov	r0, r8
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	3101      	adds	r1, #1
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	e7c7      	b.n	80082c0 <__lshift+0x1c>
 8008330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008334:	3301      	adds	r3, #1
 8008336:	e7cd      	b.n	80082d4 <__lshift+0x30>
 8008338:	4651      	mov	r1, sl
 800833a:	e7dc      	b.n	80082f6 <__lshift+0x52>
 800833c:	3904      	subs	r1, #4
 800833e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008342:	f841 2f04 	str.w	r2, [r1, #4]!
 8008346:	459c      	cmp	ip, r3
 8008348:	d8f9      	bhi.n	800833e <__lshift+0x9a>
 800834a:	e7e4      	b.n	8008316 <__lshift+0x72>

0800834c <__mcmp>:
 800834c:	6903      	ldr	r3, [r0, #16]
 800834e:	690a      	ldr	r2, [r1, #16]
 8008350:	1a9b      	subs	r3, r3, r2
 8008352:	b530      	push	{r4, r5, lr}
 8008354:	d10c      	bne.n	8008370 <__mcmp+0x24>
 8008356:	0092      	lsls	r2, r2, #2
 8008358:	3014      	adds	r0, #20
 800835a:	3114      	adds	r1, #20
 800835c:	1884      	adds	r4, r0, r2
 800835e:	4411      	add	r1, r2
 8008360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008368:	4295      	cmp	r5, r2
 800836a:	d003      	beq.n	8008374 <__mcmp+0x28>
 800836c:	d305      	bcc.n	800837a <__mcmp+0x2e>
 800836e:	2301      	movs	r3, #1
 8008370:	4618      	mov	r0, r3
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	42a0      	cmp	r0, r4
 8008376:	d3f3      	bcc.n	8008360 <__mcmp+0x14>
 8008378:	e7fa      	b.n	8008370 <__mcmp+0x24>
 800837a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800837e:	e7f7      	b.n	8008370 <__mcmp+0x24>

08008380 <__mdiff>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	460d      	mov	r5, r1
 8008386:	4607      	mov	r7, r0
 8008388:	4611      	mov	r1, r2
 800838a:	4628      	mov	r0, r5
 800838c:	4614      	mov	r4, r2
 800838e:	f7ff ffdd 	bl	800834c <__mcmp>
 8008392:	1e06      	subs	r6, r0, #0
 8008394:	d108      	bne.n	80083a8 <__mdiff+0x28>
 8008396:	4631      	mov	r1, r6
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff fd84 	bl	8007ea6 <_Balloc>
 800839e:	2301      	movs	r3, #1
 80083a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80083a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a8:	bfa4      	itt	ge
 80083aa:	4623      	movge	r3, r4
 80083ac:	462c      	movge	r4, r5
 80083ae:	4638      	mov	r0, r7
 80083b0:	6861      	ldr	r1, [r4, #4]
 80083b2:	bfa6      	itte	ge
 80083b4:	461d      	movge	r5, r3
 80083b6:	2600      	movge	r6, #0
 80083b8:	2601      	movlt	r6, #1
 80083ba:	f7ff fd74 	bl	8007ea6 <_Balloc>
 80083be:	692b      	ldr	r3, [r5, #16]
 80083c0:	60c6      	str	r6, [r0, #12]
 80083c2:	6926      	ldr	r6, [r4, #16]
 80083c4:	f105 0914 	add.w	r9, r5, #20
 80083c8:	f104 0214 	add.w	r2, r4, #20
 80083cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80083d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80083d4:	f100 0514 	add.w	r5, r0, #20
 80083d8:	f04f 0e00 	mov.w	lr, #0
 80083dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80083e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80083e4:	fa1e f18a 	uxtah	r1, lr, sl
 80083e8:	b2a3      	uxth	r3, r4
 80083ea:	1ac9      	subs	r1, r1, r3
 80083ec:	0c23      	lsrs	r3, r4, #16
 80083ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80083f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80083f6:	b289      	uxth	r1, r1
 80083f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80083fc:	45c8      	cmp	r8, r9
 80083fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008402:	4694      	mov	ip, r2
 8008404:	f845 3b04 	str.w	r3, [r5], #4
 8008408:	d8e8      	bhi.n	80083dc <__mdiff+0x5c>
 800840a:	45bc      	cmp	ip, r7
 800840c:	d304      	bcc.n	8008418 <__mdiff+0x98>
 800840e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008412:	b183      	cbz	r3, 8008436 <__mdiff+0xb6>
 8008414:	6106      	str	r6, [r0, #16]
 8008416:	e7c5      	b.n	80083a4 <__mdiff+0x24>
 8008418:	f85c 1b04 	ldr.w	r1, [ip], #4
 800841c:	fa1e f381 	uxtah	r3, lr, r1
 8008420:	141a      	asrs	r2, r3, #16
 8008422:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008426:	b29b      	uxth	r3, r3
 8008428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800842c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008430:	f845 3b04 	str.w	r3, [r5], #4
 8008434:	e7e9      	b.n	800840a <__mdiff+0x8a>
 8008436:	3e01      	subs	r6, #1
 8008438:	e7e9      	b.n	800840e <__mdiff+0x8e>
	...

0800843c <__ulp>:
 800843c:	4b12      	ldr	r3, [pc, #72]	; (8008488 <__ulp+0x4c>)
 800843e:	ee10 2a90 	vmov	r2, s1
 8008442:	401a      	ands	r2, r3
 8008444:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008448:	2b00      	cmp	r3, #0
 800844a:	dd04      	ble.n	8008456 <__ulp+0x1a>
 800844c:	2000      	movs	r0, #0
 800844e:	4619      	mov	r1, r3
 8008450:	ec41 0b10 	vmov	d0, r0, r1
 8008454:	4770      	bx	lr
 8008456:	425b      	negs	r3, r3
 8008458:	151b      	asrs	r3, r3, #20
 800845a:	2b13      	cmp	r3, #19
 800845c:	f04f 0000 	mov.w	r0, #0
 8008460:	f04f 0100 	mov.w	r1, #0
 8008464:	dc04      	bgt.n	8008470 <__ulp+0x34>
 8008466:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800846a:	fa42 f103 	asr.w	r1, r2, r3
 800846e:	e7ef      	b.n	8008450 <__ulp+0x14>
 8008470:	3b14      	subs	r3, #20
 8008472:	2b1e      	cmp	r3, #30
 8008474:	f04f 0201 	mov.w	r2, #1
 8008478:	bfda      	itte	le
 800847a:	f1c3 031f 	rsble	r3, r3, #31
 800847e:	fa02 f303 	lslle.w	r3, r2, r3
 8008482:	4613      	movgt	r3, r2
 8008484:	4618      	mov	r0, r3
 8008486:	e7e3      	b.n	8008450 <__ulp+0x14>
 8008488:	7ff00000 	.word	0x7ff00000

0800848c <__b2d>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	6905      	ldr	r5, [r0, #16]
 8008490:	f100 0714 	add.w	r7, r0, #20
 8008494:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008498:	1f2e      	subs	r6, r5, #4
 800849a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff fdc5 	bl	800802e <__hi0bits>
 80084a4:	f1c0 0320 	rsb	r3, r0, #32
 80084a8:	280a      	cmp	r0, #10
 80084aa:	600b      	str	r3, [r1, #0]
 80084ac:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008524 <__b2d+0x98>
 80084b0:	dc14      	bgt.n	80084dc <__b2d+0x50>
 80084b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80084b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80084ba:	42b7      	cmp	r7, r6
 80084bc:	ea41 030c 	orr.w	r3, r1, ip
 80084c0:	bf34      	ite	cc
 80084c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80084c6:	2100      	movcs	r1, #0
 80084c8:	3015      	adds	r0, #21
 80084ca:	fa04 f000 	lsl.w	r0, r4, r0
 80084ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80084d2:	ea40 0201 	orr.w	r2, r0, r1
 80084d6:	ec43 2b10 	vmov	d0, r2, r3
 80084da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084dc:	42b7      	cmp	r7, r6
 80084de:	bf3a      	itte	cc
 80084e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80084e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80084e8:	2100      	movcs	r1, #0
 80084ea:	380b      	subs	r0, #11
 80084ec:	d015      	beq.n	800851a <__b2d+0x8e>
 80084ee:	4084      	lsls	r4, r0
 80084f0:	f1c0 0520 	rsb	r5, r0, #32
 80084f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80084f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80084fc:	42be      	cmp	r6, r7
 80084fe:	fa21 fc05 	lsr.w	ip, r1, r5
 8008502:	ea44 030c 	orr.w	r3, r4, ip
 8008506:	bf8c      	ite	hi
 8008508:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800850c:	2400      	movls	r4, #0
 800850e:	fa01 f000 	lsl.w	r0, r1, r0
 8008512:	40ec      	lsrs	r4, r5
 8008514:	ea40 0204 	orr.w	r2, r0, r4
 8008518:	e7dd      	b.n	80084d6 <__b2d+0x4a>
 800851a:	ea44 030c 	orr.w	r3, r4, ip
 800851e:	460a      	mov	r2, r1
 8008520:	e7d9      	b.n	80084d6 <__b2d+0x4a>
 8008522:	bf00      	nop
 8008524:	3ff00000 	.word	0x3ff00000

08008528 <__d2b>:
 8008528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800852c:	460e      	mov	r6, r1
 800852e:	2101      	movs	r1, #1
 8008530:	ec59 8b10 	vmov	r8, r9, d0
 8008534:	4615      	mov	r5, r2
 8008536:	f7ff fcb6 	bl	8007ea6 <_Balloc>
 800853a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800853e:	4607      	mov	r7, r0
 8008540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008544:	bb34      	cbnz	r4, 8008594 <__d2b+0x6c>
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	f1b8 0300 	subs.w	r3, r8, #0
 800854c:	d027      	beq.n	800859e <__d2b+0x76>
 800854e:	a802      	add	r0, sp, #8
 8008550:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008554:	f7ff fd8a 	bl	800806c <__lo0bits>
 8008558:	9900      	ldr	r1, [sp, #0]
 800855a:	b1f0      	cbz	r0, 800859a <__d2b+0x72>
 800855c:	9a01      	ldr	r2, [sp, #4]
 800855e:	f1c0 0320 	rsb	r3, r0, #32
 8008562:	fa02 f303 	lsl.w	r3, r2, r3
 8008566:	430b      	orrs	r3, r1
 8008568:	40c2      	lsrs	r2, r0
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	9201      	str	r2, [sp, #4]
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	61bb      	str	r3, [r7, #24]
 8008572:	2b00      	cmp	r3, #0
 8008574:	bf14      	ite	ne
 8008576:	2102      	movne	r1, #2
 8008578:	2101      	moveq	r1, #1
 800857a:	6139      	str	r1, [r7, #16]
 800857c:	b1c4      	cbz	r4, 80085b0 <__d2b+0x88>
 800857e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008582:	4404      	add	r4, r0
 8008584:	6034      	str	r4, [r6, #0]
 8008586:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800858a:	6028      	str	r0, [r5, #0]
 800858c:	4638      	mov	r0, r7
 800858e:	b003      	add	sp, #12
 8008590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008598:	e7d5      	b.n	8008546 <__d2b+0x1e>
 800859a:	6179      	str	r1, [r7, #20]
 800859c:	e7e7      	b.n	800856e <__d2b+0x46>
 800859e:	a801      	add	r0, sp, #4
 80085a0:	f7ff fd64 	bl	800806c <__lo0bits>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	2101      	movs	r1, #1
 80085aa:	6139      	str	r1, [r7, #16]
 80085ac:	3020      	adds	r0, #32
 80085ae:	e7e5      	b.n	800857c <__d2b+0x54>
 80085b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80085b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b8:	6030      	str	r0, [r6, #0]
 80085ba:	6918      	ldr	r0, [r3, #16]
 80085bc:	f7ff fd37 	bl	800802e <__hi0bits>
 80085c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80085c4:	e7e1      	b.n	800858a <__d2b+0x62>

080085c6 <__ratio>:
 80085c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	4688      	mov	r8, r1
 80085cc:	4669      	mov	r1, sp
 80085ce:	4681      	mov	r9, r0
 80085d0:	f7ff ff5c 	bl	800848c <__b2d>
 80085d4:	a901      	add	r1, sp, #4
 80085d6:	4640      	mov	r0, r8
 80085d8:	ec57 6b10 	vmov	r6, r7, d0
 80085dc:	f7ff ff56 	bl	800848c <__b2d>
 80085e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80085e8:	eba3 0c02 	sub.w	ip, r3, r2
 80085ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80085f6:	ec5b ab10 	vmov	sl, fp, d0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfce      	itee	gt
 80085fe:	463a      	movgt	r2, r7
 8008600:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008604:	465a      	movle	r2, fp
 8008606:	4659      	mov	r1, fp
 8008608:	463d      	mov	r5, r7
 800860a:	bfd4      	ite	le
 800860c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008610:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008614:	4630      	mov	r0, r6
 8008616:	ee10 2a10 	vmov	r2, s0
 800861a:	460b      	mov	r3, r1
 800861c:	4629      	mov	r1, r5
 800861e:	f7f8 f915 	bl	800084c <__aeabi_ddiv>
 8008622:	ec41 0b10 	vmov	d0, r0, r1
 8008626:	b003      	add	sp, #12
 8008628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800862c <__copybits>:
 800862c:	3901      	subs	r1, #1
 800862e:	b510      	push	{r4, lr}
 8008630:	1149      	asrs	r1, r1, #5
 8008632:	6914      	ldr	r4, [r2, #16]
 8008634:	3101      	adds	r1, #1
 8008636:	f102 0314 	add.w	r3, r2, #20
 800863a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800863e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008642:	42a3      	cmp	r3, r4
 8008644:	4602      	mov	r2, r0
 8008646:	d303      	bcc.n	8008650 <__copybits+0x24>
 8008648:	2300      	movs	r3, #0
 800864a:	428a      	cmp	r2, r1
 800864c:	d305      	bcc.n	800865a <__copybits+0x2e>
 800864e:	bd10      	pop	{r4, pc}
 8008650:	f853 2b04 	ldr.w	r2, [r3], #4
 8008654:	f840 2b04 	str.w	r2, [r0], #4
 8008658:	e7f3      	b.n	8008642 <__copybits+0x16>
 800865a:	f842 3b04 	str.w	r3, [r2], #4
 800865e:	e7f4      	b.n	800864a <__copybits+0x1e>

08008660 <__any_on>:
 8008660:	f100 0214 	add.w	r2, r0, #20
 8008664:	6900      	ldr	r0, [r0, #16]
 8008666:	114b      	asrs	r3, r1, #5
 8008668:	4298      	cmp	r0, r3
 800866a:	b510      	push	{r4, lr}
 800866c:	db11      	blt.n	8008692 <__any_on+0x32>
 800866e:	dd0a      	ble.n	8008686 <__any_on+0x26>
 8008670:	f011 011f 	ands.w	r1, r1, #31
 8008674:	d007      	beq.n	8008686 <__any_on+0x26>
 8008676:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800867a:	fa24 f001 	lsr.w	r0, r4, r1
 800867e:	fa00 f101 	lsl.w	r1, r0, r1
 8008682:	428c      	cmp	r4, r1
 8008684:	d10b      	bne.n	800869e <__any_on+0x3e>
 8008686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800868a:	4293      	cmp	r3, r2
 800868c:	d803      	bhi.n	8008696 <__any_on+0x36>
 800868e:	2000      	movs	r0, #0
 8008690:	bd10      	pop	{r4, pc}
 8008692:	4603      	mov	r3, r0
 8008694:	e7f7      	b.n	8008686 <__any_on+0x26>
 8008696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800869a:	2900      	cmp	r1, #0
 800869c:	d0f5      	beq.n	800868a <__any_on+0x2a>
 800869e:	2001      	movs	r0, #1
 80086a0:	e7f6      	b.n	8008690 <__any_on+0x30>

080086a2 <_calloc_r>:
 80086a2:	b538      	push	{r3, r4, r5, lr}
 80086a4:	fb02 f401 	mul.w	r4, r2, r1
 80086a8:	4621      	mov	r1, r4
 80086aa:	f000 f857 	bl	800875c <_malloc_r>
 80086ae:	4605      	mov	r5, r0
 80086b0:	b118      	cbz	r0, 80086ba <_calloc_r+0x18>
 80086b2:	4622      	mov	r2, r4
 80086b4:	2100      	movs	r1, #0
 80086b6:	f7fc fd21 	bl	80050fc <memset>
 80086ba:	4628      	mov	r0, r5
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080086c0 <_free_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4605      	mov	r5, r0
 80086c4:	2900      	cmp	r1, #0
 80086c6:	d045      	beq.n	8008754 <_free_r+0x94>
 80086c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086cc:	1f0c      	subs	r4, r1, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfb8      	it	lt
 80086d2:	18e4      	addlt	r4, r4, r3
 80086d4:	f000 fa36 	bl	8008b44 <__malloc_lock>
 80086d8:	4a1f      	ldr	r2, [pc, #124]	; (8008758 <_free_r+0x98>)
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	4610      	mov	r0, r2
 80086de:	b933      	cbnz	r3, 80086ee <_free_r+0x2e>
 80086e0:	6063      	str	r3, [r4, #4]
 80086e2:	6014      	str	r4, [r2, #0]
 80086e4:	4628      	mov	r0, r5
 80086e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ea:	f000 ba2c 	b.w	8008b46 <__malloc_unlock>
 80086ee:	42a3      	cmp	r3, r4
 80086f0:	d90c      	bls.n	800870c <_free_r+0x4c>
 80086f2:	6821      	ldr	r1, [r4, #0]
 80086f4:	1862      	adds	r2, r4, r1
 80086f6:	4293      	cmp	r3, r2
 80086f8:	bf04      	itt	eq
 80086fa:	681a      	ldreq	r2, [r3, #0]
 80086fc:	685b      	ldreq	r3, [r3, #4]
 80086fe:	6063      	str	r3, [r4, #4]
 8008700:	bf04      	itt	eq
 8008702:	1852      	addeq	r2, r2, r1
 8008704:	6022      	streq	r2, [r4, #0]
 8008706:	6004      	str	r4, [r0, #0]
 8008708:	e7ec      	b.n	80086e4 <_free_r+0x24>
 800870a:	4613      	mov	r3, r2
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	b10a      	cbz	r2, 8008714 <_free_r+0x54>
 8008710:	42a2      	cmp	r2, r4
 8008712:	d9fa      	bls.n	800870a <_free_r+0x4a>
 8008714:	6819      	ldr	r1, [r3, #0]
 8008716:	1858      	adds	r0, r3, r1
 8008718:	42a0      	cmp	r0, r4
 800871a:	d10b      	bne.n	8008734 <_free_r+0x74>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	4401      	add	r1, r0
 8008720:	1858      	adds	r0, r3, r1
 8008722:	4282      	cmp	r2, r0
 8008724:	6019      	str	r1, [r3, #0]
 8008726:	d1dd      	bne.n	80086e4 <_free_r+0x24>
 8008728:	6810      	ldr	r0, [r2, #0]
 800872a:	6852      	ldr	r2, [r2, #4]
 800872c:	605a      	str	r2, [r3, #4]
 800872e:	4401      	add	r1, r0
 8008730:	6019      	str	r1, [r3, #0]
 8008732:	e7d7      	b.n	80086e4 <_free_r+0x24>
 8008734:	d902      	bls.n	800873c <_free_r+0x7c>
 8008736:	230c      	movs	r3, #12
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	e7d3      	b.n	80086e4 <_free_r+0x24>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	1821      	adds	r1, r4, r0
 8008740:	428a      	cmp	r2, r1
 8008742:	bf04      	itt	eq
 8008744:	6811      	ldreq	r1, [r2, #0]
 8008746:	6852      	ldreq	r2, [r2, #4]
 8008748:	6062      	str	r2, [r4, #4]
 800874a:	bf04      	itt	eq
 800874c:	1809      	addeq	r1, r1, r0
 800874e:	6021      	streq	r1, [r4, #0]
 8008750:	605c      	str	r4, [r3, #4]
 8008752:	e7c7      	b.n	80086e4 <_free_r+0x24>
 8008754:	bd38      	pop	{r3, r4, r5, pc}
 8008756:	bf00      	nop
 8008758:	2000023c 	.word	0x2000023c

0800875c <_malloc_r>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	1ccd      	adds	r5, r1, #3
 8008760:	f025 0503 	bic.w	r5, r5, #3
 8008764:	3508      	adds	r5, #8
 8008766:	2d0c      	cmp	r5, #12
 8008768:	bf38      	it	cc
 800876a:	250c      	movcc	r5, #12
 800876c:	2d00      	cmp	r5, #0
 800876e:	4606      	mov	r6, r0
 8008770:	db01      	blt.n	8008776 <_malloc_r+0x1a>
 8008772:	42a9      	cmp	r1, r5
 8008774:	d903      	bls.n	800877e <_malloc_r+0x22>
 8008776:	230c      	movs	r3, #12
 8008778:	6033      	str	r3, [r6, #0]
 800877a:	2000      	movs	r0, #0
 800877c:	bd70      	pop	{r4, r5, r6, pc}
 800877e:	f000 f9e1 	bl	8008b44 <__malloc_lock>
 8008782:	4a21      	ldr	r2, [pc, #132]	; (8008808 <_malloc_r+0xac>)
 8008784:	6814      	ldr	r4, [r2, #0]
 8008786:	4621      	mov	r1, r4
 8008788:	b991      	cbnz	r1, 80087b0 <_malloc_r+0x54>
 800878a:	4c20      	ldr	r4, [pc, #128]	; (800880c <_malloc_r+0xb0>)
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	b91b      	cbnz	r3, 8008798 <_malloc_r+0x3c>
 8008790:	4630      	mov	r0, r6
 8008792:	f000 f98f 	bl	8008ab4 <_sbrk_r>
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	4629      	mov	r1, r5
 800879a:	4630      	mov	r0, r6
 800879c:	f000 f98a 	bl	8008ab4 <_sbrk_r>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d124      	bne.n	80087ee <_malloc_r+0x92>
 80087a4:	230c      	movs	r3, #12
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	4630      	mov	r0, r6
 80087aa:	f000 f9cc 	bl	8008b46 <__malloc_unlock>
 80087ae:	e7e4      	b.n	800877a <_malloc_r+0x1e>
 80087b0:	680b      	ldr	r3, [r1, #0]
 80087b2:	1b5b      	subs	r3, r3, r5
 80087b4:	d418      	bmi.n	80087e8 <_malloc_r+0x8c>
 80087b6:	2b0b      	cmp	r3, #11
 80087b8:	d90f      	bls.n	80087da <_malloc_r+0x7e>
 80087ba:	600b      	str	r3, [r1, #0]
 80087bc:	50cd      	str	r5, [r1, r3]
 80087be:	18cc      	adds	r4, r1, r3
 80087c0:	4630      	mov	r0, r6
 80087c2:	f000 f9c0 	bl	8008b46 <__malloc_unlock>
 80087c6:	f104 000b 	add.w	r0, r4, #11
 80087ca:	1d23      	adds	r3, r4, #4
 80087cc:	f020 0007 	bic.w	r0, r0, #7
 80087d0:	1ac3      	subs	r3, r0, r3
 80087d2:	d0d3      	beq.n	800877c <_malloc_r+0x20>
 80087d4:	425a      	negs	r2, r3
 80087d6:	50e2      	str	r2, [r4, r3]
 80087d8:	e7d0      	b.n	800877c <_malloc_r+0x20>
 80087da:	428c      	cmp	r4, r1
 80087dc:	684b      	ldr	r3, [r1, #4]
 80087de:	bf16      	itet	ne
 80087e0:	6063      	strne	r3, [r4, #4]
 80087e2:	6013      	streq	r3, [r2, #0]
 80087e4:	460c      	movne	r4, r1
 80087e6:	e7eb      	b.n	80087c0 <_malloc_r+0x64>
 80087e8:	460c      	mov	r4, r1
 80087ea:	6849      	ldr	r1, [r1, #4]
 80087ec:	e7cc      	b.n	8008788 <_malloc_r+0x2c>
 80087ee:	1cc4      	adds	r4, r0, #3
 80087f0:	f024 0403 	bic.w	r4, r4, #3
 80087f4:	42a0      	cmp	r0, r4
 80087f6:	d005      	beq.n	8008804 <_malloc_r+0xa8>
 80087f8:	1a21      	subs	r1, r4, r0
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 f95a 	bl	8008ab4 <_sbrk_r>
 8008800:	3001      	adds	r0, #1
 8008802:	d0cf      	beq.n	80087a4 <_malloc_r+0x48>
 8008804:	6025      	str	r5, [r4, #0]
 8008806:	e7db      	b.n	80087c0 <_malloc_r+0x64>
 8008808:	2000023c 	.word	0x2000023c
 800880c:	20000240 	.word	0x20000240

08008810 <__ssputs_r>:
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	688e      	ldr	r6, [r1, #8]
 8008816:	429e      	cmp	r6, r3
 8008818:	4682      	mov	sl, r0
 800881a:	460c      	mov	r4, r1
 800881c:	4690      	mov	r8, r2
 800881e:	4699      	mov	r9, r3
 8008820:	d837      	bhi.n	8008892 <__ssputs_r+0x82>
 8008822:	898a      	ldrh	r2, [r1, #12]
 8008824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008828:	d031      	beq.n	800888e <__ssputs_r+0x7e>
 800882a:	6825      	ldr	r5, [r4, #0]
 800882c:	6909      	ldr	r1, [r1, #16]
 800882e:	1a6f      	subs	r7, r5, r1
 8008830:	6965      	ldr	r5, [r4, #20]
 8008832:	2302      	movs	r3, #2
 8008834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008838:	fb95 f5f3 	sdiv	r5, r5, r3
 800883c:	f109 0301 	add.w	r3, r9, #1
 8008840:	443b      	add	r3, r7
 8008842:	429d      	cmp	r5, r3
 8008844:	bf38      	it	cc
 8008846:	461d      	movcc	r5, r3
 8008848:	0553      	lsls	r3, r2, #21
 800884a:	d530      	bpl.n	80088ae <__ssputs_r+0x9e>
 800884c:	4629      	mov	r1, r5
 800884e:	f7ff ff85 	bl	800875c <_malloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	b950      	cbnz	r0, 800886c <__ssputs_r+0x5c>
 8008856:	230c      	movs	r3, #12
 8008858:	f8ca 3000 	str.w	r3, [sl]
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886c:	463a      	mov	r2, r7
 800886e:	6921      	ldr	r1, [r4, #16]
 8008870:	f7ff fb0e 	bl	8007e90 <memcpy>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800887a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	6126      	str	r6, [r4, #16]
 8008882:	6165      	str	r5, [r4, #20]
 8008884:	443e      	add	r6, r7
 8008886:	1bed      	subs	r5, r5, r7
 8008888:	6026      	str	r6, [r4, #0]
 800888a:	60a5      	str	r5, [r4, #8]
 800888c:	464e      	mov	r6, r9
 800888e:	454e      	cmp	r6, r9
 8008890:	d900      	bls.n	8008894 <__ssputs_r+0x84>
 8008892:	464e      	mov	r6, r9
 8008894:	4632      	mov	r2, r6
 8008896:	4641      	mov	r1, r8
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	f000 f93a 	bl	8008b12 <memmove>
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	1b9b      	subs	r3, r3, r6
 80088a2:	60a3      	str	r3, [r4, #8]
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	441e      	add	r6, r3
 80088a8:	6026      	str	r6, [r4, #0]
 80088aa:	2000      	movs	r0, #0
 80088ac:	e7dc      	b.n	8008868 <__ssputs_r+0x58>
 80088ae:	462a      	mov	r2, r5
 80088b0:	f000 f94a 	bl	8008b48 <_realloc_r>
 80088b4:	4606      	mov	r6, r0
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d1e2      	bne.n	8008880 <__ssputs_r+0x70>
 80088ba:	6921      	ldr	r1, [r4, #16]
 80088bc:	4650      	mov	r0, sl
 80088be:	f7ff feff 	bl	80086c0 <_free_r>
 80088c2:	e7c8      	b.n	8008856 <__ssputs_r+0x46>

080088c4 <_svfiprintf_r>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	461d      	mov	r5, r3
 80088ca:	898b      	ldrh	r3, [r1, #12]
 80088cc:	061f      	lsls	r7, r3, #24
 80088ce:	b09d      	sub	sp, #116	; 0x74
 80088d0:	4680      	mov	r8, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	4616      	mov	r6, r2
 80088d6:	d50f      	bpl.n	80088f8 <_svfiprintf_r+0x34>
 80088d8:	690b      	ldr	r3, [r1, #16]
 80088da:	b96b      	cbnz	r3, 80088f8 <_svfiprintf_r+0x34>
 80088dc:	2140      	movs	r1, #64	; 0x40
 80088de:	f7ff ff3d 	bl	800875c <_malloc_r>
 80088e2:	6020      	str	r0, [r4, #0]
 80088e4:	6120      	str	r0, [r4, #16]
 80088e6:	b928      	cbnz	r0, 80088f4 <_svfiprintf_r+0x30>
 80088e8:	230c      	movs	r3, #12
 80088ea:	f8c8 3000 	str.w	r3, [r8]
 80088ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f2:	e0c8      	b.n	8008a86 <_svfiprintf_r+0x1c2>
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	6163      	str	r3, [r4, #20]
 80088f8:	2300      	movs	r3, #0
 80088fa:	9309      	str	r3, [sp, #36]	; 0x24
 80088fc:	2320      	movs	r3, #32
 80088fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008902:	2330      	movs	r3, #48	; 0x30
 8008904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008908:	9503      	str	r5, [sp, #12]
 800890a:	f04f 0b01 	mov.w	fp, #1
 800890e:	4637      	mov	r7, r6
 8008910:	463d      	mov	r5, r7
 8008912:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008916:	b10b      	cbz	r3, 800891c <_svfiprintf_r+0x58>
 8008918:	2b25      	cmp	r3, #37	; 0x25
 800891a:	d13e      	bne.n	800899a <_svfiprintf_r+0xd6>
 800891c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008920:	d00b      	beq.n	800893a <_svfiprintf_r+0x76>
 8008922:	4653      	mov	r3, sl
 8008924:	4632      	mov	r2, r6
 8008926:	4621      	mov	r1, r4
 8008928:	4640      	mov	r0, r8
 800892a:	f7ff ff71 	bl	8008810 <__ssputs_r>
 800892e:	3001      	adds	r0, #1
 8008930:	f000 80a4 	beq.w	8008a7c <_svfiprintf_r+0x1b8>
 8008934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008936:	4453      	add	r3, sl
 8008938:	9309      	str	r3, [sp, #36]	; 0x24
 800893a:	783b      	ldrb	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 809d 	beq.w	8008a7c <_svfiprintf_r+0x1b8>
 8008942:	2300      	movs	r3, #0
 8008944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008954:	931a      	str	r3, [sp, #104]	; 0x68
 8008956:	462f      	mov	r7, r5
 8008958:	2205      	movs	r2, #5
 800895a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800895e:	4850      	ldr	r0, [pc, #320]	; (8008aa0 <_svfiprintf_r+0x1dc>)
 8008960:	f7f7 fc3e 	bl	80001e0 <memchr>
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	b9d0      	cbnz	r0, 800899e <_svfiprintf_r+0xda>
 8008968:	06d9      	lsls	r1, r3, #27
 800896a:	bf44      	itt	mi
 800896c:	2220      	movmi	r2, #32
 800896e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008972:	071a      	lsls	r2, r3, #28
 8008974:	bf44      	itt	mi
 8008976:	222b      	movmi	r2, #43	; 0x2b
 8008978:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800897c:	782a      	ldrb	r2, [r5, #0]
 800897e:	2a2a      	cmp	r2, #42	; 0x2a
 8008980:	d015      	beq.n	80089ae <_svfiprintf_r+0xea>
 8008982:	9a07      	ldr	r2, [sp, #28]
 8008984:	462f      	mov	r7, r5
 8008986:	2000      	movs	r0, #0
 8008988:	250a      	movs	r5, #10
 800898a:	4639      	mov	r1, r7
 800898c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008990:	3b30      	subs	r3, #48	; 0x30
 8008992:	2b09      	cmp	r3, #9
 8008994:	d94d      	bls.n	8008a32 <_svfiprintf_r+0x16e>
 8008996:	b1b8      	cbz	r0, 80089c8 <_svfiprintf_r+0x104>
 8008998:	e00f      	b.n	80089ba <_svfiprintf_r+0xf6>
 800899a:	462f      	mov	r7, r5
 800899c:	e7b8      	b.n	8008910 <_svfiprintf_r+0x4c>
 800899e:	4a40      	ldr	r2, [pc, #256]	; (8008aa0 <_svfiprintf_r+0x1dc>)
 80089a0:	1a80      	subs	r0, r0, r2
 80089a2:	fa0b f000 	lsl.w	r0, fp, r0
 80089a6:	4318      	orrs	r0, r3
 80089a8:	9004      	str	r0, [sp, #16]
 80089aa:	463d      	mov	r5, r7
 80089ac:	e7d3      	b.n	8008956 <_svfiprintf_r+0x92>
 80089ae:	9a03      	ldr	r2, [sp, #12]
 80089b0:	1d11      	adds	r1, r2, #4
 80089b2:	6812      	ldr	r2, [r2, #0]
 80089b4:	9103      	str	r1, [sp, #12]
 80089b6:	2a00      	cmp	r2, #0
 80089b8:	db01      	blt.n	80089be <_svfiprintf_r+0xfa>
 80089ba:	9207      	str	r2, [sp, #28]
 80089bc:	e004      	b.n	80089c8 <_svfiprintf_r+0x104>
 80089be:	4252      	negs	r2, r2
 80089c0:	f043 0302 	orr.w	r3, r3, #2
 80089c4:	9207      	str	r2, [sp, #28]
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	783b      	ldrb	r3, [r7, #0]
 80089ca:	2b2e      	cmp	r3, #46	; 0x2e
 80089cc:	d10c      	bne.n	80089e8 <_svfiprintf_r+0x124>
 80089ce:	787b      	ldrb	r3, [r7, #1]
 80089d0:	2b2a      	cmp	r3, #42	; 0x2a
 80089d2:	d133      	bne.n	8008a3c <_svfiprintf_r+0x178>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	1d1a      	adds	r2, r3, #4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	9203      	str	r2, [sp, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bfb8      	it	lt
 80089e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089e4:	3702      	adds	r7, #2
 80089e6:	9305      	str	r3, [sp, #20]
 80089e8:	4d2e      	ldr	r5, [pc, #184]	; (8008aa4 <_svfiprintf_r+0x1e0>)
 80089ea:	7839      	ldrb	r1, [r7, #0]
 80089ec:	2203      	movs	r2, #3
 80089ee:	4628      	mov	r0, r5
 80089f0:	f7f7 fbf6 	bl	80001e0 <memchr>
 80089f4:	b138      	cbz	r0, 8008a06 <_svfiprintf_r+0x142>
 80089f6:	2340      	movs	r3, #64	; 0x40
 80089f8:	1b40      	subs	r0, r0, r5
 80089fa:	fa03 f000 	lsl.w	r0, r3, r0
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	4303      	orrs	r3, r0
 8008a02:	3701      	adds	r7, #1
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	7839      	ldrb	r1, [r7, #0]
 8008a08:	4827      	ldr	r0, [pc, #156]	; (8008aa8 <_svfiprintf_r+0x1e4>)
 8008a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a0e:	2206      	movs	r2, #6
 8008a10:	1c7e      	adds	r6, r7, #1
 8008a12:	f7f7 fbe5 	bl	80001e0 <memchr>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d038      	beq.n	8008a8c <_svfiprintf_r+0x1c8>
 8008a1a:	4b24      	ldr	r3, [pc, #144]	; (8008aac <_svfiprintf_r+0x1e8>)
 8008a1c:	bb13      	cbnz	r3, 8008a64 <_svfiprintf_r+0x1a0>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	3307      	adds	r3, #7
 8008a22:	f023 0307 	bic.w	r3, r3, #7
 8008a26:	3308      	adds	r3, #8
 8008a28:	9303      	str	r3, [sp, #12]
 8008a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2c:	444b      	add	r3, r9
 8008a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a30:	e76d      	b.n	800890e <_svfiprintf_r+0x4a>
 8008a32:	fb05 3202 	mla	r2, r5, r2, r3
 8008a36:	2001      	movs	r0, #1
 8008a38:	460f      	mov	r7, r1
 8008a3a:	e7a6      	b.n	800898a <_svfiprintf_r+0xc6>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	3701      	adds	r7, #1
 8008a40:	9305      	str	r3, [sp, #20]
 8008a42:	4619      	mov	r1, r3
 8008a44:	250a      	movs	r5, #10
 8008a46:	4638      	mov	r0, r7
 8008a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a4c:	3a30      	subs	r2, #48	; 0x30
 8008a4e:	2a09      	cmp	r2, #9
 8008a50:	d903      	bls.n	8008a5a <_svfiprintf_r+0x196>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0c8      	beq.n	80089e8 <_svfiprintf_r+0x124>
 8008a56:	9105      	str	r1, [sp, #20]
 8008a58:	e7c6      	b.n	80089e8 <_svfiprintf_r+0x124>
 8008a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4607      	mov	r7, r0
 8008a62:	e7f0      	b.n	8008a46 <_svfiprintf_r+0x182>
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <_svfiprintf_r+0x1ec>)
 8008a6c:	a904      	add	r1, sp, #16
 8008a6e:	4640      	mov	r0, r8
 8008a70:	f7fc fbe0 	bl	8005234 <_printf_float>
 8008a74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008a78:	4681      	mov	r9, r0
 8008a7a:	d1d6      	bne.n	8008a2a <_svfiprintf_r+0x166>
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	065b      	lsls	r3, r3, #25
 8008a80:	f53f af35 	bmi.w	80088ee <_svfiprintf_r+0x2a>
 8008a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a86:	b01d      	add	sp, #116	; 0x74
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	ab03      	add	r3, sp, #12
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	4622      	mov	r2, r4
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <_svfiprintf_r+0x1ec>)
 8008a94:	a904      	add	r1, sp, #16
 8008a96:	4640      	mov	r0, r8
 8008a98:	f7fc fe82 	bl	80057a0 <_printf_i>
 8008a9c:	e7ea      	b.n	8008a74 <_svfiprintf_r+0x1b0>
 8008a9e:	bf00      	nop
 8008aa0:	08008de4 	.word	0x08008de4
 8008aa4:	08008dea 	.word	0x08008dea
 8008aa8:	08008dee 	.word	0x08008dee
 8008aac:	08005235 	.word	0x08005235
 8008ab0:	08008811 	.word	0x08008811

08008ab4 <_sbrk_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4c06      	ldr	r4, [pc, #24]	; (8008ad0 <_sbrk_r+0x1c>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4605      	mov	r5, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	f7f9 fba8 	bl	8002214 <_sbrk>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_sbrk_r+0x1a>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_sbrk_r+0x1a>
 8008acc:	602b      	str	r3, [r5, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	20000414 	.word	0x20000414

08008ad4 <strncmp>:
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	b16a      	cbz	r2, 8008af4 <strncmp+0x20>
 8008ad8:	3901      	subs	r1, #1
 8008ada:	1884      	adds	r4, r0, r2
 8008adc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ae0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d103      	bne.n	8008af0 <strncmp+0x1c>
 8008ae8:	42a0      	cmp	r0, r4
 8008aea:	d001      	beq.n	8008af0 <strncmp+0x1c>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1f5      	bne.n	8008adc <strncmp+0x8>
 8008af0:	1a98      	subs	r0, r3, r2
 8008af2:	bd10      	pop	{r4, pc}
 8008af4:	4610      	mov	r0, r2
 8008af6:	e7fc      	b.n	8008af2 <strncmp+0x1e>

08008af8 <__ascii_wctomb>:
 8008af8:	b149      	cbz	r1, 8008b0e <__ascii_wctomb+0x16>
 8008afa:	2aff      	cmp	r2, #255	; 0xff
 8008afc:	bf85      	ittet	hi
 8008afe:	238a      	movhi	r3, #138	; 0x8a
 8008b00:	6003      	strhi	r3, [r0, #0]
 8008b02:	700a      	strbls	r2, [r1, #0]
 8008b04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b08:	bf98      	it	ls
 8008b0a:	2001      	movls	r0, #1
 8008b0c:	4770      	bx	lr
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4770      	bx	lr

08008b12 <memmove>:
 8008b12:	4288      	cmp	r0, r1
 8008b14:	b510      	push	{r4, lr}
 8008b16:	eb01 0302 	add.w	r3, r1, r2
 8008b1a:	d807      	bhi.n	8008b2c <memmove+0x1a>
 8008b1c:	1e42      	subs	r2, r0, #1
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	d00a      	beq.n	8008b38 <memmove+0x26>
 8008b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b2a:	e7f8      	b.n	8008b1e <memmove+0xc>
 8008b2c:	4283      	cmp	r3, r0
 8008b2e:	d9f5      	bls.n	8008b1c <memmove+0xa>
 8008b30:	1881      	adds	r1, r0, r2
 8008b32:	1ad2      	subs	r2, r2, r3
 8008b34:	42d3      	cmn	r3, r2
 8008b36:	d100      	bne.n	8008b3a <memmove+0x28>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b42:	e7f7      	b.n	8008b34 <memmove+0x22>

08008b44 <__malloc_lock>:
 8008b44:	4770      	bx	lr

08008b46 <__malloc_unlock>:
 8008b46:	4770      	bx	lr

08008b48 <_realloc_r>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	460e      	mov	r6, r1
 8008b50:	b921      	cbnz	r1, 8008b5c <_realloc_r+0x14>
 8008b52:	4611      	mov	r1, r2
 8008b54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b58:	f7ff be00 	b.w	800875c <_malloc_r>
 8008b5c:	b922      	cbnz	r2, 8008b68 <_realloc_r+0x20>
 8008b5e:	f7ff fdaf 	bl	80086c0 <_free_r>
 8008b62:	4625      	mov	r5, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b68:	f000 f814 	bl	8008b94 <_malloc_usable_size_r>
 8008b6c:	42a0      	cmp	r0, r4
 8008b6e:	d20f      	bcs.n	8008b90 <_realloc_r+0x48>
 8008b70:	4621      	mov	r1, r4
 8008b72:	4638      	mov	r0, r7
 8008b74:	f7ff fdf2 	bl	800875c <_malloc_r>
 8008b78:	4605      	mov	r5, r0
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d0f2      	beq.n	8008b64 <_realloc_r+0x1c>
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4622      	mov	r2, r4
 8008b82:	f7ff f985 	bl	8007e90 <memcpy>
 8008b86:	4631      	mov	r1, r6
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff fd99 	bl	80086c0 <_free_r>
 8008b8e:	e7e9      	b.n	8008b64 <_realloc_r+0x1c>
 8008b90:	4635      	mov	r5, r6
 8008b92:	e7e7      	b.n	8008b64 <_realloc_r+0x1c>

08008b94 <_malloc_usable_size_r>:
 8008b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b98:	1f18      	subs	r0, r3, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bfbc      	itt	lt
 8008b9e:	580b      	ldrlt	r3, [r1, r0]
 8008ba0:	18c0      	addlt	r0, r0, r3
 8008ba2:	4770      	bx	lr

08008ba4 <_init>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	bf00      	nop
 8008ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008baa:	bc08      	pop	{r3}
 8008bac:	469e      	mov	lr, r3
 8008bae:	4770      	bx	lr

08008bb0 <_fini>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	bf00      	nop
 8008bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb6:	bc08      	pop	{r3}
 8008bb8:	469e      	mov	lr, r3
 8008bba:	4770      	bx	lr
